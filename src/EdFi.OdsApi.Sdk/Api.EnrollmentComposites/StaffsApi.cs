/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using EdFi.OdsApi.Sdk.Client;
using EdFi.OdsApi.Sdk.Models.EnrollmentComposites;

namespace EdFi.OdsApi.Sdk.Api.EnrollmentComposites
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStaffsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffs (int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsWithHttpInfo (int? offset = null, int? limit = null, string fields = null, string q = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <returns>Staff</returns>
        Staff GetStaffsById (string id, string ifNoneMatch = null, string fields = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <returns>ApiResponse of Staff</returns>
        ApiResponse<Staff> GetStaffsByIdWithHttpInfo (string id, string ifNoneMatch = null, string fields = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffsByLocalEducationAgency (string localEducationAgencyId, int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsByLocalEducationAgencyWithHttpInfo (string localEducationAgencyId, int? offset = null, int? limit = null, string fields = null, string q = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffsBySchool (string schoolId, int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsBySchoolWithHttpInfo (string schoolId, int? offset = null, int? limit = null, string fields = null, string q = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffsBySection (string sectionId, int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsBySectionWithHttpInfo (string sectionId, int? offset = null, int? limit = null, string fields = null, string q = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        List<Staff> GetStaffsByStudent (string studentId, int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        ApiResponse<List<Staff>> GetStaffsByStudentWithHttpInfo (string studentId, int? offset = null, int? limit = null, string fields = null, string q = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsAsync (int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsAsyncWithHttpInfo (int? offset = null, int? limit = null, string fields = null, string q = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <returns>Task of Staff</returns>
        System.Threading.Tasks.Task<Staff> GetStaffsByIdAsync (string id, string ifNoneMatch = null, string fields = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (Staff)</returns>
        System.Threading.Tasks.Task<ApiResponse<Staff>> GetStaffsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null, string fields = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsByLocalEducationAgencyAsync (string localEducationAgencyId, int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsByLocalEducationAgencyAsyncWithHttpInfo (string localEducationAgencyId, int? offset = null, int? limit = null, string fields = null, string q = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsBySchoolAsync (string schoolId, int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsBySchoolAsyncWithHttpInfo (string schoolId, int? offset = null, int? limit = null, string fields = null, string q = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsBySectionAsync (string sectionId, int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsBySectionAsyncWithHttpInfo (string sectionId, int? offset = null, int? limit = null, string fields = null, string q = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        System.Threading.Tasks.Task<List<Staff>> GetStaffsByStudentAsync (string studentId, int? offset = null, int? limit = null, string fields = null, string q = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsByStudentAsyncWithHttpInfo (string studentId, int? offset = null, int? limit = null, string fields = null, string q = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StaffsApi : IStaffsApi
    {
        private EdFi.OdsApi.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StaffsApi(String basePath)
        {
            this.Configuration = new EdFi.OdsApi.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StaffsApi(EdFi.OdsApi.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EdFi.OdsApi.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.OdsApi.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.OdsApi.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffs (int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = GetStaffsWithHttpInfo(offset, limit, fields, q);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public ApiResponse< List<Staff> > GetStaffsWithHttpInfo (int? offset = null, int? limit = null, string fields = null, string q = null)
        {

            var localVarPath = "./ed-fi/enrollment/Staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsAsync (int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = await GetStaffsAsyncWithHttpInfo(offset, limit, fields, q);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsAsyncWithHttpInfo (int? offset = null, int? limit = null, string fields = null, string q = null)
        {

            var localVarPath = "./ed-fi/enrollment/Staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <returns>Staff</returns>
        public Staff GetStaffsById (string id, string ifNoneMatch = null, string fields = null)
        {
             ApiResponse<Staff> localVarResponse = GetStaffsByIdWithHttpInfo(id, ifNoneMatch, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <returns>ApiResponse of Staff</returns>
        public ApiResponse< Staff > GetStaffsByIdWithHttpInfo (string id, string ifNoneMatch = null, string fields = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffsApi->GetStaffsById");

            var localVarPath = "./ed-fi/enrollment/Staffs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Staff>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Staff) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Staff)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <returns>Task of Staff</returns>
        public async System.Threading.Tasks.Task<Staff> GetStaffsByIdAsync (string id, string ifNoneMatch = null, string fields = null)
        {
             ApiResponse<Staff> localVarResponse = await GetStaffsByIdAsyncWithHttpInfo(id, ifNoneMatch, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (Staff)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Staff>> GetStaffsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null, string fields = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffsApi->GetStaffsById");

            var localVarPath = "./ed-fi/enrollment/Staffs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Staff>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Staff) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Staff)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffsByLocalEducationAgency (string localEducationAgencyId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = GetStaffsByLocalEducationAgencyWithHttpInfo(localEducationAgencyId, offset, limit, fields, q);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public ApiResponse< List<Staff> > GetStaffsByLocalEducationAgencyWithHttpInfo (string localEducationAgencyId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
            // verify the required parameter 'localEducationAgencyId' is set
            if (localEducationAgencyId == null)
                throw new ApiException(400, "Missing required parameter 'localEducationAgencyId' when calling StaffsApi->GetStaffsByLocalEducationAgency");

            var localVarPath = "./ed-fi/enrollment/localEducationAgencies/{localEducationAgency_id}/staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (localEducationAgencyId != null) localVarPathParams.Add("localEducationAgency_id", this.Configuration.ApiClient.ParameterToString(localEducationAgencyId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsByLocalEducationAgency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsByLocalEducationAgencyAsync (string localEducationAgencyId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = await GetStaffsByLocalEducationAgencyAsyncWithHttpInfo(localEducationAgencyId, offset, limit, fields, q);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsByLocalEducationAgencyAsyncWithHttpInfo (string localEducationAgencyId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
            // verify the required parameter 'localEducationAgencyId' is set
            if (localEducationAgencyId == null)
                throw new ApiException(400, "Missing required parameter 'localEducationAgencyId' when calling StaffsApi->GetStaffsByLocalEducationAgency");

            var localVarPath = "./ed-fi/enrollment/localEducationAgencies/{localEducationAgency_id}/staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (localEducationAgencyId != null) localVarPathParams.Add("localEducationAgency_id", this.Configuration.ApiClient.ParameterToString(localEducationAgencyId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsByLocalEducationAgency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffsBySchool (string schoolId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = GetStaffsBySchoolWithHttpInfo(schoolId, offset, limit, fields, q);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public ApiResponse< List<Staff> > GetStaffsBySchoolWithHttpInfo (string schoolId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
            // verify the required parameter 'schoolId' is set
            if (schoolId == null)
                throw new ApiException(400, "Missing required parameter 'schoolId' when calling StaffsApi->GetStaffsBySchool");

            var localVarPath = "./ed-fi/enrollment/schools/{school_id}/staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schoolId != null) localVarPathParams.Add("school_id", this.Configuration.ApiClient.ParameterToString(schoolId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsBySchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsBySchoolAsync (string schoolId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = await GetStaffsBySchoolAsyncWithHttpInfo(schoolId, offset, limit, fields, q);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsBySchoolAsyncWithHttpInfo (string schoolId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
            // verify the required parameter 'schoolId' is set
            if (schoolId == null)
                throw new ApiException(400, "Missing required parameter 'schoolId' when calling StaffsApi->GetStaffsBySchool");

            var localVarPath = "./ed-fi/enrollment/schools/{school_id}/staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schoolId != null) localVarPathParams.Add("school_id", this.Configuration.ApiClient.ParameterToString(schoolId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsBySchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffsBySection (string sectionId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = GetStaffsBySectionWithHttpInfo(sectionId, offset, limit, fields, q);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public ApiResponse< List<Staff> > GetStaffsBySectionWithHttpInfo (string sectionId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling StaffsApi->GetStaffsBySection");

            var localVarPath = "./ed-fi/enrollment/sections/{section_id}/staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sectionId != null) localVarPathParams.Add("section_id", this.Configuration.ApiClient.ParameterToString(sectionId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsBySection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsBySectionAsync (string sectionId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = await GetStaffsBySectionAsyncWithHttpInfo(sectionId, offset, limit, fields, q);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsBySectionAsyncWithHttpInfo (string sectionId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling StaffsApi->GetStaffsBySection");

            var localVarPath = "./ed-fi/enrollment/sections/{section_id}/staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sectionId != null) localVarPathParams.Add("section_id", this.Configuration.ApiClient.ParameterToString(sectionId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsBySection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>List&lt;Staff&gt;</returns>
        public List<Staff> GetStaffsByStudent (string studentId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = GetStaffsByStudentWithHttpInfo(studentId, offset, limit, fields, q);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Staff&gt;</returns>
        public ApiResponse< List<Staff> > GetStaffsByStudentWithHttpInfo (string studentId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling StaffsApi->GetStaffsByStudent");

            var localVarPath = "./ed-fi/enrollment/students/{student_id}/staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (studentId != null) localVarPathParams.Add("student_id", this.Configuration.ApiClient.ParameterToString(studentId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsByStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Staff&gt;</returns>
        public async System.Threading.Tasks.Task<List<Staff>> GetStaffsByStudentAsync (string studentId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
             ApiResponse<List<Staff>> localVarResponse = await GetStaffsByStudentAsyncWithHttpInfo(studentId, offset, limit, fields, q);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Staff&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Staff>>> GetStaffsByStudentAsyncWithHttpInfo (string studentId, int? offset = null, int? limit = null, string fields = null, string q = null)
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling StaffsApi->GetStaffsByStudent");

            var localVarPath = "./ed-fi/enrollment/students/{student_id}/staffs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (studentId != null) localVarPathParams.Add("student_id", this.Configuration.ApiClient.ParameterToString(studentId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffsByStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Staff>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Staff>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Staff>)));
        }

    }
}
