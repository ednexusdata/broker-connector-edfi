/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmApplicantTeacherPreparationProgram
    /// </summary>
    [DataContract]
    public partial class TpdmApplicantTeacherPreparationProgram :  IEquatable<TpdmApplicantTeacherPreparationProgram>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplicantTeacherPreparationProgram" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmApplicantTeacherPreparationProgram() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplicantTeacherPreparationProgram" /> class.
        /// </summary>
        /// <param name="teacherPreparationProgramName">The name of the Teacher Preparation Program. (required).</param>
        /// <param name="levelOfDegreeAwardedDescriptor">The level of degree awarded by the teacher preparation program to the person (e.g., Certificate Only, Bachelor&#39;s, Master&#39;s, etc.). (required).</param>
        /// <param name="teacherPreparationProgramTypeDescriptor">The type of teacher prep program (e.g., college, alternative, TFA, etc.). (required).</param>
        /// <param name="gpa">The final GPA the teacher achieved in the program..</param>
        /// <param name="majorSpecialization">The major area for a degree or area of specialization for a certificate. (required).</param>
        /// <param name="nameOfInstitution">The name of the organization providing the teacher preparation program. (required).</param>
        /// <param name="teacherPreparationProgramIdentifier">An identifier assigned to the teacher preparation program..</param>
        public TpdmApplicantTeacherPreparationProgram(string teacherPreparationProgramName = default(string), string levelOfDegreeAwardedDescriptor = default(string), string teacherPreparationProgramTypeDescriptor = default(string), double? gpa = default(double?), string majorSpecialization = default(string), string nameOfInstitution = default(string), string teacherPreparationProgramIdentifier = default(string))
        {
            // to ensure "teacherPreparationProgramName" is required (not null)
            if (teacherPreparationProgramName == null)
            {
                throw new InvalidDataException("teacherPreparationProgramName is a required property for TpdmApplicantTeacherPreparationProgram and cannot be null");
            }
            else
            {
                this.TeacherPreparationProgramName = teacherPreparationProgramName;
            }
            // to ensure "levelOfDegreeAwardedDescriptor" is required (not null)
            if (levelOfDegreeAwardedDescriptor == null)
            {
                throw new InvalidDataException("levelOfDegreeAwardedDescriptor is a required property for TpdmApplicantTeacherPreparationProgram and cannot be null");
            }
            else
            {
                this.LevelOfDegreeAwardedDescriptor = levelOfDegreeAwardedDescriptor;
            }
            // to ensure "teacherPreparationProgramTypeDescriptor" is required (not null)
            if (teacherPreparationProgramTypeDescriptor == null)
            {
                throw new InvalidDataException("teacherPreparationProgramTypeDescriptor is a required property for TpdmApplicantTeacherPreparationProgram and cannot be null");
            }
            else
            {
                this.TeacherPreparationProgramTypeDescriptor = teacherPreparationProgramTypeDescriptor;
            }
            // to ensure "majorSpecialization" is required (not null)
            if (majorSpecialization == null)
            {
                throw new InvalidDataException("majorSpecialization is a required property for TpdmApplicantTeacherPreparationProgram and cannot be null");
            }
            else
            {
                this.MajorSpecialization = majorSpecialization;
            }
            // to ensure "nameOfInstitution" is required (not null)
            if (nameOfInstitution == null)
            {
                throw new InvalidDataException("nameOfInstitution is a required property for TpdmApplicantTeacherPreparationProgram and cannot be null");
            }
            else
            {
                this.NameOfInstitution = nameOfInstitution;
            }
            this.Gpa = gpa;
            this.TeacherPreparationProgramIdentifier = teacherPreparationProgramIdentifier;
        }
        
        /// <summary>
        /// The name of the Teacher Preparation Program.
        /// </summary>
        /// <value>The name of the Teacher Preparation Program.</value>
        [DataMember(Name="teacherPreparationProgramName", EmitDefaultValue=false)]
        public string TeacherPreparationProgramName { get; set; }

        /// <summary>
        /// The level of degree awarded by the teacher preparation program to the person (e.g., Certificate Only, Bachelor&#39;s, Master&#39;s, etc.).
        /// </summary>
        /// <value>The level of degree awarded by the teacher preparation program to the person (e.g., Certificate Only, Bachelor&#39;s, Master&#39;s, etc.).</value>
        [DataMember(Name="levelOfDegreeAwardedDescriptor", EmitDefaultValue=false)]
        public string LevelOfDegreeAwardedDescriptor { get; set; }

        /// <summary>
        /// The type of teacher prep program (e.g., college, alternative, TFA, etc.).
        /// </summary>
        /// <value>The type of teacher prep program (e.g., college, alternative, TFA, etc.).</value>
        [DataMember(Name="teacherPreparationProgramTypeDescriptor", EmitDefaultValue=false)]
        public string TeacherPreparationProgramTypeDescriptor { get; set; }

        /// <summary>
        /// The final GPA the teacher achieved in the program.
        /// </summary>
        /// <value>The final GPA the teacher achieved in the program.</value>
        [DataMember(Name="gpa", EmitDefaultValue=false)]
        public double? Gpa { get; set; }

        /// <summary>
        /// The major area for a degree or area of specialization for a certificate.
        /// </summary>
        /// <value>The major area for a degree or area of specialization for a certificate.</value>
        [DataMember(Name="majorSpecialization", EmitDefaultValue=false)]
        public string MajorSpecialization { get; set; }

        /// <summary>
        /// The name of the organization providing the teacher preparation program.
        /// </summary>
        /// <value>The name of the organization providing the teacher preparation program.</value>
        [DataMember(Name="nameOfInstitution", EmitDefaultValue=false)]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// An identifier assigned to the teacher preparation program.
        /// </summary>
        /// <value>An identifier assigned to the teacher preparation program.</value>
        [DataMember(Name="teacherPreparationProgramIdentifier", EmitDefaultValue=false)]
        public string TeacherPreparationProgramIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmApplicantTeacherPreparationProgram {\n");
            sb.Append("  TeacherPreparationProgramName: ").Append(TeacherPreparationProgramName).Append("\n");
            sb.Append("  LevelOfDegreeAwardedDescriptor: ").Append(LevelOfDegreeAwardedDescriptor).Append("\n");
            sb.Append("  TeacherPreparationProgramTypeDescriptor: ").Append(TeacherPreparationProgramTypeDescriptor).Append("\n");
            sb.Append("  Gpa: ").Append(Gpa).Append("\n");
            sb.Append("  MajorSpecialization: ").Append(MajorSpecialization).Append("\n");
            sb.Append("  NameOfInstitution: ").Append(NameOfInstitution).Append("\n");
            sb.Append("  TeacherPreparationProgramIdentifier: ").Append(TeacherPreparationProgramIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmApplicantTeacherPreparationProgram);
        }

        /// <summary>
        /// Returns true if TpdmApplicantTeacherPreparationProgram instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmApplicantTeacherPreparationProgram to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmApplicantTeacherPreparationProgram input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TeacherPreparationProgramName == input.TeacherPreparationProgramName ||
                    (this.TeacherPreparationProgramName != null &&
                    this.TeacherPreparationProgramName.Equals(input.TeacherPreparationProgramName))
                ) && 
                (
                    this.LevelOfDegreeAwardedDescriptor == input.LevelOfDegreeAwardedDescriptor ||
                    (this.LevelOfDegreeAwardedDescriptor != null &&
                    this.LevelOfDegreeAwardedDescriptor.Equals(input.LevelOfDegreeAwardedDescriptor))
                ) && 
                (
                    this.TeacherPreparationProgramTypeDescriptor == input.TeacherPreparationProgramTypeDescriptor ||
                    (this.TeacherPreparationProgramTypeDescriptor != null &&
                    this.TeacherPreparationProgramTypeDescriptor.Equals(input.TeacherPreparationProgramTypeDescriptor))
                ) && 
                (
                    this.Gpa == input.Gpa ||
                    (this.Gpa != null &&
                    this.Gpa.Equals(input.Gpa))
                ) && 
                (
                    this.MajorSpecialization == input.MajorSpecialization ||
                    (this.MajorSpecialization != null &&
                    this.MajorSpecialization.Equals(input.MajorSpecialization))
                ) && 
                (
                    this.NameOfInstitution == input.NameOfInstitution ||
                    (this.NameOfInstitution != null &&
                    this.NameOfInstitution.Equals(input.NameOfInstitution))
                ) && 
                (
                    this.TeacherPreparationProgramIdentifier == input.TeacherPreparationProgramIdentifier ||
                    (this.TeacherPreparationProgramIdentifier != null &&
                    this.TeacherPreparationProgramIdentifier.Equals(input.TeacherPreparationProgramIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TeacherPreparationProgramName != null)
                    hashCode = hashCode * 59 + this.TeacherPreparationProgramName.GetHashCode();
                if (this.LevelOfDegreeAwardedDescriptor != null)
                    hashCode = hashCode * 59 + this.LevelOfDegreeAwardedDescriptor.GetHashCode();
                if (this.TeacherPreparationProgramTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.TeacherPreparationProgramTypeDescriptor.GetHashCode();
                if (this.Gpa != null)
                    hashCode = hashCode * 59 + this.Gpa.GetHashCode();
                if (this.MajorSpecialization != null)
                    hashCode = hashCode * 59 + this.MajorSpecialization.GetHashCode();
                if (this.NameOfInstitution != null)
                    hashCode = hashCode * 59 + this.NameOfInstitution.GetHashCode();
                if (this.TeacherPreparationProgramIdentifier != null)
                    hashCode = hashCode * 59 + this.TeacherPreparationProgramIdentifier.GetHashCode();
                return hashCode;
            }
        }
    }

}
