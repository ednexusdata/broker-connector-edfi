/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmTeacherCandidate
    /// </summary>
    [DataContract]
    public partial class TpdmTeacherCandidate :  IEquatable<TpdmTeacherCandidate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmTeacherCandidate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidate" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (required).</param>
        /// <param name="tppProgramDegrees">An unordered collection of teacherCandidateTPPProgramDegrees. Details of the degree. (required).</param>
        /// <param name="personReference">personReference.</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="addresses">An unordered collection of teacherCandidateAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code..</param>
        /// <param name="aids">An unordered collection of teacherCandidateAids. This entity represents the financial aid a person is awarded..</param>
        /// <param name="backgroundCheck">backgroundCheck.</param>
        /// <param name="birthCity">The city the student was born in..</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes..</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (required).</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born..</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth..</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born..</param>
        /// <param name="characteristics">An unordered collection of teacherCandidateCharacteristics. Reflects important characteristics of the teacher candidate&#39;s home situation:        Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth..</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen..</param>
        /// <param name="cohortYears">An unordered collection of teacherCandidateCohortYears. The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade..</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S..</param>
        /// <param name="degreeSpecializations">An unordered collection of teacherCandidateDegreeSpecializations. Information around the area(s) of specialization for an individual..</param>
        /// <param name="disabilities">An unordered collection of teacherCandidateDisabilities. The disability condition(s) that best describes an individual&#39;s impairment..</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services..</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy..</param>
        /// <param name="electronicMails">An unordered collection of teacherCandidateElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs..</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL)..</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="genderDescriptor">The gender with which a person associates..</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;.</param>
        /// <param name="identificationCodes">An unordered collection of teacherCandidateIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a teacher candidate..</param>
        /// <param name="identificationDocuments">An unordered collection of teacherCandidateIdentificationDocuments. Describe the documentation of citizenship..</param>
        /// <param name="indicators">An unordered collection of teacherCandidateIndicators. Indicator(s) or metric(s) computed for the student (e.g., at risk) to influence more effective education or direct specific interventions..</param>
        /// <param name="internationalAddresses">An unordered collection of teacherCandidateInternationalAddresses. The set of elements that describes an international address..</param>
        /// <param name="languages">An unordered collection of teacherCandidateLanguages. The language(s) the individual uses to communicate..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient..</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface..</param>
        /// <param name="maidenName">The person&#39;s maiden name..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.).</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin..</param>
        /// <param name="otherNames">An unordered collection of teacherCandidateOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of teacherCandidatePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person..</param>
        /// <param name="previousCareerDescriptor">The career previous for an individual..</param>
        /// <param name="profileThumbnail">Locator for the student photo..</param>
        /// <param name="programComplete">An indication of whether a teacher candidate has completed the teacher preparation program..</param>
        /// <param name="races">An unordered collection of teacherCandidateRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races..</param>
        /// <param name="sexDescriptor">A person&#39;s gender. (required).</param>
        /// <param name="telephones">An unordered collection of teacherCandidateTelephones. The 10-digit telephone number, including the area code, for the person..</param>
        /// <param name="tuitionCost">The tuition for a person&#39;s participation in a program, service. or course..</param>
        /// <param name="visas">An unordered collection of teacherCandidateVisas. An indicator of a non-US citizen&#39;s Visa type..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmTeacherCandidate(string id = default(string), string teacherCandidateIdentifier = default(string), List<TpdmTeacherCandidateTPPProgramDegree> tppProgramDegrees = default(List<TpdmTeacherCandidateTPPProgramDegree>), EdFiPersonReference personReference = default(EdFiPersonReference), EdFiStudentReference studentReference = default(EdFiStudentReference), List<TpdmTeacherCandidateAddress> addresses = default(List<TpdmTeacherCandidateAddress>), List<TpdmTeacherCandidateAid> aids = default(List<TpdmTeacherCandidateAid>), TpdmTeacherCandidateBackgroundCheck backgroundCheck = default(TpdmTeacherCandidateBackgroundCheck), string birthCity = default(string), string birthCountryDescriptor = default(string), DateTime? birthDate = default(DateTime?), string birthInternationalProvince = default(string), string birthSexDescriptor = default(string), string birthStateAbbreviationDescriptor = default(string), List<TpdmTeacherCandidateCharacteristic> characteristics = default(List<TpdmTeacherCandidateCharacteristic>), string citizenshipStatusDescriptor = default(string), List<TpdmTeacherCandidateCohortYear> cohortYears = default(List<TpdmTeacherCandidateCohortYear>), DateTime? dateEnteredUS = default(DateTime?), List<TpdmTeacherCandidateDegreeSpecialization> degreeSpecializations = default(List<TpdmTeacherCandidateDegreeSpecialization>), List<TpdmTeacherCandidateDisability> disabilities = default(List<TpdmTeacherCandidateDisability>), string displacementStatus = default(string), bool? economicDisadvantaged = default(bool?), List<TpdmTeacherCandidateElectronicMail> electronicMails = default(List<TpdmTeacherCandidateElectronicMail>), string englishLanguageExamDescriptor = default(string), bool? firstGenerationStudent = default(bool?), string firstName = default(string), string genderDescriptor = default(string), string generationCodeSuffix = default(string), bool? hispanicLatinoEthnicity = default(bool?), List<TpdmTeacherCandidateIdentificationCode> identificationCodes = default(List<TpdmTeacherCandidateIdentificationCode>), List<TpdmTeacherCandidateIdentificationDocument> identificationDocuments = default(List<TpdmTeacherCandidateIdentificationDocument>), List<TpdmTeacherCandidateIndicator> indicators = default(List<TpdmTeacherCandidateIndicator>), List<TpdmTeacherCandidateInternationalAddress> internationalAddresses = default(List<TpdmTeacherCandidateInternationalAddress>), List<TpdmTeacherCandidateLanguage> languages = default(List<TpdmTeacherCandidateLanguage>), string lastSurname = default(string), string limitedEnglishProficiencyDescriptor = default(string), string loginId = default(string), string maidenName = default(string), string middleName = default(string), bool? multipleBirthStatus = default(bool?), string oldEthnicityDescriptor = default(string), List<TpdmTeacherCandidateOtherName> otherNames = default(List<TpdmTeacherCandidateOtherName>), List<TpdmTeacherCandidatePersonalIdentificationDocument> personalIdentificationDocuments = default(List<TpdmTeacherCandidatePersonalIdentificationDocument>), string personalTitlePrefix = default(string), string previousCareerDescriptor = default(string), string profileThumbnail = default(string), bool? programComplete = default(bool?), List<TpdmTeacherCandidateRace> races = default(List<TpdmTeacherCandidateRace>), string sexDescriptor = default(string), List<TpdmTeacherCandidateTelephone> telephones = default(List<TpdmTeacherCandidateTelephone>), double? tuitionCost = default(double?), List<TpdmTeacherCandidateVisa> visas = default(List<TpdmTeacherCandidateVisa>), string etag = default(string))
        {
            // to ensure "teacherCandidateIdentifier" is required (not null)
            if (teacherCandidateIdentifier == null)
            {
                throw new InvalidDataException("teacherCandidateIdentifier is a required property for TpdmTeacherCandidate and cannot be null");
            }
            else
            {
                this.TeacherCandidateIdentifier = teacherCandidateIdentifier;
            }
            // to ensure "tppProgramDegrees" is required (not null)
            if (tppProgramDegrees == null)
            {
                throw new InvalidDataException("tppProgramDegrees is a required property for TpdmTeacherCandidate and cannot be null");
            }
            else
            {
                this.TppProgramDegrees = tppProgramDegrees;
            }
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new InvalidDataException("studentReference is a required property for TpdmTeacherCandidate and cannot be null");
            }
            else
            {
                this.StudentReference = studentReference;
            }
            // to ensure "birthDate" is required (not null)
            if (birthDate == null)
            {
                throw new InvalidDataException("birthDate is a required property for TpdmTeacherCandidate and cannot be null");
            }
            else
            {
                this.BirthDate = birthDate;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for TpdmTeacherCandidate and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastSurname" is required (not null)
            if (lastSurname == null)
            {
                throw new InvalidDataException("lastSurname is a required property for TpdmTeacherCandidate and cannot be null");
            }
            else
            {
                this.LastSurname = lastSurname;
            }
            // to ensure "sexDescriptor" is required (not null)
            if (sexDescriptor == null)
            {
                throw new InvalidDataException("sexDescriptor is a required property for TpdmTeacherCandidate and cannot be null");
            }
            else
            {
                this.SexDescriptor = sexDescriptor;
            }
            this.Id = id;
            this.PersonReference = personReference;
            this.Addresses = addresses;
            this.Aids = aids;
            this.BackgroundCheck = backgroundCheck;
            this.BirthCity = birthCity;
            this.BirthCountryDescriptor = birthCountryDescriptor;
            this.BirthInternationalProvince = birthInternationalProvince;
            this.BirthSexDescriptor = birthSexDescriptor;
            this.BirthStateAbbreviationDescriptor = birthStateAbbreviationDescriptor;
            this.Characteristics = characteristics;
            this.CitizenshipStatusDescriptor = citizenshipStatusDescriptor;
            this.CohortYears = cohortYears;
            this.DateEnteredUS = dateEnteredUS;
            this.DegreeSpecializations = degreeSpecializations;
            this.Disabilities = disabilities;
            this.DisplacementStatus = displacementStatus;
            this.EconomicDisadvantaged = economicDisadvantaged;
            this.ElectronicMails = electronicMails;
            this.EnglishLanguageExamDescriptor = englishLanguageExamDescriptor;
            this.FirstGenerationStudent = firstGenerationStudent;
            this.GenderDescriptor = genderDescriptor;
            this.GenerationCodeSuffix = generationCodeSuffix;
            this.HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            this.IdentificationCodes = identificationCodes;
            this.IdentificationDocuments = identificationDocuments;
            this.Indicators = indicators;
            this.InternationalAddresses = internationalAddresses;
            this.Languages = languages;
            this.LimitedEnglishProficiencyDescriptor = limitedEnglishProficiencyDescriptor;
            this.LoginId = loginId;
            this.MaidenName = maidenName;
            this.MiddleName = middleName;
            this.MultipleBirthStatus = multipleBirthStatus;
            this.OldEthnicityDescriptor = oldEthnicityDescriptor;
            this.OtherNames = otherNames;
            this.PersonalIdentificationDocuments = personalIdentificationDocuments;
            this.PersonalTitlePrefix = personalTitlePrefix;
            this.PreviousCareerDescriptor = previousCareerDescriptor;
            this.ProfileThumbnail = profileThumbnail;
            this.ProgramComplete = programComplete;
            this.Races = races;
            this.Telephones = telephones;
            this.TuitionCost = tuitionCost;
            this.Visas = visas;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a teacher candidate.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a teacher candidate.</value>
        [DataMember(Name="teacherCandidateIdentifier", EmitDefaultValue=false)]
        public string TeacherCandidateIdentifier { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateTPPProgramDegrees. Details of the degree.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateTPPProgramDegrees. Details of the degree.</value>
        [DataMember(Name="tppProgramDegrees", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateTPPProgramDegree> TppProgramDegrees { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name="personReference", EmitDefaultValue=false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name="studentReference", EmitDefaultValue=false)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.</value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateAddress> Addresses { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateAids. This entity represents the financial aid a person is awarded.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateAids. This entity represents the financial aid a person is awarded.</value>
        [DataMember(Name="aids", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateAid> Aids { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundCheck
        /// </summary>
        [DataMember(Name="backgroundCheck", EmitDefaultValue=false)]
        public TpdmTeacherCandidateBackgroundCheck BackgroundCheck { get; set; }

        /// <summary>
        /// The city the student was born in.
        /// </summary>
        /// <value>The city the student was born in.</value>
        [DataMember(Name="birthCity", EmitDefaultValue=false)]
        public string BirthCity { get; set; }

        /// <summary>
        /// The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.
        /// </summary>
        /// <value>The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.</value>
        [DataMember(Name="birthCountryDescriptor", EmitDefaultValue=false)]
        public string BirthCountryDescriptor { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the Province or jurisdiction in which an individual is born.
        /// </summary>
        /// <value>For students born outside of the U.S., the Province or jurisdiction in which an individual is born.</value>
        [DataMember(Name="birthInternationalProvince", EmitDefaultValue=false)]
        public string BirthInternationalProvince { get; set; }

        /// <summary>
        /// A person&#39;s gender at birth.
        /// </summary>
        /// <value>A person&#39;s gender at birth.</value>
        [DataMember(Name="birthSexDescriptor", EmitDefaultValue=false)]
        public string BirthSexDescriptor { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.
        /// </summary>
        /// <value>The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.</value>
        [DataMember(Name="birthStateAbbreviationDescriptor", EmitDefaultValue=false)]
        public string BirthStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateCharacteristics. Reflects important characteristics of the teacher candidate&#39;s home situation:        Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateCharacteristics. Reflects important characteristics of the teacher candidate&#39;s home situation:        Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.</value>
        [DataMember(Name="characteristics", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateCharacteristic> Characteristics { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        /// <value>An indicator of whether or not the person is a U.S. citizen.</value>
        [DataMember(Name="citizenshipStatusDescriptor", EmitDefaultValue=false)]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateCohortYears. The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateCohortYears. The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.</value>
        [DataMember(Name="cohortYears", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateCohortYear> CohortYears { get; set; }

        /// <summary>
        /// For students born outside of the U.S., the date the student entered the U.S.
        /// </summary>
        /// <value>For students born outside of the U.S., the date the student entered the U.S.</value>
        [DataMember(Name="dateEnteredUS", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateEnteredUS { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateDegreeSpecializations. Information around the area(s) of specialization for an individual.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateDegreeSpecializations. Information around the area(s) of specialization for an individual.</value>
        [DataMember(Name="degreeSpecializations", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateDegreeSpecialization> DegreeSpecializations { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.</value>
        [DataMember(Name="disabilities", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateDisability> Disabilities { get; set; }

        /// <summary>
        /// Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.
        /// </summary>
        /// <value>Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.</value>
        [DataMember(Name="displacementStatus", EmitDefaultValue=false)]
        public string DisplacementStatus { get; set; }

        /// <summary>
        /// An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        /// </summary>
        /// <value>An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.</value>
        [DataMember(Name="economicDisadvantaged", EmitDefaultValue=false)]
        public bool? EconomicDisadvantaged { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [DataMember(Name="electronicMails", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateElectronicMail> ElectronicMails { get; set; }

        /// <summary>
        /// Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL).
        /// </summary>
        /// <value>Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL).</value>
        [DataMember(Name="englishLanguageExamDescriptor", EmitDefaultValue=false)]
        public string EnglishLanguageExamDescriptor { get; set; }

        /// <summary>
        /// Indicator of whether individual is a first generation college student.
        /// </summary>
        /// <value>Indicator of whether individual is a first generation college student.</value>
        [DataMember(Name="firstGenerationStudent", EmitDefaultValue=false)]
        public bool? FirstGenerationStudent { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        /// <value>The gender with which a person associates.</value>
        [DataMember(Name="genderDescriptor", EmitDefaultValue=false)]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name="generationCodeSuffix", EmitDefaultValue=false)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</value>
        [DataMember(Name="hispanicLatinoEthnicity", EmitDefaultValue=false)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a teacher candidate.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a teacher candidate.</value>
        [DataMember(Name="identificationCodes", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateIdentificationDocuments. Describe the documentation of citizenship.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateIdentificationDocuments. Describe the documentation of citizenship.</value>
        [DataMember(Name="identificationDocuments", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateIdentificationDocument> IdentificationDocuments { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateIndicators. Indicator(s) or metric(s) computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateIndicators. Indicator(s) or metric(s) computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.</value>
        [DataMember(Name="indicators", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateIndicator> Indicators { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateInternationalAddresses. The set of elements that describes an international address.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateInternationalAddresses. The set of elements that describes an international address.</value>
        [DataMember(Name="internationalAddresses", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateInternationalAddress> InternationalAddresses { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateLanguages. The language(s) the individual uses to communicate.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateLanguages. The language(s) the individual uses to communicate.</value>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateLanguage> Languages { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name="lastSurname", EmitDefaultValue=false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.
        /// </summary>
        /// <value>An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.</value>
        [DataMember(Name="limitedEnglishProficiencyDescriptor", EmitDefaultValue=false)]
        public string LimitedEnglishProficiencyDescriptor { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [DataMember(Name="loginId", EmitDefaultValue=false)]
        public string LoginId { get; set; }

        /// <summary>
        /// The person&#39;s maiden name.
        /// </summary>
        /// <value>The person&#39;s maiden name.</value>
        [DataMember(Name="maidenName", EmitDefaultValue=false)]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)
        /// </summary>
        /// <value>Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)</value>
        [DataMember(Name="multipleBirthStatus", EmitDefaultValue=false)]
        public bool? MultipleBirthStatus { get; set; }

        /// <summary>
        /// Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin.
        /// </summary>
        /// <value>Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin.</value>
        [DataMember(Name="oldEthnicityDescriptor", EmitDefaultValue=false)]
        public string OldEthnicityDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.</value>
        [DataMember(Name="otherNames", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateOtherName> OtherNames { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidatePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of teacherCandidatePersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name="personalIdentificationDocuments", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidatePersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the person.</value>
        [DataMember(Name="personalTitlePrefix", EmitDefaultValue=false)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// The career previous for an individual.
        /// </summary>
        /// <value>The career previous for an individual.</value>
        [DataMember(Name="previousCareerDescriptor", EmitDefaultValue=false)]
        public string PreviousCareerDescriptor { get; set; }

        /// <summary>
        /// Locator for the student photo.
        /// </summary>
        /// <value>Locator for the student photo.</value>
        [DataMember(Name="profileThumbnail", EmitDefaultValue=false)]
        public string ProfileThumbnail { get; set; }

        /// <summary>
        /// An indication of whether a teacher candidate has completed the teacher preparation program.
        /// </summary>
        /// <value>An indication of whether a teacher candidate has completed the teacher preparation program.</value>
        [DataMember(Name="programComplete", EmitDefaultValue=false)]
        public bool? ProgramComplete { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name="races", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateRace> Races { get; set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [DataMember(Name="sexDescriptor", EmitDefaultValue=false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [DataMember(Name="telephones", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateTelephone> Telephones { get; set; }

        /// <summary>
        /// The tuition for a person&#39;s participation in a program, service. or course.
        /// </summary>
        /// <value>The tuition for a person&#39;s participation in a program, service. or course.</value>
        [DataMember(Name="tuitionCost", EmitDefaultValue=false)]
        public double? TuitionCost { get; set; }

        /// <summary>
        /// An unordered collection of teacherCandidateVisas. An indicator of a non-US citizen&#39;s Visa type.
        /// </summary>
        /// <value>An unordered collection of teacherCandidateVisas. An indicator of a non-US citizen&#39;s Visa type.</value>
        [DataMember(Name="visas", EmitDefaultValue=false)]
        public List<TpdmTeacherCandidateVisa> Visas { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmTeacherCandidate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TeacherCandidateIdentifier: ").Append(TeacherCandidateIdentifier).Append("\n");
            sb.Append("  TppProgramDegrees: ").Append(TppProgramDegrees).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Aids: ").Append(Aids).Append("\n");
            sb.Append("  BackgroundCheck: ").Append(BackgroundCheck).Append("\n");
            sb.Append("  BirthCity: ").Append(BirthCity).Append("\n");
            sb.Append("  BirthCountryDescriptor: ").Append(BirthCountryDescriptor).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BirthInternationalProvince: ").Append(BirthInternationalProvince).Append("\n");
            sb.Append("  BirthSexDescriptor: ").Append(BirthSexDescriptor).Append("\n");
            sb.Append("  BirthStateAbbreviationDescriptor: ").Append(BirthStateAbbreviationDescriptor).Append("\n");
            sb.Append("  Characteristics: ").Append(Characteristics).Append("\n");
            sb.Append("  CitizenshipStatusDescriptor: ").Append(CitizenshipStatusDescriptor).Append("\n");
            sb.Append("  CohortYears: ").Append(CohortYears).Append("\n");
            sb.Append("  DateEnteredUS: ").Append(DateEnteredUS).Append("\n");
            sb.Append("  DegreeSpecializations: ").Append(DegreeSpecializations).Append("\n");
            sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            sb.Append("  DisplacementStatus: ").Append(DisplacementStatus).Append("\n");
            sb.Append("  EconomicDisadvantaged: ").Append(EconomicDisadvantaged).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  EnglishLanguageExamDescriptor: ").Append(EnglishLanguageExamDescriptor).Append("\n");
            sb.Append("  FirstGenerationStudent: ").Append(FirstGenerationStudent).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenderDescriptor: ").Append(GenderDescriptor).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  IdentificationDocuments: ").Append(IdentificationDocuments).Append("\n");
            sb.Append("  Indicators: ").Append(Indicators).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  LimitedEnglishProficiencyDescriptor: ").Append(LimitedEnglishProficiencyDescriptor).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  MultipleBirthStatus: ").Append(MultipleBirthStatus).Append("\n");
            sb.Append("  OldEthnicityDescriptor: ").Append(OldEthnicityDescriptor).Append("\n");
            sb.Append("  OtherNames: ").Append(OtherNames).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  PreviousCareerDescriptor: ").Append(PreviousCareerDescriptor).Append("\n");
            sb.Append("  ProfileThumbnail: ").Append(ProfileThumbnail).Append("\n");
            sb.Append("  ProgramComplete: ").Append(ProgramComplete).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  TuitionCost: ").Append(TuitionCost).Append("\n");
            sb.Append("  Visas: ").Append(Visas).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmTeacherCandidate);
        }

        /// <summary>
        /// Returns true if TpdmTeacherCandidate instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmTeacherCandidate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmTeacherCandidate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TeacherCandidateIdentifier == input.TeacherCandidateIdentifier ||
                    (this.TeacherCandidateIdentifier != null &&
                    this.TeacherCandidateIdentifier.Equals(input.TeacherCandidateIdentifier))
                ) && 
                (
                    this.TppProgramDegrees == input.TppProgramDegrees ||
                    this.TppProgramDegrees != null &&
                    this.TppProgramDegrees.SequenceEqual(input.TppProgramDegrees)
                ) && 
                (
                    this.PersonReference == input.PersonReference ||
                    (this.PersonReference != null &&
                    this.PersonReference.Equals(input.PersonReference))
                ) && 
                (
                    this.StudentReference == input.StudentReference ||
                    (this.StudentReference != null &&
                    this.StudentReference.Equals(input.StudentReference))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.Aids == input.Aids ||
                    this.Aids != null &&
                    this.Aids.SequenceEqual(input.Aids)
                ) && 
                (
                    this.BackgroundCheck == input.BackgroundCheck ||
                    (this.BackgroundCheck != null &&
                    this.BackgroundCheck.Equals(input.BackgroundCheck))
                ) && 
                (
                    this.BirthCity == input.BirthCity ||
                    (this.BirthCity != null &&
                    this.BirthCity.Equals(input.BirthCity))
                ) && 
                (
                    this.BirthCountryDescriptor == input.BirthCountryDescriptor ||
                    (this.BirthCountryDescriptor != null &&
                    this.BirthCountryDescriptor.Equals(input.BirthCountryDescriptor))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.BirthInternationalProvince == input.BirthInternationalProvince ||
                    (this.BirthInternationalProvince != null &&
                    this.BirthInternationalProvince.Equals(input.BirthInternationalProvince))
                ) && 
                (
                    this.BirthSexDescriptor == input.BirthSexDescriptor ||
                    (this.BirthSexDescriptor != null &&
                    this.BirthSexDescriptor.Equals(input.BirthSexDescriptor))
                ) && 
                (
                    this.BirthStateAbbreviationDescriptor == input.BirthStateAbbreviationDescriptor ||
                    (this.BirthStateAbbreviationDescriptor != null &&
                    this.BirthStateAbbreviationDescriptor.Equals(input.BirthStateAbbreviationDescriptor))
                ) && 
                (
                    this.Characteristics == input.Characteristics ||
                    this.Characteristics != null &&
                    this.Characteristics.SequenceEqual(input.Characteristics)
                ) && 
                (
                    this.CitizenshipStatusDescriptor == input.CitizenshipStatusDescriptor ||
                    (this.CitizenshipStatusDescriptor != null &&
                    this.CitizenshipStatusDescriptor.Equals(input.CitizenshipStatusDescriptor))
                ) && 
                (
                    this.CohortYears == input.CohortYears ||
                    this.CohortYears != null &&
                    this.CohortYears.SequenceEqual(input.CohortYears)
                ) && 
                (
                    this.DateEnteredUS == input.DateEnteredUS ||
                    (this.DateEnteredUS != null &&
                    this.DateEnteredUS.Equals(input.DateEnteredUS))
                ) && 
                (
                    this.DegreeSpecializations == input.DegreeSpecializations ||
                    this.DegreeSpecializations != null &&
                    this.DegreeSpecializations.SequenceEqual(input.DegreeSpecializations)
                ) && 
                (
                    this.Disabilities == input.Disabilities ||
                    this.Disabilities != null &&
                    this.Disabilities.SequenceEqual(input.Disabilities)
                ) && 
                (
                    this.DisplacementStatus == input.DisplacementStatus ||
                    (this.DisplacementStatus != null &&
                    this.DisplacementStatus.Equals(input.DisplacementStatus))
                ) && 
                (
                    this.EconomicDisadvantaged == input.EconomicDisadvantaged ||
                    (this.EconomicDisadvantaged != null &&
                    this.EconomicDisadvantaged.Equals(input.EconomicDisadvantaged))
                ) && 
                (
                    this.ElectronicMails == input.ElectronicMails ||
                    this.ElectronicMails != null &&
                    this.ElectronicMails.SequenceEqual(input.ElectronicMails)
                ) && 
                (
                    this.EnglishLanguageExamDescriptor == input.EnglishLanguageExamDescriptor ||
                    (this.EnglishLanguageExamDescriptor != null &&
                    this.EnglishLanguageExamDescriptor.Equals(input.EnglishLanguageExamDescriptor))
                ) && 
                (
                    this.FirstGenerationStudent == input.FirstGenerationStudent ||
                    (this.FirstGenerationStudent != null &&
                    this.FirstGenerationStudent.Equals(input.FirstGenerationStudent))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GenderDescriptor == input.GenderDescriptor ||
                    (this.GenderDescriptor != null &&
                    this.GenderDescriptor.Equals(input.GenderDescriptor))
                ) && 
                (
                    this.GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (this.GenerationCodeSuffix != null &&
                    this.GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    (this.HispanicLatinoEthnicity != null &&
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity))
                ) && 
                (
                    this.IdentificationCodes == input.IdentificationCodes ||
                    this.IdentificationCodes != null &&
                    this.IdentificationCodes.SequenceEqual(input.IdentificationCodes)
                ) && 
                (
                    this.IdentificationDocuments == input.IdentificationDocuments ||
                    this.IdentificationDocuments != null &&
                    this.IdentificationDocuments.SequenceEqual(input.IdentificationDocuments)
                ) && 
                (
                    this.Indicators == input.Indicators ||
                    this.Indicators != null &&
                    this.Indicators.SequenceEqual(input.Indicators)
                ) && 
                (
                    this.InternationalAddresses == input.InternationalAddresses ||
                    this.InternationalAddresses != null &&
                    this.InternationalAddresses.SequenceEqual(input.InternationalAddresses)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.LimitedEnglishProficiencyDescriptor == input.LimitedEnglishProficiencyDescriptor ||
                    (this.LimitedEnglishProficiencyDescriptor != null &&
                    this.LimitedEnglishProficiencyDescriptor.Equals(input.LimitedEnglishProficiencyDescriptor))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.MaidenName == input.MaidenName ||
                    (this.MaidenName != null &&
                    this.MaidenName.Equals(input.MaidenName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.MultipleBirthStatus == input.MultipleBirthStatus ||
                    (this.MultipleBirthStatus != null &&
                    this.MultipleBirthStatus.Equals(input.MultipleBirthStatus))
                ) && 
                (
                    this.OldEthnicityDescriptor == input.OldEthnicityDescriptor ||
                    (this.OldEthnicityDescriptor != null &&
                    this.OldEthnicityDescriptor.Equals(input.OldEthnicityDescriptor))
                ) && 
                (
                    this.OtherNames == input.OtherNames ||
                    this.OtherNames != null &&
                    this.OtherNames.SequenceEqual(input.OtherNames)
                ) && 
                (
                    this.PersonalIdentificationDocuments == input.PersonalIdentificationDocuments ||
                    this.PersonalIdentificationDocuments != null &&
                    this.PersonalIdentificationDocuments.SequenceEqual(input.PersonalIdentificationDocuments)
                ) && 
                (
                    this.PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (this.PersonalTitlePrefix != null &&
                    this.PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                ) && 
                (
                    this.PreviousCareerDescriptor == input.PreviousCareerDescriptor ||
                    (this.PreviousCareerDescriptor != null &&
                    this.PreviousCareerDescriptor.Equals(input.PreviousCareerDescriptor))
                ) && 
                (
                    this.ProfileThumbnail == input.ProfileThumbnail ||
                    (this.ProfileThumbnail != null &&
                    this.ProfileThumbnail.Equals(input.ProfileThumbnail))
                ) && 
                (
                    this.ProgramComplete == input.ProgramComplete ||
                    (this.ProgramComplete != null &&
                    this.ProgramComplete.Equals(input.ProgramComplete))
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.TuitionCost == input.TuitionCost ||
                    (this.TuitionCost != null &&
                    this.TuitionCost.Equals(input.TuitionCost))
                ) && 
                (
                    this.Visas == input.Visas ||
                    this.Visas != null &&
                    this.Visas.SequenceEqual(input.Visas)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TeacherCandidateIdentifier != null)
                    hashCode = hashCode * 59 + this.TeacherCandidateIdentifier.GetHashCode();
                if (this.TppProgramDegrees != null)
                    hashCode = hashCode * 59 + this.TppProgramDegrees.GetHashCode();
                if (this.PersonReference != null)
                    hashCode = hashCode * 59 + this.PersonReference.GetHashCode();
                if (this.StudentReference != null)
                    hashCode = hashCode * 59 + this.StudentReference.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.Aids != null)
                    hashCode = hashCode * 59 + this.Aids.GetHashCode();
                if (this.BackgroundCheck != null)
                    hashCode = hashCode * 59 + this.BackgroundCheck.GetHashCode();
                if (this.BirthCity != null)
                    hashCode = hashCode * 59 + this.BirthCity.GetHashCode();
                if (this.BirthCountryDescriptor != null)
                    hashCode = hashCode * 59 + this.BirthCountryDescriptor.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.BirthInternationalProvince != null)
                    hashCode = hashCode * 59 + this.BirthInternationalProvince.GetHashCode();
                if (this.BirthSexDescriptor != null)
                    hashCode = hashCode * 59 + this.BirthSexDescriptor.GetHashCode();
                if (this.BirthStateAbbreviationDescriptor != null)
                    hashCode = hashCode * 59 + this.BirthStateAbbreviationDescriptor.GetHashCode();
                if (this.Characteristics != null)
                    hashCode = hashCode * 59 + this.Characteristics.GetHashCode();
                if (this.CitizenshipStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.CitizenshipStatusDescriptor.GetHashCode();
                if (this.CohortYears != null)
                    hashCode = hashCode * 59 + this.CohortYears.GetHashCode();
                if (this.DateEnteredUS != null)
                    hashCode = hashCode * 59 + this.DateEnteredUS.GetHashCode();
                if (this.DegreeSpecializations != null)
                    hashCode = hashCode * 59 + this.DegreeSpecializations.GetHashCode();
                if (this.Disabilities != null)
                    hashCode = hashCode * 59 + this.Disabilities.GetHashCode();
                if (this.DisplacementStatus != null)
                    hashCode = hashCode * 59 + this.DisplacementStatus.GetHashCode();
                if (this.EconomicDisadvantaged != null)
                    hashCode = hashCode * 59 + this.EconomicDisadvantaged.GetHashCode();
                if (this.ElectronicMails != null)
                    hashCode = hashCode * 59 + this.ElectronicMails.GetHashCode();
                if (this.EnglishLanguageExamDescriptor != null)
                    hashCode = hashCode * 59 + this.EnglishLanguageExamDescriptor.GetHashCode();
                if (this.FirstGenerationStudent != null)
                    hashCode = hashCode * 59 + this.FirstGenerationStudent.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GenderDescriptor != null)
                    hashCode = hashCode * 59 + this.GenderDescriptor.GetHashCode();
                if (this.GenerationCodeSuffix != null)
                    hashCode = hashCode * 59 + this.GenerationCodeSuffix.GetHashCode();
                if (this.HispanicLatinoEthnicity != null)
                    hashCode = hashCode * 59 + this.HispanicLatinoEthnicity.GetHashCode();
                if (this.IdentificationCodes != null)
                    hashCode = hashCode * 59 + this.IdentificationCodes.GetHashCode();
                if (this.IdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.IdentificationDocuments.GetHashCode();
                if (this.Indicators != null)
                    hashCode = hashCode * 59 + this.Indicators.GetHashCode();
                if (this.InternationalAddresses != null)
                    hashCode = hashCode * 59 + this.InternationalAddresses.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.LastSurname != null)
                    hashCode = hashCode * 59 + this.LastSurname.GetHashCode();
                if (this.LimitedEnglishProficiencyDescriptor != null)
                    hashCode = hashCode * 59 + this.LimitedEnglishProficiencyDescriptor.GetHashCode();
                if (this.LoginId != null)
                    hashCode = hashCode * 59 + this.LoginId.GetHashCode();
                if (this.MaidenName != null)
                    hashCode = hashCode * 59 + this.MaidenName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.MultipleBirthStatus != null)
                    hashCode = hashCode * 59 + this.MultipleBirthStatus.GetHashCode();
                if (this.OldEthnicityDescriptor != null)
                    hashCode = hashCode * 59 + this.OldEthnicityDescriptor.GetHashCode();
                if (this.OtherNames != null)
                    hashCode = hashCode * 59 + this.OtherNames.GetHashCode();
                if (this.PersonalIdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.PersonalIdentificationDocuments.GetHashCode();
                if (this.PersonalTitlePrefix != null)
                    hashCode = hashCode * 59 + this.PersonalTitlePrefix.GetHashCode();
                if (this.PreviousCareerDescriptor != null)
                    hashCode = hashCode * 59 + this.PreviousCareerDescriptor.GetHashCode();
                if (this.ProfileThumbnail != null)
                    hashCode = hashCode * 59 + this.ProfileThumbnail.GetHashCode();
                if (this.ProgramComplete != null)
                    hashCode = hashCode * 59 + this.ProgramComplete.GetHashCode();
                if (this.Races != null)
                    hashCode = hashCode * 59 + this.Races.GetHashCode();
                if (this.SexDescriptor != null)
                    hashCode = hashCode * 59 + this.SexDescriptor.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                if (this.TuitionCost != null)
                    hashCode = hashCode * 59 + this.TuitionCost.GetHashCode();
                if (this.Visas != null)
                    hashCode = hashCode * 59 + this.Visas.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
