/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmTeacherCandidateAcademicRecordReference
    /// </summary>
    [DataContract]
    public partial class TpdmTeacherCandidateAcademicRecordReference :  IEquatable<TpdmTeacherCandidateAcademicRecordReference>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidateAcademicRecordReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmTeacherCandidateAcademicRecordReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidateAcademicRecordReference" /> class.
        /// </summary>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (required).</param>
        /// <param name="schoolYear">The identifier for the school year. (required).</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (required).</param>
        /// <param name="termDescriptor">The term for the session during the school year. (required).</param>
        /// <param name="link">link.</param>
        public TpdmTeacherCandidateAcademicRecordReference(int? educationOrganizationId = default(int?), int? schoolYear = default(int?), string teacherCandidateIdentifier = default(string), string termDescriptor = default(string), Link link = default(Link))
        {
            // to ensure "educationOrganizationId" is required (not null)
            if (educationOrganizationId == null)
            {
                throw new InvalidDataException("educationOrganizationId is a required property for TpdmTeacherCandidateAcademicRecordReference and cannot be null");
            }
            else
            {
                this.EducationOrganizationId = educationOrganizationId;
            }
            // to ensure "schoolYear" is required (not null)
            if (schoolYear == null)
            {
                throw new InvalidDataException("schoolYear is a required property for TpdmTeacherCandidateAcademicRecordReference and cannot be null");
            }
            else
            {
                this.SchoolYear = schoolYear;
            }
            // to ensure "teacherCandidateIdentifier" is required (not null)
            if (teacherCandidateIdentifier == null)
            {
                throw new InvalidDataException("teacherCandidateIdentifier is a required property for TpdmTeacherCandidateAcademicRecordReference and cannot be null");
            }
            else
            {
                this.TeacherCandidateIdentifier = teacherCandidateIdentifier;
            }
            // to ensure "termDescriptor" is required (not null)
            if (termDescriptor == null)
            {
                throw new InvalidDataException("termDescriptor is a required property for TpdmTeacherCandidateAcademicRecordReference and cannot be null");
            }
            else
            {
                this.TermDescriptor = termDescriptor;
            }
            this.Link = link;
        }
        
        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [DataMember(Name="educationOrganizationId", EmitDefaultValue=false)]
        public int? EducationOrganizationId { get; set; }

        /// <summary>
        /// The identifier for the school year.
        /// </summary>
        /// <value>The identifier for the school year.</value>
        [DataMember(Name="schoolYear", EmitDefaultValue=false)]
        public int? SchoolYear { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a teacher candidate.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a teacher candidate.</value>
        [DataMember(Name="teacherCandidateIdentifier", EmitDefaultValue=false)]
        public string TeacherCandidateIdentifier { get; set; }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        /// <value>The term for the session during the school year.</value>
        [DataMember(Name="termDescriptor", EmitDefaultValue=false)]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmTeacherCandidateAcademicRecordReference {\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  SchoolYear: ").Append(SchoolYear).Append("\n");
            sb.Append("  TeacherCandidateIdentifier: ").Append(TeacherCandidateIdentifier).Append("\n");
            sb.Append("  TermDescriptor: ").Append(TermDescriptor).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmTeacherCandidateAcademicRecordReference);
        }

        /// <summary>
        /// Returns true if TpdmTeacherCandidateAcademicRecordReference instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmTeacherCandidateAcademicRecordReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmTeacherCandidateAcademicRecordReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EducationOrganizationId == input.EducationOrganizationId ||
                    (this.EducationOrganizationId != null &&
                    this.EducationOrganizationId.Equals(input.EducationOrganizationId))
                ) && 
                (
                    this.SchoolYear == input.SchoolYear ||
                    (this.SchoolYear != null &&
                    this.SchoolYear.Equals(input.SchoolYear))
                ) && 
                (
                    this.TeacherCandidateIdentifier == input.TeacherCandidateIdentifier ||
                    (this.TeacherCandidateIdentifier != null &&
                    this.TeacherCandidateIdentifier.Equals(input.TeacherCandidateIdentifier))
                ) && 
                (
                    this.TermDescriptor == input.TermDescriptor ||
                    (this.TermDescriptor != null &&
                    this.TermDescriptor.Equals(input.TermDescriptor))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EducationOrganizationId != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationId.GetHashCode();
                if (this.SchoolYear != null)
                    hashCode = hashCode * 59 + this.SchoolYear.GetHashCode();
                if (this.TeacherCandidateIdentifier != null)
                    hashCode = hashCode * 59 + this.TeacherCandidateIdentifier.GetHashCode();
                if (this.TermDescriptor != null)
                    hashCode = hashCode * 59 + this.TermDescriptor.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                return hashCode;
            }
        }
    }

}
