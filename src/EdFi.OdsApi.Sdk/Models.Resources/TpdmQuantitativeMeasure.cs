/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmQuantitativeMeasure
    /// </summary>
    [DataContract]
    public partial class TpdmQuantitativeMeasure :  IEquatable<TpdmQuantitativeMeasure>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmQuantitativeMeasure" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmQuantitativeMeasure() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmQuantitativeMeasure" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="quantitativeMeasureIdentifier">An assigned unique identifier for the quantitative measure. (required).</param>
        /// <param name="evaluationElementReference">evaluationElementReference (required).</param>
        /// <param name="quantitativeMeasureDatatypeDescriptor">The datatype of the result. The results can be expressed as a number, percentile, range, level, etc..</param>
        /// <param name="quantitativeMeasureTypeDescriptor">The type of the quantitative measure (e.g., achievement, growth)..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmQuantitativeMeasure(string id = default(string), string quantitativeMeasureIdentifier = default(string), TpdmEvaluationElementReference evaluationElementReference = default(TpdmEvaluationElementReference), string quantitativeMeasureDatatypeDescriptor = default(string), string quantitativeMeasureTypeDescriptor = default(string), string etag = default(string))
        {
            // to ensure "quantitativeMeasureIdentifier" is required (not null)
            if (quantitativeMeasureIdentifier == null)
            {
                throw new InvalidDataException("quantitativeMeasureIdentifier is a required property for TpdmQuantitativeMeasure and cannot be null");
            }
            else
            {
                this.QuantitativeMeasureIdentifier = quantitativeMeasureIdentifier;
            }
            // to ensure "evaluationElementReference" is required (not null)
            if (evaluationElementReference == null)
            {
                throw new InvalidDataException("evaluationElementReference is a required property for TpdmQuantitativeMeasure and cannot be null");
            }
            else
            {
                this.EvaluationElementReference = evaluationElementReference;
            }
            this.Id = id;
            this.QuantitativeMeasureDatatypeDescriptor = quantitativeMeasureDatatypeDescriptor;
            this.QuantitativeMeasureTypeDescriptor = quantitativeMeasureTypeDescriptor;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// An assigned unique identifier for the quantitative measure.
        /// </summary>
        /// <value>An assigned unique identifier for the quantitative measure.</value>
        [DataMember(Name="quantitativeMeasureIdentifier", EmitDefaultValue=false)]
        public string QuantitativeMeasureIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationElementReference
        /// </summary>
        [DataMember(Name="evaluationElementReference", EmitDefaultValue=false)]
        public TpdmEvaluationElementReference EvaluationElementReference { get; set; }

        /// <summary>
        /// The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.</value>
        [DataMember(Name="quantitativeMeasureDatatypeDescriptor", EmitDefaultValue=false)]
        public string QuantitativeMeasureDatatypeDescriptor { get; set; }

        /// <summary>
        /// The type of the quantitative measure (e.g., achievement, growth).
        /// </summary>
        /// <value>The type of the quantitative measure (e.g., achievement, growth).</value>
        [DataMember(Name="quantitativeMeasureTypeDescriptor", EmitDefaultValue=false)]
        public string QuantitativeMeasureTypeDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmQuantitativeMeasure {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  QuantitativeMeasureIdentifier: ").Append(QuantitativeMeasureIdentifier).Append("\n");
            sb.Append("  EvaluationElementReference: ").Append(EvaluationElementReference).Append("\n");
            sb.Append("  QuantitativeMeasureDatatypeDescriptor: ").Append(QuantitativeMeasureDatatypeDescriptor).Append("\n");
            sb.Append("  QuantitativeMeasureTypeDescriptor: ").Append(QuantitativeMeasureTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmQuantitativeMeasure);
        }

        /// <summary>
        /// Returns true if TpdmQuantitativeMeasure instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmQuantitativeMeasure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmQuantitativeMeasure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.QuantitativeMeasureIdentifier == input.QuantitativeMeasureIdentifier ||
                    (this.QuantitativeMeasureIdentifier != null &&
                    this.QuantitativeMeasureIdentifier.Equals(input.QuantitativeMeasureIdentifier))
                ) && 
                (
                    this.EvaluationElementReference == input.EvaluationElementReference ||
                    (this.EvaluationElementReference != null &&
                    this.EvaluationElementReference.Equals(input.EvaluationElementReference))
                ) && 
                (
                    this.QuantitativeMeasureDatatypeDescriptor == input.QuantitativeMeasureDatatypeDescriptor ||
                    (this.QuantitativeMeasureDatatypeDescriptor != null &&
                    this.QuantitativeMeasureDatatypeDescriptor.Equals(input.QuantitativeMeasureDatatypeDescriptor))
                ) && 
                (
                    this.QuantitativeMeasureTypeDescriptor == input.QuantitativeMeasureTypeDescriptor ||
                    (this.QuantitativeMeasureTypeDescriptor != null &&
                    this.QuantitativeMeasureTypeDescriptor.Equals(input.QuantitativeMeasureTypeDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.QuantitativeMeasureIdentifier != null)
                    hashCode = hashCode * 59 + this.QuantitativeMeasureIdentifier.GetHashCode();
                if (this.EvaluationElementReference != null)
                    hashCode = hashCode * 59 + this.EvaluationElementReference.GetHashCode();
                if (this.QuantitativeMeasureDatatypeDescriptor != null)
                    hashCode = hashCode * 59 + this.QuantitativeMeasureDatatypeDescriptor.GetHashCode();
                if (this.QuantitativeMeasureTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.QuantitativeMeasureTypeDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
