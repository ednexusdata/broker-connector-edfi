/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmAnonymizedStudentCourseTranscript
    /// </summary>
    [DataContract]
    public partial class TpdmAnonymizedStudentCourseTranscript :  IEquatable<TpdmAnonymizedStudentCourseTranscript>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmAnonymizedStudentCourseTranscript" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmAnonymizedStudentCourseTranscript() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmAnonymizedStudentCourseTranscript" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="anonymizedStudentAcademicRecordReference">anonymizedStudentAcademicRecordReference (required).</param>
        /// <param name="courseReference">courseReference (required).</param>
        /// <param name="courseRepeatCodeDescriptor">Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average..</param>
        /// <param name="courseTitle">The descriptive name given to a course of study offered in a school or other institution or organization. (required).</param>
        /// <param name="finalLetterGradeEarned">The final indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="finalNumericGradeEarned">The final indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmAnonymizedStudentCourseTranscript(string id = default(string), TpdmAnonymizedStudentAcademicRecordReference anonymizedStudentAcademicRecordReference = default(TpdmAnonymizedStudentAcademicRecordReference), EdFiCourseReference courseReference = default(EdFiCourseReference), string courseRepeatCodeDescriptor = default(string), string courseTitle = default(string), string finalLetterGradeEarned = default(string), double? finalNumericGradeEarned = default(double?), string etag = default(string))
        {
            // to ensure "anonymizedStudentAcademicRecordReference" is required (not null)
            if (anonymizedStudentAcademicRecordReference == null)
            {
                throw new InvalidDataException("anonymizedStudentAcademicRecordReference is a required property for TpdmAnonymizedStudentCourseTranscript and cannot be null");
            }
            else
            {
                this.AnonymizedStudentAcademicRecordReference = anonymizedStudentAcademicRecordReference;
            }
            // to ensure "courseReference" is required (not null)
            if (courseReference == null)
            {
                throw new InvalidDataException("courseReference is a required property for TpdmAnonymizedStudentCourseTranscript and cannot be null");
            }
            else
            {
                this.CourseReference = courseReference;
            }
            // to ensure "courseTitle" is required (not null)
            if (courseTitle == null)
            {
                throw new InvalidDataException("courseTitle is a required property for TpdmAnonymizedStudentCourseTranscript and cannot be null");
            }
            else
            {
                this.CourseTitle = courseTitle;
            }
            this.Id = id;
            this.CourseRepeatCodeDescriptor = courseRepeatCodeDescriptor;
            this.FinalLetterGradeEarned = finalLetterGradeEarned;
            this.FinalNumericGradeEarned = finalNumericGradeEarned;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets AnonymizedStudentAcademicRecordReference
        /// </summary>
        [DataMember(Name="anonymizedStudentAcademicRecordReference", EmitDefaultValue=false)]
        public TpdmAnonymizedStudentAcademicRecordReference AnonymizedStudentAcademicRecordReference { get; set; }

        /// <summary>
        /// Gets or Sets CourseReference
        /// </summary>
        [DataMember(Name="courseReference", EmitDefaultValue=false)]
        public EdFiCourseReference CourseReference { get; set; }

        /// <summary>
        /// Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average.
        /// </summary>
        /// <value>Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student&#39;s academic grade average.</value>
        [DataMember(Name="courseRepeatCodeDescriptor", EmitDefaultValue=false)]
        public string CourseRepeatCodeDescriptor { get; set; }

        /// <summary>
        /// The descriptive name given to a course of study offered in a school or other institution or organization.
        /// </summary>
        /// <value>The descriptive name given to a course of study offered in a school or other institution or organization.</value>
        [DataMember(Name="courseTitle", EmitDefaultValue=false)]
        public string CourseTitle { get; set; }

        /// <summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>The final indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name="finalLetterGradeEarned", EmitDefaultValue=false)]
        public string FinalLetterGradeEarned { get; set; }

        /// <summary>
        /// The final indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>The final indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name="finalNumericGradeEarned", EmitDefaultValue=false)]
        public double? FinalNumericGradeEarned { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmAnonymizedStudentCourseTranscript {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AnonymizedStudentAcademicRecordReference: ").Append(AnonymizedStudentAcademicRecordReference).Append("\n");
            sb.Append("  CourseReference: ").Append(CourseReference).Append("\n");
            sb.Append("  CourseRepeatCodeDescriptor: ").Append(CourseRepeatCodeDescriptor).Append("\n");
            sb.Append("  CourseTitle: ").Append(CourseTitle).Append("\n");
            sb.Append("  FinalLetterGradeEarned: ").Append(FinalLetterGradeEarned).Append("\n");
            sb.Append("  FinalNumericGradeEarned: ").Append(FinalNumericGradeEarned).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmAnonymizedStudentCourseTranscript);
        }

        /// <summary>
        /// Returns true if TpdmAnonymizedStudentCourseTranscript instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmAnonymizedStudentCourseTranscript to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmAnonymizedStudentCourseTranscript input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AnonymizedStudentAcademicRecordReference == input.AnonymizedStudentAcademicRecordReference ||
                    (this.AnonymizedStudentAcademicRecordReference != null &&
                    this.AnonymizedStudentAcademicRecordReference.Equals(input.AnonymizedStudentAcademicRecordReference))
                ) && 
                (
                    this.CourseReference == input.CourseReference ||
                    (this.CourseReference != null &&
                    this.CourseReference.Equals(input.CourseReference))
                ) && 
                (
                    this.CourseRepeatCodeDescriptor == input.CourseRepeatCodeDescriptor ||
                    (this.CourseRepeatCodeDescriptor != null &&
                    this.CourseRepeatCodeDescriptor.Equals(input.CourseRepeatCodeDescriptor))
                ) && 
                (
                    this.CourseTitle == input.CourseTitle ||
                    (this.CourseTitle != null &&
                    this.CourseTitle.Equals(input.CourseTitle))
                ) && 
                (
                    this.FinalLetterGradeEarned == input.FinalLetterGradeEarned ||
                    (this.FinalLetterGradeEarned != null &&
                    this.FinalLetterGradeEarned.Equals(input.FinalLetterGradeEarned))
                ) && 
                (
                    this.FinalNumericGradeEarned == input.FinalNumericGradeEarned ||
                    (this.FinalNumericGradeEarned != null &&
                    this.FinalNumericGradeEarned.Equals(input.FinalNumericGradeEarned))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AnonymizedStudentAcademicRecordReference != null)
                    hashCode = hashCode * 59 + this.AnonymizedStudentAcademicRecordReference.GetHashCode();
                if (this.CourseReference != null)
                    hashCode = hashCode * 59 + this.CourseReference.GetHashCode();
                if (this.CourseRepeatCodeDescriptor != null)
                    hashCode = hashCode * 59 + this.CourseRepeatCodeDescriptor.GetHashCode();
                if (this.CourseTitle != null)
                    hashCode = hashCode * 59 + this.CourseTitle.GetHashCode();
                if (this.FinalLetterGradeEarned != null)
                    hashCode = hashCode * 59 + this.FinalLetterGradeEarned.GetHashCode();
                if (this.FinalNumericGradeEarned != null)
                    hashCode = hashCode * 59 + this.FinalNumericGradeEarned.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
