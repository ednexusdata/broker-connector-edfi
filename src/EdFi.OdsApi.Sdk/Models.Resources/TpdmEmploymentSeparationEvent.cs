/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmEmploymentSeparationEvent
    /// </summary>
    [DataContract]
    public partial class TpdmEmploymentSeparationEvent :  IEquatable<TpdmEmploymentSeparationEvent>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEmploymentSeparationEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmEmploymentSeparationEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEmploymentSeparationEvent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="employmentSeparationDate">Effective date of the separation. (required).</param>
        /// <param name="openStaffPositionReference">openStaffPositionReference (required).</param>
        /// <param name="employmentSeparationEnteredDate">The date the separation event was first entered or when notice was given..</param>
        /// <param name="employmentSeparationReasonDescriptor">The reason(s) for the separation..</param>
        /// <param name="employmentSeparationTypeDescriptor">The type of separation (e.g., termination, displacement, retirement, transfer, voluntary departure). (required).</param>
        /// <param name="remainingInDistrict">Whether a teacher is leaving a school but remaining within the district, or leaving the district entirely..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmEmploymentSeparationEvent(string id = default(string), DateTime? employmentSeparationDate = default(DateTime?), EdFiOpenStaffPositionReference openStaffPositionReference = default(EdFiOpenStaffPositionReference), DateTime? employmentSeparationEnteredDate = default(DateTime?), string employmentSeparationReasonDescriptor = default(string), string employmentSeparationTypeDescriptor = default(string), bool? remainingInDistrict = default(bool?), string etag = default(string))
        {
            // to ensure "employmentSeparationDate" is required (not null)
            if (employmentSeparationDate == null)
            {
                throw new InvalidDataException("employmentSeparationDate is a required property for TpdmEmploymentSeparationEvent and cannot be null");
            }
            else
            {
                this.EmploymentSeparationDate = employmentSeparationDate;
            }
            // to ensure "openStaffPositionReference" is required (not null)
            if (openStaffPositionReference == null)
            {
                throw new InvalidDataException("openStaffPositionReference is a required property for TpdmEmploymentSeparationEvent and cannot be null");
            }
            else
            {
                this.OpenStaffPositionReference = openStaffPositionReference;
            }
            // to ensure "employmentSeparationTypeDescriptor" is required (not null)
            if (employmentSeparationTypeDescriptor == null)
            {
                throw new InvalidDataException("employmentSeparationTypeDescriptor is a required property for TpdmEmploymentSeparationEvent and cannot be null");
            }
            else
            {
                this.EmploymentSeparationTypeDescriptor = employmentSeparationTypeDescriptor;
            }
            this.Id = id;
            this.EmploymentSeparationEnteredDate = employmentSeparationEnteredDate;
            this.EmploymentSeparationReasonDescriptor = employmentSeparationReasonDescriptor;
            this.RemainingInDistrict = remainingInDistrict;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Effective date of the separation.
        /// </summary>
        /// <value>Effective date of the separation.</value>
        [DataMember(Name="employmentSeparationDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EmploymentSeparationDate { get; set; }

        /// <summary>
        /// Gets or Sets OpenStaffPositionReference
        /// </summary>
        [DataMember(Name="openStaffPositionReference", EmitDefaultValue=false)]
        public EdFiOpenStaffPositionReference OpenStaffPositionReference { get; set; }

        /// <summary>
        /// The date the separation event was first entered or when notice was given.
        /// </summary>
        /// <value>The date the separation event was first entered or when notice was given.</value>
        [DataMember(Name="employmentSeparationEnteredDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EmploymentSeparationEnteredDate { get; set; }

        /// <summary>
        /// The reason(s) for the separation.
        /// </summary>
        /// <value>The reason(s) for the separation.</value>
        [DataMember(Name="employmentSeparationReasonDescriptor", EmitDefaultValue=false)]
        public string EmploymentSeparationReasonDescriptor { get; set; }

        /// <summary>
        /// The type of separation (e.g., termination, displacement, retirement, transfer, voluntary departure).
        /// </summary>
        /// <value>The type of separation (e.g., termination, displacement, retirement, transfer, voluntary departure).</value>
        [DataMember(Name="employmentSeparationTypeDescriptor", EmitDefaultValue=false)]
        public string EmploymentSeparationTypeDescriptor { get; set; }

        /// <summary>
        /// Whether a teacher is leaving a school but remaining within the district, or leaving the district entirely.
        /// </summary>
        /// <value>Whether a teacher is leaving a school but remaining within the district, or leaving the district entirely.</value>
        [DataMember(Name="remainingInDistrict", EmitDefaultValue=false)]
        public bool? RemainingInDistrict { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmEmploymentSeparationEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmploymentSeparationDate: ").Append(EmploymentSeparationDate).Append("\n");
            sb.Append("  OpenStaffPositionReference: ").Append(OpenStaffPositionReference).Append("\n");
            sb.Append("  EmploymentSeparationEnteredDate: ").Append(EmploymentSeparationEnteredDate).Append("\n");
            sb.Append("  EmploymentSeparationReasonDescriptor: ").Append(EmploymentSeparationReasonDescriptor).Append("\n");
            sb.Append("  EmploymentSeparationTypeDescriptor: ").Append(EmploymentSeparationTypeDescriptor).Append("\n");
            sb.Append("  RemainingInDistrict: ").Append(RemainingInDistrict).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmEmploymentSeparationEvent);
        }

        /// <summary>
        /// Returns true if TpdmEmploymentSeparationEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmEmploymentSeparationEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmEmploymentSeparationEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EmploymentSeparationDate == input.EmploymentSeparationDate ||
                    (this.EmploymentSeparationDate != null &&
                    this.EmploymentSeparationDate.Equals(input.EmploymentSeparationDate))
                ) && 
                (
                    this.OpenStaffPositionReference == input.OpenStaffPositionReference ||
                    (this.OpenStaffPositionReference != null &&
                    this.OpenStaffPositionReference.Equals(input.OpenStaffPositionReference))
                ) && 
                (
                    this.EmploymentSeparationEnteredDate == input.EmploymentSeparationEnteredDate ||
                    (this.EmploymentSeparationEnteredDate != null &&
                    this.EmploymentSeparationEnteredDate.Equals(input.EmploymentSeparationEnteredDate))
                ) && 
                (
                    this.EmploymentSeparationReasonDescriptor == input.EmploymentSeparationReasonDescriptor ||
                    (this.EmploymentSeparationReasonDescriptor != null &&
                    this.EmploymentSeparationReasonDescriptor.Equals(input.EmploymentSeparationReasonDescriptor))
                ) && 
                (
                    this.EmploymentSeparationTypeDescriptor == input.EmploymentSeparationTypeDescriptor ||
                    (this.EmploymentSeparationTypeDescriptor != null &&
                    this.EmploymentSeparationTypeDescriptor.Equals(input.EmploymentSeparationTypeDescriptor))
                ) && 
                (
                    this.RemainingInDistrict == input.RemainingInDistrict ||
                    (this.RemainingInDistrict != null &&
                    this.RemainingInDistrict.Equals(input.RemainingInDistrict))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EmploymentSeparationDate != null)
                    hashCode = hashCode * 59 + this.EmploymentSeparationDate.GetHashCode();
                if (this.OpenStaffPositionReference != null)
                    hashCode = hashCode * 59 + this.OpenStaffPositionReference.GetHashCode();
                if (this.EmploymentSeparationEnteredDate != null)
                    hashCode = hashCode * 59 + this.EmploymentSeparationEnteredDate.GetHashCode();
                if (this.EmploymentSeparationReasonDescriptor != null)
                    hashCode = hashCode * 59 + this.EmploymentSeparationReasonDescriptor.GetHashCode();
                if (this.EmploymentSeparationTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.EmploymentSeparationTypeDescriptor.GetHashCode();
                if (this.RemainingInDistrict != null)
                    hashCode = hashCode * 59 + this.RemainingInDistrict.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
