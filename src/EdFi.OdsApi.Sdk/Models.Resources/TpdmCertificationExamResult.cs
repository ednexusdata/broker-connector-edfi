/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmCertificationExamResult
    /// </summary>
    [DataContract]
    public partial class TpdmCertificationExamResult :  IEquatable<TpdmCertificationExamResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCertificationExamResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmCertificationExamResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmCertificationExamResult" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="certificationExamDate">The year, month and day on which the CertificationExam is taken. (required).</param>
        /// <param name="certificationExamReference">certificationExamReference (required).</param>
        /// <param name="personReference">personReference (required).</param>
        /// <param name="attemptNumber">The number of the person&#39;s attempt for the Certification Exam..</param>
        /// <param name="certificationExamPassIndicator">Indicator that the person passed the Certification Exam..</param>
        /// <param name="certificationExamScore">The score result for the Certification Exam attempt..</param>
        /// <param name="certificationExamStatusDescriptor">The status of the Certification Exam attempt..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmCertificationExamResult(string id = default(string), DateTime? certificationExamDate = default(DateTime?), TpdmCertificationExamReference certificationExamReference = default(TpdmCertificationExamReference), EdFiPersonReference personReference = default(EdFiPersonReference), int? attemptNumber = default(int?), bool? certificationExamPassIndicator = default(bool?), double? certificationExamScore = default(double?), string certificationExamStatusDescriptor = default(string), string etag = default(string))
        {
            // to ensure "certificationExamDate" is required (not null)
            if (certificationExamDate == null)
            {
                throw new InvalidDataException("certificationExamDate is a required property for TpdmCertificationExamResult and cannot be null");
            }
            else
            {
                this.CertificationExamDate = certificationExamDate;
            }
            // to ensure "certificationExamReference" is required (not null)
            if (certificationExamReference == null)
            {
                throw new InvalidDataException("certificationExamReference is a required property for TpdmCertificationExamResult and cannot be null");
            }
            else
            {
                this.CertificationExamReference = certificationExamReference;
            }
            // to ensure "personReference" is required (not null)
            if (personReference == null)
            {
                throw new InvalidDataException("personReference is a required property for TpdmCertificationExamResult and cannot be null");
            }
            else
            {
                this.PersonReference = personReference;
            }
            this.Id = id;
            this.AttemptNumber = attemptNumber;
            this.CertificationExamPassIndicator = certificationExamPassIndicator;
            this.CertificationExamScore = certificationExamScore;
            this.CertificationExamStatusDescriptor = certificationExamStatusDescriptor;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The year, month and day on which the CertificationExam is taken.
        /// </summary>
        /// <value>The year, month and day on which the CertificationExam is taken.</value>
        [DataMember(Name="certificationExamDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? CertificationExamDate { get; set; }

        /// <summary>
        /// Gets or Sets CertificationExamReference
        /// </summary>
        [DataMember(Name="certificationExamReference", EmitDefaultValue=false)]
        public TpdmCertificationExamReference CertificationExamReference { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name="personReference", EmitDefaultValue=false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// The number of the person&#39;s attempt for the Certification Exam.
        /// </summary>
        /// <value>The number of the person&#39;s attempt for the Certification Exam.</value>
        [DataMember(Name="attemptNumber", EmitDefaultValue=false)]
        public int? AttemptNumber { get; set; }

        /// <summary>
        /// Indicator that the person passed the Certification Exam.
        /// </summary>
        /// <value>Indicator that the person passed the Certification Exam.</value>
        [DataMember(Name="certificationExamPassIndicator", EmitDefaultValue=false)]
        public bool? CertificationExamPassIndicator { get; set; }

        /// <summary>
        /// The score result for the Certification Exam attempt.
        /// </summary>
        /// <value>The score result for the Certification Exam attempt.</value>
        [DataMember(Name="certificationExamScore", EmitDefaultValue=false)]
        public double? CertificationExamScore { get; set; }

        /// <summary>
        /// The status of the Certification Exam attempt.
        /// </summary>
        /// <value>The status of the Certification Exam attempt.</value>
        [DataMember(Name="certificationExamStatusDescriptor", EmitDefaultValue=false)]
        public string CertificationExamStatusDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmCertificationExamResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CertificationExamDate: ").Append(CertificationExamDate).Append("\n");
            sb.Append("  CertificationExamReference: ").Append(CertificationExamReference).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  AttemptNumber: ").Append(AttemptNumber).Append("\n");
            sb.Append("  CertificationExamPassIndicator: ").Append(CertificationExamPassIndicator).Append("\n");
            sb.Append("  CertificationExamScore: ").Append(CertificationExamScore).Append("\n");
            sb.Append("  CertificationExamStatusDescriptor: ").Append(CertificationExamStatusDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmCertificationExamResult);
        }

        /// <summary>
        /// Returns true if TpdmCertificationExamResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmCertificationExamResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmCertificationExamResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CertificationExamDate == input.CertificationExamDate ||
                    (this.CertificationExamDate != null &&
                    this.CertificationExamDate.Equals(input.CertificationExamDate))
                ) && 
                (
                    this.CertificationExamReference == input.CertificationExamReference ||
                    (this.CertificationExamReference != null &&
                    this.CertificationExamReference.Equals(input.CertificationExamReference))
                ) && 
                (
                    this.PersonReference == input.PersonReference ||
                    (this.PersonReference != null &&
                    this.PersonReference.Equals(input.PersonReference))
                ) && 
                (
                    this.AttemptNumber == input.AttemptNumber ||
                    (this.AttemptNumber != null &&
                    this.AttemptNumber.Equals(input.AttemptNumber))
                ) && 
                (
                    this.CertificationExamPassIndicator == input.CertificationExamPassIndicator ||
                    (this.CertificationExamPassIndicator != null &&
                    this.CertificationExamPassIndicator.Equals(input.CertificationExamPassIndicator))
                ) && 
                (
                    this.CertificationExamScore == input.CertificationExamScore ||
                    (this.CertificationExamScore != null &&
                    this.CertificationExamScore.Equals(input.CertificationExamScore))
                ) && 
                (
                    this.CertificationExamStatusDescriptor == input.CertificationExamStatusDescriptor ||
                    (this.CertificationExamStatusDescriptor != null &&
                    this.CertificationExamStatusDescriptor.Equals(input.CertificationExamStatusDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CertificationExamDate != null)
                    hashCode = hashCode * 59 + this.CertificationExamDate.GetHashCode();
                if (this.CertificationExamReference != null)
                    hashCode = hashCode * 59 + this.CertificationExamReference.GetHashCode();
                if (this.PersonReference != null)
                    hashCode = hashCode * 59 + this.PersonReference.GetHashCode();
                if (this.AttemptNumber != null)
                    hashCode = hashCode * 59 + this.AttemptNumber.GetHashCode();
                if (this.CertificationExamPassIndicator != null)
                    hashCode = hashCode * 59 + this.CertificationExamPassIndicator.GetHashCode();
                if (this.CertificationExamScore != null)
                    hashCode = hashCode * 59 + this.CertificationExamScore.GetHashCode();
                if (this.CertificationExamStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.CertificationExamStatusDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
