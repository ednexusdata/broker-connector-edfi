/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmGoal
    /// </summary>
    [DataContract]
    public partial class TpdmGoal :  IEquatable<TpdmGoal>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmGoal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmGoal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmGoal" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="assignmentDate">The month, day, and year on which the goal was assigned. (required).</param>
        /// <param name="goalTitle">The name or title of the goal. (required).</param>
        /// <param name="evaluationElementReference">evaluationElementReference.</param>
        /// <param name="personReference">personReference (required).</param>
        /// <param name="comments">Any comments about the goal or its completion to be captured..</param>
        /// <param name="completedDate">The month, day, and year on which the goal was completed..</param>
        /// <param name="completedIndicator">Indicator that the goal was completed..</param>
        /// <param name="dueDate">The month, day, and year on which the goal is due or expected to be completed..</param>
        /// <param name="goalDescription">The description of the goal..</param>
        /// <param name="goalTypeDescriptor">The type of the goal (e.g., management, instruction)..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmGoal(string id = default(string), DateTime? assignmentDate = default(DateTime?), string goalTitle = default(string), TpdmEvaluationElementReference evaluationElementReference = default(TpdmEvaluationElementReference), EdFiPersonReference personReference = default(EdFiPersonReference), string comments = default(string), DateTime? completedDate = default(DateTime?), bool? completedIndicator = default(bool?), DateTime? dueDate = default(DateTime?), string goalDescription = default(string), string goalTypeDescriptor = default(string), string etag = default(string))
        {
            // to ensure "assignmentDate" is required (not null)
            if (assignmentDate == null)
            {
                throw new InvalidDataException("assignmentDate is a required property for TpdmGoal and cannot be null");
            }
            else
            {
                this.AssignmentDate = assignmentDate;
            }
            // to ensure "goalTitle" is required (not null)
            if (goalTitle == null)
            {
                throw new InvalidDataException("goalTitle is a required property for TpdmGoal and cannot be null");
            }
            else
            {
                this.GoalTitle = goalTitle;
            }
            // to ensure "personReference" is required (not null)
            if (personReference == null)
            {
                throw new InvalidDataException("personReference is a required property for TpdmGoal and cannot be null");
            }
            else
            {
                this.PersonReference = personReference;
            }
            this.Id = id;
            this.EvaluationElementReference = evaluationElementReference;
            this.Comments = comments;
            this.CompletedDate = completedDate;
            this.CompletedIndicator = completedIndicator;
            this.DueDate = dueDate;
            this.GoalDescription = goalDescription;
            this.GoalTypeDescriptor = goalTypeDescriptor;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The month, day, and year on which the goal was assigned.
        /// </summary>
        /// <value>The month, day, and year on which the goal was assigned.</value>
        [DataMember(Name="assignmentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? AssignmentDate { get; set; }

        /// <summary>
        /// The name or title of the goal.
        /// </summary>
        /// <value>The name or title of the goal.</value>
        [DataMember(Name="goalTitle", EmitDefaultValue=false)]
        public string GoalTitle { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationElementReference
        /// </summary>
        [DataMember(Name="evaluationElementReference", EmitDefaultValue=false)]
        public TpdmEvaluationElementReference EvaluationElementReference { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name="personReference", EmitDefaultValue=false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// Any comments about the goal or its completion to be captured.
        /// </summary>
        /// <value>Any comments about the goal or its completion to be captured.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The month, day, and year on which the goal was completed.
        /// </summary>
        /// <value>The month, day, and year on which the goal was completed.</value>
        [DataMember(Name="completedDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? CompletedDate { get; set; }

        /// <summary>
        /// Indicator that the goal was completed.
        /// </summary>
        /// <value>Indicator that the goal was completed.</value>
        [DataMember(Name="completedIndicator", EmitDefaultValue=false)]
        public bool? CompletedIndicator { get; set; }

        /// <summary>
        /// The month, day, and year on which the goal is due or expected to be completed.
        /// </summary>
        /// <value>The month, day, and year on which the goal is due or expected to be completed.</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The description of the goal.
        /// </summary>
        /// <value>The description of the goal.</value>
        [DataMember(Name="goalDescription", EmitDefaultValue=false)]
        public string GoalDescription { get; set; }

        /// <summary>
        /// The type of the goal (e.g., management, instruction).
        /// </summary>
        /// <value>The type of the goal (e.g., management, instruction).</value>
        [DataMember(Name="goalTypeDescriptor", EmitDefaultValue=false)]
        public string GoalTypeDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmGoal {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssignmentDate: ").Append(AssignmentDate).Append("\n");
            sb.Append("  GoalTitle: ").Append(GoalTitle).Append("\n");
            sb.Append("  EvaluationElementReference: ").Append(EvaluationElementReference).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  CompletedIndicator: ").Append(CompletedIndicator).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  GoalDescription: ").Append(GoalDescription).Append("\n");
            sb.Append("  GoalTypeDescriptor: ").Append(GoalTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmGoal);
        }

        /// <summary>
        /// Returns true if TpdmGoal instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmGoal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmGoal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AssignmentDate == input.AssignmentDate ||
                    (this.AssignmentDate != null &&
                    this.AssignmentDate.Equals(input.AssignmentDate))
                ) && 
                (
                    this.GoalTitle == input.GoalTitle ||
                    (this.GoalTitle != null &&
                    this.GoalTitle.Equals(input.GoalTitle))
                ) && 
                (
                    this.EvaluationElementReference == input.EvaluationElementReference ||
                    (this.EvaluationElementReference != null &&
                    this.EvaluationElementReference.Equals(input.EvaluationElementReference))
                ) && 
                (
                    this.PersonReference == input.PersonReference ||
                    (this.PersonReference != null &&
                    this.PersonReference.Equals(input.PersonReference))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.CompletedIndicator == input.CompletedIndicator ||
                    (this.CompletedIndicator != null &&
                    this.CompletedIndicator.Equals(input.CompletedIndicator))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.GoalDescription == input.GoalDescription ||
                    (this.GoalDescription != null &&
                    this.GoalDescription.Equals(input.GoalDescription))
                ) && 
                (
                    this.GoalTypeDescriptor == input.GoalTypeDescriptor ||
                    (this.GoalTypeDescriptor != null &&
                    this.GoalTypeDescriptor.Equals(input.GoalTypeDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AssignmentDate != null)
                    hashCode = hashCode * 59 + this.AssignmentDate.GetHashCode();
                if (this.GoalTitle != null)
                    hashCode = hashCode * 59 + this.GoalTitle.GetHashCode();
                if (this.EvaluationElementReference != null)
                    hashCode = hashCode * 59 + this.EvaluationElementReference.GetHashCode();
                if (this.PersonReference != null)
                    hashCode = hashCode * 59 + this.PersonReference.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.CompletedDate != null)
                    hashCode = hashCode * 59 + this.CompletedDate.GetHashCode();
                if (this.CompletedIndicator != null)
                    hashCode = hashCode * 59 + this.CompletedIndicator.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.GoalDescription != null)
                    hashCode = hashCode * 59 + this.GoalDescription.GetHashCode();
                if (this.GoalTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.GoalTypeDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
