/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmApplicant
    /// </summary>
    [DataContract]
    public partial class TpdmApplicant :  IEquatable<TpdmApplicant>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplicant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmApplicant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplicant" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="applicantIdentifier">Identifier assigned to a person making formal application for an open staff position. (required).</param>
        /// <param name="personReference">personReference.</param>
        /// <param name="teacherCandidateReference">teacherCandidateReference.</param>
        /// <param name="addresses">An unordered collection of applicantAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code..</param>
        /// <param name="aids">An unordered collection of applicantAids. This entity represents the financial aid a person is awarded..</param>
        /// <param name="backgroundChecks">An unordered collection of applicantBackgroundChecks. Applicant background check history and disposition..</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born..</param>
        /// <param name="characteristics">An unordered collection of applicantCharacteristics. Reflects important characteristics of the applicant&#39;s home situation:        Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth..</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen..</param>
        /// <param name="disabilities">An unordered collection of applicantDisabilities. The disability condition(s) that best describes an individual&#39;s impairment..</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy..</param>
        /// <param name="electronicMails">An unordered collection of applicantElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs..</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="genderDescriptor">The gender with which a person associates..</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;..</param>
        /// <param name="identificationDocuments">An unordered collection of applicantIdentificationDocuments. Describe the documentation of citizenship..</param>
        /// <param name="internationalAddresses">An unordered collection of applicantInternationalAddresses. The set of elements that describes an international address..</param>
        /// <param name="languages">An unordered collection of applicantLanguages. The language(s) the individual uses to communicate..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface..</param>
        /// <param name="maidenName">The person&#39;s maiden name..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of applicantPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person..</param>
        /// <param name="races">An unordered collection of applicantRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races..</param>
        /// <param name="sexDescriptor">A person&#39;s gender..</param>
        /// <param name="staffIdentificationCodes">An unordered collection of applicantStaffIdentificationCodes. A unique number or alphanumeric code assigned to an applicant by a school, school system, a state, or other agency or entity..</param>
        /// <param name="teacherPreparationPrograms">An unordered collection of applicantTeacherPreparationPrograms. The Teacher Preparation Program(s) completed by the teacher..</param>
        /// <param name="telephones">An unordered collection of applicantTelephones. The 10-digit telephone number, including the area code, for the person..</param>
        /// <param name="visas">An unordered collection of applicantVisas. An indicator of a non-US citizen&#39;s Visa type..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmApplicant(string id = default(string), string applicantIdentifier = default(string), EdFiPersonReference personReference = default(EdFiPersonReference), TpdmTeacherCandidateReference teacherCandidateReference = default(TpdmTeacherCandidateReference), List<TpdmApplicantAddress> addresses = default(List<TpdmApplicantAddress>), List<TpdmApplicantAid> aids = default(List<TpdmApplicantAid>), List<TpdmApplicantBackgroundCheck> backgroundChecks = default(List<TpdmApplicantBackgroundCheck>), DateTime? birthDate = default(DateTime?), List<TpdmApplicantCharacteristic> characteristics = default(List<TpdmApplicantCharacteristic>), string citizenshipStatusDescriptor = default(string), List<TpdmApplicantDisability> disabilities = default(List<TpdmApplicantDisability>), bool? economicDisadvantaged = default(bool?), List<TpdmApplicantElectronicMail> electronicMails = default(List<TpdmApplicantElectronicMail>), bool? firstGenerationStudent = default(bool?), string firstName = default(string), string genderDescriptor = default(string), string generationCodeSuffix = default(string), bool? hispanicLatinoEthnicity = default(bool?), List<TpdmApplicantIdentificationDocument> identificationDocuments = default(List<TpdmApplicantIdentificationDocument>), List<TpdmApplicantInternationalAddress> internationalAddresses = default(List<TpdmApplicantInternationalAddress>), List<TpdmApplicantLanguage> languages = default(List<TpdmApplicantLanguage>), string lastSurname = default(string), string loginId = default(string), string maidenName = default(string), string middleName = default(string), List<TpdmApplicantPersonalIdentificationDocument> personalIdentificationDocuments = default(List<TpdmApplicantPersonalIdentificationDocument>), string personalTitlePrefix = default(string), List<TpdmApplicantRace> races = default(List<TpdmApplicantRace>), string sexDescriptor = default(string), List<TpdmApplicantStaffIdentificationCode> staffIdentificationCodes = default(List<TpdmApplicantStaffIdentificationCode>), List<TpdmApplicantTeacherPreparationProgram> teacherPreparationPrograms = default(List<TpdmApplicantTeacherPreparationProgram>), List<TpdmApplicantTelephone> telephones = default(List<TpdmApplicantTelephone>), List<TpdmApplicantVisa> visas = default(List<TpdmApplicantVisa>), string etag = default(string))
        {
            // to ensure "applicantIdentifier" is required (not null)
            if (applicantIdentifier == null)
            {
                throw new InvalidDataException("applicantIdentifier is a required property for TpdmApplicant and cannot be null");
            }
            else
            {
                this.ApplicantIdentifier = applicantIdentifier;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for TpdmApplicant and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastSurname" is required (not null)
            if (lastSurname == null)
            {
                throw new InvalidDataException("lastSurname is a required property for TpdmApplicant and cannot be null");
            }
            else
            {
                this.LastSurname = lastSurname;
            }
            this.Id = id;
            this.PersonReference = personReference;
            this.TeacherCandidateReference = teacherCandidateReference;
            this.Addresses = addresses;
            this.Aids = aids;
            this.BackgroundChecks = backgroundChecks;
            this.BirthDate = birthDate;
            this.Characteristics = characteristics;
            this.CitizenshipStatusDescriptor = citizenshipStatusDescriptor;
            this.Disabilities = disabilities;
            this.EconomicDisadvantaged = economicDisadvantaged;
            this.ElectronicMails = electronicMails;
            this.FirstGenerationStudent = firstGenerationStudent;
            this.GenderDescriptor = genderDescriptor;
            this.GenerationCodeSuffix = generationCodeSuffix;
            this.HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            this.IdentificationDocuments = identificationDocuments;
            this.InternationalAddresses = internationalAddresses;
            this.Languages = languages;
            this.LoginId = loginId;
            this.MaidenName = maidenName;
            this.MiddleName = middleName;
            this.PersonalIdentificationDocuments = personalIdentificationDocuments;
            this.PersonalTitlePrefix = personalTitlePrefix;
            this.Races = races;
            this.SexDescriptor = sexDescriptor;
            this.StaffIdentificationCodes = staffIdentificationCodes;
            this.TeacherPreparationPrograms = teacherPreparationPrograms;
            this.Telephones = telephones;
            this.Visas = visas;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier assigned to a person making formal application for an open staff position.
        /// </summary>
        /// <value>Identifier assigned to a person making formal application for an open staff position.</value>
        [DataMember(Name="applicantIdentifier", EmitDefaultValue=false)]
        public string ApplicantIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name="personReference", EmitDefaultValue=false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// Gets or Sets TeacherCandidateReference
        /// </summary>
        [DataMember(Name="teacherCandidateReference", EmitDefaultValue=false)]
        public TpdmTeacherCandidateReference TeacherCandidateReference { get; set; }

        /// <summary>
        /// An unordered collection of applicantAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.
        /// </summary>
        /// <value>An unordered collection of applicantAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.</value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<TpdmApplicantAddress> Addresses { get; set; }

        /// <summary>
        /// An unordered collection of applicantAids. This entity represents the financial aid a person is awarded.
        /// </summary>
        /// <value>An unordered collection of applicantAids. This entity represents the financial aid a person is awarded.</value>
        [DataMember(Name="aids", EmitDefaultValue=false)]
        public List<TpdmApplicantAid> Aids { get; set; }

        /// <summary>
        /// An unordered collection of applicantBackgroundChecks. Applicant background check history and disposition.
        /// </summary>
        /// <value>An unordered collection of applicantBackgroundChecks. Applicant background check history and disposition.</value>
        [DataMember(Name="backgroundChecks", EmitDefaultValue=false)]
        public List<TpdmApplicantBackgroundCheck> BackgroundChecks { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An unordered collection of applicantCharacteristics. Reflects important characteristics of the applicant&#39;s home situation:        Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.
        /// </summary>
        /// <value>An unordered collection of applicantCharacteristics. Reflects important characteristics of the applicant&#39;s home situation:        Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.</value>
        [DataMember(Name="characteristics", EmitDefaultValue=false)]
        public List<TpdmApplicantCharacteristic> Characteristics { get; set; }

        /// <summary>
        /// An indicator of whether or not the person is a U.S. citizen.
        /// </summary>
        /// <value>An indicator of whether or not the person is a U.S. citizen.</value>
        [DataMember(Name="citizenshipStatusDescriptor", EmitDefaultValue=false)]
        public string CitizenshipStatusDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of applicantDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.
        /// </summary>
        /// <value>An unordered collection of applicantDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.</value>
        [DataMember(Name="disabilities", EmitDefaultValue=false)]
        public List<TpdmApplicantDisability> Disabilities { get; set; }

        /// <summary>
        /// An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        /// </summary>
        /// <value>An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.</value>
        [DataMember(Name="economicDisadvantaged", EmitDefaultValue=false)]
        public bool? EconomicDisadvantaged { get; set; }

        /// <summary>
        /// An unordered collection of applicantElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>An unordered collection of applicantElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [DataMember(Name="electronicMails", EmitDefaultValue=false)]
        public List<TpdmApplicantElectronicMail> ElectronicMails { get; set; }

        /// <summary>
        /// Indicator of whether individual is a first generation college student.
        /// </summary>
        /// <value>Indicator of whether individual is a first generation college student.</value>
        [DataMember(Name="firstGenerationStudent", EmitDefaultValue=false)]
        public bool? FirstGenerationStudent { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        /// <value>The gender with which a person associates.</value>
        [DataMember(Name="genderDescriptor", EmitDefaultValue=false)]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name="generationCodeSuffix", EmitDefaultValue=false)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;.
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;.</value>
        [DataMember(Name="hispanicLatinoEthnicity", EmitDefaultValue=false)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of applicantIdentificationDocuments. Describe the documentation of citizenship.
        /// </summary>
        /// <value>An unordered collection of applicantIdentificationDocuments. Describe the documentation of citizenship.</value>
        [DataMember(Name="identificationDocuments", EmitDefaultValue=false)]
        public List<TpdmApplicantIdentificationDocument> IdentificationDocuments { get; set; }

        /// <summary>
        /// An unordered collection of applicantInternationalAddresses. The set of elements that describes an international address.
        /// </summary>
        /// <value>An unordered collection of applicantInternationalAddresses. The set of elements that describes an international address.</value>
        [DataMember(Name="internationalAddresses", EmitDefaultValue=false)]
        public List<TpdmApplicantInternationalAddress> InternationalAddresses { get; set; }

        /// <summary>
        /// An unordered collection of applicantLanguages. The language(s) the individual uses to communicate.
        /// </summary>
        /// <value>An unordered collection of applicantLanguages. The language(s) the individual uses to communicate.</value>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<TpdmApplicantLanguage> Languages { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name="lastSurname", EmitDefaultValue=false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [DataMember(Name="loginId", EmitDefaultValue=false)]
        public string LoginId { get; set; }

        /// <summary>
        /// The person&#39;s maiden name.
        /// </summary>
        /// <value>The person&#39;s maiden name.</value>
        [DataMember(Name="maidenName", EmitDefaultValue=false)]
        public string MaidenName { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// An unordered collection of applicantPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of applicantPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name="personalIdentificationDocuments", EmitDefaultValue=false)]
        public List<TpdmApplicantPersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the person.</value>
        [DataMember(Name="personalTitlePrefix", EmitDefaultValue=false)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// An unordered collection of applicantRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of applicantRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name="races", EmitDefaultValue=false)]
        public List<TpdmApplicantRace> Races { get; set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [DataMember(Name="sexDescriptor", EmitDefaultValue=false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of applicantStaffIdentificationCodes. A unique number or alphanumeric code assigned to an applicant by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>An unordered collection of applicantStaffIdentificationCodes. A unique number or alphanumeric code assigned to an applicant by a school, school system, a state, or other agency or entity.</value>
        [DataMember(Name="staffIdentificationCodes", EmitDefaultValue=false)]
        public List<TpdmApplicantStaffIdentificationCode> StaffIdentificationCodes { get; set; }

        /// <summary>
        /// An unordered collection of applicantTeacherPreparationPrograms. The Teacher Preparation Program(s) completed by the teacher.
        /// </summary>
        /// <value>An unordered collection of applicantTeacherPreparationPrograms. The Teacher Preparation Program(s) completed by the teacher.</value>
        [DataMember(Name="teacherPreparationPrograms", EmitDefaultValue=false)]
        public List<TpdmApplicantTeacherPreparationProgram> TeacherPreparationPrograms { get; set; }

        /// <summary>
        /// An unordered collection of applicantTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of applicantTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [DataMember(Name="telephones", EmitDefaultValue=false)]
        public List<TpdmApplicantTelephone> Telephones { get; set; }

        /// <summary>
        /// An unordered collection of applicantVisas. An indicator of a non-US citizen&#39;s Visa type.
        /// </summary>
        /// <value>An unordered collection of applicantVisas. An indicator of a non-US citizen&#39;s Visa type.</value>
        [DataMember(Name="visas", EmitDefaultValue=false)]
        public List<TpdmApplicantVisa> Visas { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmApplicant {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApplicantIdentifier: ").Append(ApplicantIdentifier).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  TeacherCandidateReference: ").Append(TeacherCandidateReference).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Aids: ").Append(Aids).Append("\n");
            sb.Append("  BackgroundChecks: ").Append(BackgroundChecks).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Characteristics: ").Append(Characteristics).Append("\n");
            sb.Append("  CitizenshipStatusDescriptor: ").Append(CitizenshipStatusDescriptor).Append("\n");
            sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            sb.Append("  EconomicDisadvantaged: ").Append(EconomicDisadvantaged).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  FirstGenerationStudent: ").Append(FirstGenerationStudent).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenderDescriptor: ").Append(GenderDescriptor).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  IdentificationDocuments: ").Append(IdentificationDocuments).Append("\n");
            sb.Append("  InternationalAddresses: ").Append(InternationalAddresses).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  StaffIdentificationCodes: ").Append(StaffIdentificationCodes).Append("\n");
            sb.Append("  TeacherPreparationPrograms: ").Append(TeacherPreparationPrograms).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  Visas: ").Append(Visas).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmApplicant);
        }

        /// <summary>
        /// Returns true if TpdmApplicant instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmApplicant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmApplicant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ApplicantIdentifier == input.ApplicantIdentifier ||
                    (this.ApplicantIdentifier != null &&
                    this.ApplicantIdentifier.Equals(input.ApplicantIdentifier))
                ) && 
                (
                    this.PersonReference == input.PersonReference ||
                    (this.PersonReference != null &&
                    this.PersonReference.Equals(input.PersonReference))
                ) && 
                (
                    this.TeacherCandidateReference == input.TeacherCandidateReference ||
                    (this.TeacherCandidateReference != null &&
                    this.TeacherCandidateReference.Equals(input.TeacherCandidateReference))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.Aids == input.Aids ||
                    this.Aids != null &&
                    this.Aids.SequenceEqual(input.Aids)
                ) && 
                (
                    this.BackgroundChecks == input.BackgroundChecks ||
                    this.BackgroundChecks != null &&
                    this.BackgroundChecks.SequenceEqual(input.BackgroundChecks)
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.Characteristics == input.Characteristics ||
                    this.Characteristics != null &&
                    this.Characteristics.SequenceEqual(input.Characteristics)
                ) && 
                (
                    this.CitizenshipStatusDescriptor == input.CitizenshipStatusDescriptor ||
                    (this.CitizenshipStatusDescriptor != null &&
                    this.CitizenshipStatusDescriptor.Equals(input.CitizenshipStatusDescriptor))
                ) && 
                (
                    this.Disabilities == input.Disabilities ||
                    this.Disabilities != null &&
                    this.Disabilities.SequenceEqual(input.Disabilities)
                ) && 
                (
                    this.EconomicDisadvantaged == input.EconomicDisadvantaged ||
                    (this.EconomicDisadvantaged != null &&
                    this.EconomicDisadvantaged.Equals(input.EconomicDisadvantaged))
                ) && 
                (
                    this.ElectronicMails == input.ElectronicMails ||
                    this.ElectronicMails != null &&
                    this.ElectronicMails.SequenceEqual(input.ElectronicMails)
                ) && 
                (
                    this.FirstGenerationStudent == input.FirstGenerationStudent ||
                    (this.FirstGenerationStudent != null &&
                    this.FirstGenerationStudent.Equals(input.FirstGenerationStudent))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GenderDescriptor == input.GenderDescriptor ||
                    (this.GenderDescriptor != null &&
                    this.GenderDescriptor.Equals(input.GenderDescriptor))
                ) && 
                (
                    this.GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (this.GenerationCodeSuffix != null &&
                    this.GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    (this.HispanicLatinoEthnicity != null &&
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity))
                ) && 
                (
                    this.IdentificationDocuments == input.IdentificationDocuments ||
                    this.IdentificationDocuments != null &&
                    this.IdentificationDocuments.SequenceEqual(input.IdentificationDocuments)
                ) && 
                (
                    this.InternationalAddresses == input.InternationalAddresses ||
                    this.InternationalAddresses != null &&
                    this.InternationalAddresses.SequenceEqual(input.InternationalAddresses)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.MaidenName == input.MaidenName ||
                    (this.MaidenName != null &&
                    this.MaidenName.Equals(input.MaidenName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.PersonalIdentificationDocuments == input.PersonalIdentificationDocuments ||
                    this.PersonalIdentificationDocuments != null &&
                    this.PersonalIdentificationDocuments.SequenceEqual(input.PersonalIdentificationDocuments)
                ) && 
                (
                    this.PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (this.PersonalTitlePrefix != null &&
                    this.PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.StaffIdentificationCodes == input.StaffIdentificationCodes ||
                    this.StaffIdentificationCodes != null &&
                    this.StaffIdentificationCodes.SequenceEqual(input.StaffIdentificationCodes)
                ) && 
                (
                    this.TeacherPreparationPrograms == input.TeacherPreparationPrograms ||
                    this.TeacherPreparationPrograms != null &&
                    this.TeacherPreparationPrograms.SequenceEqual(input.TeacherPreparationPrograms)
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.Visas == input.Visas ||
                    this.Visas != null &&
                    this.Visas.SequenceEqual(input.Visas)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ApplicantIdentifier != null)
                    hashCode = hashCode * 59 + this.ApplicantIdentifier.GetHashCode();
                if (this.PersonReference != null)
                    hashCode = hashCode * 59 + this.PersonReference.GetHashCode();
                if (this.TeacherCandidateReference != null)
                    hashCode = hashCode * 59 + this.TeacherCandidateReference.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.Aids != null)
                    hashCode = hashCode * 59 + this.Aids.GetHashCode();
                if (this.BackgroundChecks != null)
                    hashCode = hashCode * 59 + this.BackgroundChecks.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.Characteristics != null)
                    hashCode = hashCode * 59 + this.Characteristics.GetHashCode();
                if (this.CitizenshipStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.CitizenshipStatusDescriptor.GetHashCode();
                if (this.Disabilities != null)
                    hashCode = hashCode * 59 + this.Disabilities.GetHashCode();
                if (this.EconomicDisadvantaged != null)
                    hashCode = hashCode * 59 + this.EconomicDisadvantaged.GetHashCode();
                if (this.ElectronicMails != null)
                    hashCode = hashCode * 59 + this.ElectronicMails.GetHashCode();
                if (this.FirstGenerationStudent != null)
                    hashCode = hashCode * 59 + this.FirstGenerationStudent.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GenderDescriptor != null)
                    hashCode = hashCode * 59 + this.GenderDescriptor.GetHashCode();
                if (this.GenerationCodeSuffix != null)
                    hashCode = hashCode * 59 + this.GenerationCodeSuffix.GetHashCode();
                if (this.HispanicLatinoEthnicity != null)
                    hashCode = hashCode * 59 + this.HispanicLatinoEthnicity.GetHashCode();
                if (this.IdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.IdentificationDocuments.GetHashCode();
                if (this.InternationalAddresses != null)
                    hashCode = hashCode * 59 + this.InternationalAddresses.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.LastSurname != null)
                    hashCode = hashCode * 59 + this.LastSurname.GetHashCode();
                if (this.LoginId != null)
                    hashCode = hashCode * 59 + this.LoginId.GetHashCode();
                if (this.MaidenName != null)
                    hashCode = hashCode * 59 + this.MaidenName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.PersonalIdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.PersonalIdentificationDocuments.GetHashCode();
                if (this.PersonalTitlePrefix != null)
                    hashCode = hashCode * 59 + this.PersonalTitlePrefix.GetHashCode();
                if (this.Races != null)
                    hashCode = hashCode * 59 + this.Races.GetHashCode();
                if (this.SexDescriptor != null)
                    hashCode = hashCode * 59 + this.SexDescriptor.GetHashCode();
                if (this.StaffIdentificationCodes != null)
                    hashCode = hashCode * 59 + this.StaffIdentificationCodes.GetHashCode();
                if (this.TeacherPreparationPrograms != null)
                    hashCode = hashCode * 59 + this.TeacherPreparationPrograms.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                if (this.Visas != null)
                    hashCode = hashCode * 59 + this.Visas.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
