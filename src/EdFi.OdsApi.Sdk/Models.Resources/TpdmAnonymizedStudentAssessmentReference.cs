/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmAnonymizedStudentAssessmentReference
    /// </summary>
    [DataContract]
    public partial class TpdmAnonymizedStudentAssessmentReference :  IEquatable<TpdmAnonymizedStudentAssessmentReference>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmAnonymizedStudentAssessmentReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmAnonymizedStudentAssessmentReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmAnonymizedStudentAssessmentReference" /> class.
        /// </summary>
        /// <param name="administrationDate">Date the assessment was administered (required).</param>
        /// <param name="anonymizedStudentIdentifier">Unique identifier for anonymized student (required).</param>
        /// <param name="assessmentIdentifier">An identifier that uniquely identifies the assessment to which the student results are associated. (required).</param>
        /// <param name="factsAsOfDate">The date for which the data element is relevant (required).</param>
        /// <param name="schoolYear">The school year for which the data is associated (required).</param>
        /// <param name="takenSchoolYear">The school year the assessment was taken (required).</param>
        /// <param name="link">link.</param>
        public TpdmAnonymizedStudentAssessmentReference(DateTime? administrationDate = default(DateTime?), string anonymizedStudentIdentifier = default(string), string assessmentIdentifier = default(string), DateTime? factsAsOfDate = default(DateTime?), int? schoolYear = default(int?), int? takenSchoolYear = default(int?), Link link = default(Link))
        {
            // to ensure "administrationDate" is required (not null)
            if (administrationDate == null)
            {
                throw new InvalidDataException("administrationDate is a required property for TpdmAnonymizedStudentAssessmentReference and cannot be null");
            }
            else
            {
                this.AdministrationDate = administrationDate;
            }
            // to ensure "anonymizedStudentIdentifier" is required (not null)
            if (anonymizedStudentIdentifier == null)
            {
                throw new InvalidDataException("anonymizedStudentIdentifier is a required property for TpdmAnonymizedStudentAssessmentReference and cannot be null");
            }
            else
            {
                this.AnonymizedStudentIdentifier = anonymizedStudentIdentifier;
            }
            // to ensure "assessmentIdentifier" is required (not null)
            if (assessmentIdentifier == null)
            {
                throw new InvalidDataException("assessmentIdentifier is a required property for TpdmAnonymizedStudentAssessmentReference and cannot be null");
            }
            else
            {
                this.AssessmentIdentifier = assessmentIdentifier;
            }
            // to ensure "factsAsOfDate" is required (not null)
            if (factsAsOfDate == null)
            {
                throw new InvalidDataException("factsAsOfDate is a required property for TpdmAnonymizedStudentAssessmentReference and cannot be null");
            }
            else
            {
                this.FactsAsOfDate = factsAsOfDate;
            }
            // to ensure "schoolYear" is required (not null)
            if (schoolYear == null)
            {
                throw new InvalidDataException("schoolYear is a required property for TpdmAnonymizedStudentAssessmentReference and cannot be null");
            }
            else
            {
                this.SchoolYear = schoolYear;
            }
            // to ensure "takenSchoolYear" is required (not null)
            if (takenSchoolYear == null)
            {
                throw new InvalidDataException("takenSchoolYear is a required property for TpdmAnonymizedStudentAssessmentReference and cannot be null");
            }
            else
            {
                this.TakenSchoolYear = takenSchoolYear;
            }
            this.Link = link;
        }
        
        /// <summary>
        /// Date the assessment was administered
        /// </summary>
        /// <value>Date the assessment was administered</value>
        [DataMember(Name="administrationDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? AdministrationDate { get; set; }

        /// <summary>
        /// Unique identifier for anonymized student
        /// </summary>
        /// <value>Unique identifier for anonymized student</value>
        [DataMember(Name="anonymizedStudentIdentifier", EmitDefaultValue=false)]
        public string AnonymizedStudentIdentifier { get; set; }

        /// <summary>
        /// An identifier that uniquely identifies the assessment to which the student results are associated.
        /// </summary>
        /// <value>An identifier that uniquely identifies the assessment to which the student results are associated.</value>
        [DataMember(Name="assessmentIdentifier", EmitDefaultValue=false)]
        public string AssessmentIdentifier { get; set; }

        /// <summary>
        /// The date for which the data element is relevant
        /// </summary>
        /// <value>The date for which the data element is relevant</value>
        [DataMember(Name="factsAsOfDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? FactsAsOfDate { get; set; }

        /// <summary>
        /// The school year for which the data is associated
        /// </summary>
        /// <value>The school year for which the data is associated</value>
        [DataMember(Name="schoolYear", EmitDefaultValue=false)]
        public int? SchoolYear { get; set; }

        /// <summary>
        /// The school year the assessment was taken
        /// </summary>
        /// <value>The school year the assessment was taken</value>
        [DataMember(Name="takenSchoolYear", EmitDefaultValue=false)]
        public int? TakenSchoolYear { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public Link Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmAnonymizedStudentAssessmentReference {\n");
            sb.Append("  AdministrationDate: ").Append(AdministrationDate).Append("\n");
            sb.Append("  AnonymizedStudentIdentifier: ").Append(AnonymizedStudentIdentifier).Append("\n");
            sb.Append("  AssessmentIdentifier: ").Append(AssessmentIdentifier).Append("\n");
            sb.Append("  FactsAsOfDate: ").Append(FactsAsOfDate).Append("\n");
            sb.Append("  SchoolYear: ").Append(SchoolYear).Append("\n");
            sb.Append("  TakenSchoolYear: ").Append(TakenSchoolYear).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmAnonymizedStudentAssessmentReference);
        }

        /// <summary>
        /// Returns true if TpdmAnonymizedStudentAssessmentReference instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmAnonymizedStudentAssessmentReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmAnonymizedStudentAssessmentReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdministrationDate == input.AdministrationDate ||
                    (this.AdministrationDate != null &&
                    this.AdministrationDate.Equals(input.AdministrationDate))
                ) && 
                (
                    this.AnonymizedStudentIdentifier == input.AnonymizedStudentIdentifier ||
                    (this.AnonymizedStudentIdentifier != null &&
                    this.AnonymizedStudentIdentifier.Equals(input.AnonymizedStudentIdentifier))
                ) && 
                (
                    this.AssessmentIdentifier == input.AssessmentIdentifier ||
                    (this.AssessmentIdentifier != null &&
                    this.AssessmentIdentifier.Equals(input.AssessmentIdentifier))
                ) && 
                (
                    this.FactsAsOfDate == input.FactsAsOfDate ||
                    (this.FactsAsOfDate != null &&
                    this.FactsAsOfDate.Equals(input.FactsAsOfDate))
                ) && 
                (
                    this.SchoolYear == input.SchoolYear ||
                    (this.SchoolYear != null &&
                    this.SchoolYear.Equals(input.SchoolYear))
                ) && 
                (
                    this.TakenSchoolYear == input.TakenSchoolYear ||
                    (this.TakenSchoolYear != null &&
                    this.TakenSchoolYear.Equals(input.TakenSchoolYear))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdministrationDate != null)
                    hashCode = hashCode * 59 + this.AdministrationDate.GetHashCode();
                if (this.AnonymizedStudentIdentifier != null)
                    hashCode = hashCode * 59 + this.AnonymizedStudentIdentifier.GetHashCode();
                if (this.AssessmentIdentifier != null)
                    hashCode = hashCode * 59 + this.AssessmentIdentifier.GetHashCode();
                if (this.FactsAsOfDate != null)
                    hashCode = hashCode * 59 + this.FactsAsOfDate.GetHashCode();
                if (this.SchoolYear != null)
                    hashCode = hashCode * 59 + this.SchoolYear.GetHashCode();
                if (this.TakenSchoolYear != null)
                    hashCode = hashCode * 59 + this.TakenSchoolYear.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                return hashCode;
            }
        }
    }

}
