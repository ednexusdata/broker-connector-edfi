/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmEvaluationElementRating
    /// </summary>
    [DataContract]
    public partial class TpdmEvaluationElementRating :  IEquatable<TpdmEvaluationElementRating>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationElementRating" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmEvaluationElementRating() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEvaluationElementRating" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="evaluationElementReference">evaluationElementReference (required).</param>
        /// <param name="evaluationObjectiveRatingReference">evaluationObjectiveRatingReference (required).</param>
        /// <param name="areaOfRefinement">Area(s) identified for person to refine or improve as part of the evaluation..</param>
        /// <param name="areaOfReinforcement">Area(s) identified for reinforcement or positive feedback as part of the evaluation..</param>
        /// <param name="comments">Any comments about the performance evaluation to be captured..</param>
        /// <param name="evaluationElementRatingLevelDescriptor">The rating level achieved based upon the rating or score..</param>
        /// <param name="feedback">Feedback provided to the evaluated person..</param>
        /// <param name="results">An unordered collection of evaluationElementRatingResults. The numerical summary rating or score for the evaluation element..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmEvaluationElementRating(string id = default(string), TpdmEvaluationElementReference evaluationElementReference = default(TpdmEvaluationElementReference), TpdmEvaluationObjectiveRatingReference evaluationObjectiveRatingReference = default(TpdmEvaluationObjectiveRatingReference), string areaOfRefinement = default(string), string areaOfReinforcement = default(string), string comments = default(string), string evaluationElementRatingLevelDescriptor = default(string), string feedback = default(string), List<TpdmEvaluationElementRatingResult> results = default(List<TpdmEvaluationElementRatingResult>), string etag = default(string))
        {
            // to ensure "evaluationElementReference" is required (not null)
            if (evaluationElementReference == null)
            {
                throw new InvalidDataException("evaluationElementReference is a required property for TpdmEvaluationElementRating and cannot be null");
            }
            else
            {
                this.EvaluationElementReference = evaluationElementReference;
            }
            // to ensure "evaluationObjectiveRatingReference" is required (not null)
            if (evaluationObjectiveRatingReference == null)
            {
                throw new InvalidDataException("evaluationObjectiveRatingReference is a required property for TpdmEvaluationElementRating and cannot be null");
            }
            else
            {
                this.EvaluationObjectiveRatingReference = evaluationObjectiveRatingReference;
            }
            this.Id = id;
            this.AreaOfRefinement = areaOfRefinement;
            this.AreaOfReinforcement = areaOfReinforcement;
            this.Comments = comments;
            this.EvaluationElementRatingLevelDescriptor = evaluationElementRatingLevelDescriptor;
            this.Feedback = feedback;
            this.Results = results;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationElementReference
        /// </summary>
        [DataMember(Name="evaluationElementReference", EmitDefaultValue=false)]
        public TpdmEvaluationElementReference EvaluationElementReference { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationObjectiveRatingReference
        /// </summary>
        [DataMember(Name="evaluationObjectiveRatingReference", EmitDefaultValue=false)]
        public TpdmEvaluationObjectiveRatingReference EvaluationObjectiveRatingReference { get; set; }

        /// <summary>
        /// Area(s) identified for person to refine or improve as part of the evaluation.
        /// </summary>
        /// <value>Area(s) identified for person to refine or improve as part of the evaluation.</value>
        [DataMember(Name="areaOfRefinement", EmitDefaultValue=false)]
        public string AreaOfRefinement { get; set; }

        /// <summary>
        /// Area(s) identified for reinforcement or positive feedback as part of the evaluation.
        /// </summary>
        /// <value>Area(s) identified for reinforcement or positive feedback as part of the evaluation.</value>
        [DataMember(Name="areaOfReinforcement", EmitDefaultValue=false)]
        public string AreaOfReinforcement { get; set; }

        /// <summary>
        /// Any comments about the performance evaluation to be captured.
        /// </summary>
        /// <value>Any comments about the performance evaluation to be captured.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The rating level achieved based upon the rating or score.
        /// </summary>
        /// <value>The rating level achieved based upon the rating or score.</value>
        [DataMember(Name="evaluationElementRatingLevelDescriptor", EmitDefaultValue=false)]
        public string EvaluationElementRatingLevelDescriptor { get; set; }

        /// <summary>
        /// Feedback provided to the evaluated person.
        /// </summary>
        /// <value>Feedback provided to the evaluated person.</value>
        [DataMember(Name="feedback", EmitDefaultValue=false)]
        public string Feedback { get; set; }

        /// <summary>
        /// An unordered collection of evaluationElementRatingResults. The numerical summary rating or score for the evaluation element.
        /// </summary>
        /// <value>An unordered collection of evaluationElementRatingResults. The numerical summary rating or score for the evaluation element.</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<TpdmEvaluationElementRatingResult> Results { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmEvaluationElementRating {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EvaluationElementReference: ").Append(EvaluationElementReference).Append("\n");
            sb.Append("  EvaluationObjectiveRatingReference: ").Append(EvaluationObjectiveRatingReference).Append("\n");
            sb.Append("  AreaOfRefinement: ").Append(AreaOfRefinement).Append("\n");
            sb.Append("  AreaOfReinforcement: ").Append(AreaOfReinforcement).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  EvaluationElementRatingLevelDescriptor: ").Append(EvaluationElementRatingLevelDescriptor).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmEvaluationElementRating);
        }

        /// <summary>
        /// Returns true if TpdmEvaluationElementRating instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmEvaluationElementRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmEvaluationElementRating input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EvaluationElementReference == input.EvaluationElementReference ||
                    (this.EvaluationElementReference != null &&
                    this.EvaluationElementReference.Equals(input.EvaluationElementReference))
                ) && 
                (
                    this.EvaluationObjectiveRatingReference == input.EvaluationObjectiveRatingReference ||
                    (this.EvaluationObjectiveRatingReference != null &&
                    this.EvaluationObjectiveRatingReference.Equals(input.EvaluationObjectiveRatingReference))
                ) && 
                (
                    this.AreaOfRefinement == input.AreaOfRefinement ||
                    (this.AreaOfRefinement != null &&
                    this.AreaOfRefinement.Equals(input.AreaOfRefinement))
                ) && 
                (
                    this.AreaOfReinforcement == input.AreaOfReinforcement ||
                    (this.AreaOfReinforcement != null &&
                    this.AreaOfReinforcement.Equals(input.AreaOfReinforcement))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.EvaluationElementRatingLevelDescriptor == input.EvaluationElementRatingLevelDescriptor ||
                    (this.EvaluationElementRatingLevelDescriptor != null &&
                    this.EvaluationElementRatingLevelDescriptor.Equals(input.EvaluationElementRatingLevelDescriptor))
                ) && 
                (
                    this.Feedback == input.Feedback ||
                    (this.Feedback != null &&
                    this.Feedback.Equals(input.Feedback))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EvaluationElementReference != null)
                    hashCode = hashCode * 59 + this.EvaluationElementReference.GetHashCode();
                if (this.EvaluationObjectiveRatingReference != null)
                    hashCode = hashCode * 59 + this.EvaluationObjectiveRatingReference.GetHashCode();
                if (this.AreaOfRefinement != null)
                    hashCode = hashCode * 59 + this.AreaOfRefinement.GetHashCode();
                if (this.AreaOfReinforcement != null)
                    hashCode = hashCode * 59 + this.AreaOfReinforcement.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.EvaluationElementRatingLevelDescriptor != null)
                    hashCode = hashCode * 59 + this.EvaluationElementRatingLevelDescriptor.GetHashCode();
                if (this.Feedback != null)
                    hashCode = hashCode * 59 + this.Feedback.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
