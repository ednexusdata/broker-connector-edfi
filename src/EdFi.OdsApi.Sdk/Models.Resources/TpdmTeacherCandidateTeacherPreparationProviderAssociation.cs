/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmTeacherCandidateTeacherPreparationProviderAssociation
    /// </summary>
    [DataContract]
    public partial class TpdmTeacherCandidateTeacherPreparationProviderAssociation :  IEquatable<TpdmTeacherCandidateTeacherPreparationProviderAssociation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidateTeacherPreparationProviderAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmTeacherCandidateTeacherPreparationProviderAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidateTeacherPreparationProviderAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="entryDate">Entry date for the association (required).</param>
        /// <param name="classOfSchoolYearTypeReference">classOfSchoolYearTypeReference.</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference.</param>
        /// <param name="teacherCandidateReference">teacherCandidateReference (required).</param>
        /// <param name="teacherPreparationProviderReference">teacherPreparationProviderReference (required).</param>
        /// <param name="entryTypeDescriptor">Entry Type for the association.</param>
        /// <param name="exitWithdrawDate">Exit date for the association.</param>
        /// <param name="exitWithdrawTypeDescriptor">Exit type for the association.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmTeacherCandidateTeacherPreparationProviderAssociation(string id = default(string), DateTime? entryDate = default(DateTime?), EdFiSchoolYearTypeReference classOfSchoolYearTypeReference = default(EdFiSchoolYearTypeReference), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), TpdmTeacherCandidateReference teacherCandidateReference = default(TpdmTeacherCandidateReference), TpdmTeacherPreparationProviderReference teacherPreparationProviderReference = default(TpdmTeacherPreparationProviderReference), string entryTypeDescriptor = default(string), DateTime? exitWithdrawDate = default(DateTime?), string exitWithdrawTypeDescriptor = default(string), string etag = default(string))
        {
            // to ensure "entryDate" is required (not null)
            if (entryDate == null)
            {
                throw new InvalidDataException("entryDate is a required property for TpdmTeacherCandidateTeacherPreparationProviderAssociation and cannot be null");
            }
            else
            {
                this.EntryDate = entryDate;
            }
            // to ensure "teacherCandidateReference" is required (not null)
            if (teacherCandidateReference == null)
            {
                throw new InvalidDataException("teacherCandidateReference is a required property for TpdmTeacherCandidateTeacherPreparationProviderAssociation and cannot be null");
            }
            else
            {
                this.TeacherCandidateReference = teacherCandidateReference;
            }
            // to ensure "teacherPreparationProviderReference" is required (not null)
            if (teacherPreparationProviderReference == null)
            {
                throw new InvalidDataException("teacherPreparationProviderReference is a required property for TpdmTeacherCandidateTeacherPreparationProviderAssociation and cannot be null");
            }
            else
            {
                this.TeacherPreparationProviderReference = teacherPreparationProviderReference;
            }
            this.Id = id;
            this.ClassOfSchoolYearTypeReference = classOfSchoolYearTypeReference;
            this.SchoolYearTypeReference = schoolYearTypeReference;
            this.EntryTypeDescriptor = entryTypeDescriptor;
            this.ExitWithdrawDate = exitWithdrawDate;
            this.ExitWithdrawTypeDescriptor = exitWithdrawTypeDescriptor;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Entry date for the association
        /// </summary>
        /// <value>Entry date for the association</value>
        [DataMember(Name="entryDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EntryDate { get; set; }

        /// <summary>
        /// Gets or Sets ClassOfSchoolYearTypeReference
        /// </summary>
        [DataMember(Name="classOfSchoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference ClassOfSchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets TeacherCandidateReference
        /// </summary>
        [DataMember(Name="teacherCandidateReference", EmitDefaultValue=false)]
        public TpdmTeacherCandidateReference TeacherCandidateReference { get; set; }

        /// <summary>
        /// Gets or Sets TeacherPreparationProviderReference
        /// </summary>
        [DataMember(Name="teacherPreparationProviderReference", EmitDefaultValue=false)]
        public TpdmTeacherPreparationProviderReference TeacherPreparationProviderReference { get; set; }

        /// <summary>
        /// Entry Type for the association
        /// </summary>
        /// <value>Entry Type for the association</value>
        [DataMember(Name="entryTypeDescriptor", EmitDefaultValue=false)]
        public string EntryTypeDescriptor { get; set; }

        /// <summary>
        /// Exit date for the association
        /// </summary>
        /// <value>Exit date for the association</value>
        [DataMember(Name="exitWithdrawDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExitWithdrawDate { get; set; }

        /// <summary>
        /// Exit type for the association
        /// </summary>
        /// <value>Exit type for the association</value>
        [DataMember(Name="exitWithdrawTypeDescriptor", EmitDefaultValue=false)]
        public string ExitWithdrawTypeDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmTeacherCandidateTeacherPreparationProviderAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EntryDate: ").Append(EntryDate).Append("\n");
            sb.Append("  ClassOfSchoolYearTypeReference: ").Append(ClassOfSchoolYearTypeReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  TeacherCandidateReference: ").Append(TeacherCandidateReference).Append("\n");
            sb.Append("  TeacherPreparationProviderReference: ").Append(TeacherPreparationProviderReference).Append("\n");
            sb.Append("  EntryTypeDescriptor: ").Append(EntryTypeDescriptor).Append("\n");
            sb.Append("  ExitWithdrawDate: ").Append(ExitWithdrawDate).Append("\n");
            sb.Append("  ExitWithdrawTypeDescriptor: ").Append(ExitWithdrawTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmTeacherCandidateTeacherPreparationProviderAssociation);
        }

        /// <summary>
        /// Returns true if TpdmTeacherCandidateTeacherPreparationProviderAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmTeacherCandidateTeacherPreparationProviderAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmTeacherCandidateTeacherPreparationProviderAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EntryDate == input.EntryDate ||
                    (this.EntryDate != null &&
                    this.EntryDate.Equals(input.EntryDate))
                ) && 
                (
                    this.ClassOfSchoolYearTypeReference == input.ClassOfSchoolYearTypeReference ||
                    (this.ClassOfSchoolYearTypeReference != null &&
                    this.ClassOfSchoolYearTypeReference.Equals(input.ClassOfSchoolYearTypeReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.TeacherCandidateReference == input.TeacherCandidateReference ||
                    (this.TeacherCandidateReference != null &&
                    this.TeacherCandidateReference.Equals(input.TeacherCandidateReference))
                ) && 
                (
                    this.TeacherPreparationProviderReference == input.TeacherPreparationProviderReference ||
                    (this.TeacherPreparationProviderReference != null &&
                    this.TeacherPreparationProviderReference.Equals(input.TeacherPreparationProviderReference))
                ) && 
                (
                    this.EntryTypeDescriptor == input.EntryTypeDescriptor ||
                    (this.EntryTypeDescriptor != null &&
                    this.EntryTypeDescriptor.Equals(input.EntryTypeDescriptor))
                ) && 
                (
                    this.ExitWithdrawDate == input.ExitWithdrawDate ||
                    (this.ExitWithdrawDate != null &&
                    this.ExitWithdrawDate.Equals(input.ExitWithdrawDate))
                ) && 
                (
                    this.ExitWithdrawTypeDescriptor == input.ExitWithdrawTypeDescriptor ||
                    (this.ExitWithdrawTypeDescriptor != null &&
                    this.ExitWithdrawTypeDescriptor.Equals(input.ExitWithdrawTypeDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EntryDate != null)
                    hashCode = hashCode * 59 + this.EntryDate.GetHashCode();
                if (this.ClassOfSchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.ClassOfSchoolYearTypeReference.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.TeacherCandidateReference != null)
                    hashCode = hashCode * 59 + this.TeacherCandidateReference.GetHashCode();
                if (this.TeacherPreparationProviderReference != null)
                    hashCode = hashCode * 59 + this.TeacherPreparationProviderReference.GetHashCode();
                if (this.EntryTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.EntryTypeDescriptor.GetHashCode();
                if (this.ExitWithdrawDate != null)
                    hashCode = hashCode * 59 + this.ExitWithdrawDate.GetHashCode();
                if (this.ExitWithdrawTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.ExitWithdrawTypeDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
