/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmApplicantBackgroundCheck
    /// </summary>
    [DataContract]
    public partial class TpdmApplicantBackgroundCheck :  IEquatable<TpdmApplicantBackgroundCheck>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplicantBackgroundCheck" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmApplicantBackgroundCheck() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplicantBackgroundCheck" /> class.
        /// </summary>
        /// <param name="backgroundCheckTypeDescriptor">The type of background check (e.g., online, criminal, employment). (required).</param>
        /// <param name="backgroundCheckStatusDescriptor">The status of the background check (e.g., pending, under investigation, offense(s) found, etc.)..</param>
        /// <param name="backgroundCheckCompletedDate">The date the background check was completed..</param>
        /// <param name="backgroundCheckRequestedDate">The date the background check was requested. (required).</param>
        /// <param name="fingerprint">Indicates that a person has or has not completed a fingerprint..</param>
        public TpdmApplicantBackgroundCheck(string backgroundCheckTypeDescriptor = default(string), string backgroundCheckStatusDescriptor = default(string), DateTime? backgroundCheckCompletedDate = default(DateTime?), DateTime? backgroundCheckRequestedDate = default(DateTime?), bool? fingerprint = default(bool?))
        {
            // to ensure "backgroundCheckTypeDescriptor" is required (not null)
            if (backgroundCheckTypeDescriptor == null)
            {
                throw new InvalidDataException("backgroundCheckTypeDescriptor is a required property for TpdmApplicantBackgroundCheck and cannot be null");
            }
            else
            {
                this.BackgroundCheckTypeDescriptor = backgroundCheckTypeDescriptor;
            }
            // to ensure "backgroundCheckRequestedDate" is required (not null)
            if (backgroundCheckRequestedDate == null)
            {
                throw new InvalidDataException("backgroundCheckRequestedDate is a required property for TpdmApplicantBackgroundCheck and cannot be null");
            }
            else
            {
                this.BackgroundCheckRequestedDate = backgroundCheckRequestedDate;
            }
            this.BackgroundCheckStatusDescriptor = backgroundCheckStatusDescriptor;
            this.BackgroundCheckCompletedDate = backgroundCheckCompletedDate;
            this.Fingerprint = fingerprint;
        }
        
        /// <summary>
        /// The type of background check (e.g., online, criminal, employment).
        /// </summary>
        /// <value>The type of background check (e.g., online, criminal, employment).</value>
        [DataMember(Name="backgroundCheckTypeDescriptor", EmitDefaultValue=false)]
        public string BackgroundCheckTypeDescriptor { get; set; }

        /// <summary>
        /// The status of the background check (e.g., pending, under investigation, offense(s) found, etc.).
        /// </summary>
        /// <value>The status of the background check (e.g., pending, under investigation, offense(s) found, etc.).</value>
        [DataMember(Name="backgroundCheckStatusDescriptor", EmitDefaultValue=false)]
        public string BackgroundCheckStatusDescriptor { get; set; }

        /// <summary>
        /// The date the background check was completed.
        /// </summary>
        /// <value>The date the background check was completed.</value>
        [DataMember(Name="backgroundCheckCompletedDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BackgroundCheckCompletedDate { get; set; }

        /// <summary>
        /// The date the background check was requested.
        /// </summary>
        /// <value>The date the background check was requested.</value>
        [DataMember(Name="backgroundCheckRequestedDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BackgroundCheckRequestedDate { get; set; }

        /// <summary>
        /// Indicates that a person has or has not completed a fingerprint.
        /// </summary>
        /// <value>Indicates that a person has or has not completed a fingerprint.</value>
        [DataMember(Name="fingerprint", EmitDefaultValue=false)]
        public bool? Fingerprint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmApplicantBackgroundCheck {\n");
            sb.Append("  BackgroundCheckTypeDescriptor: ").Append(BackgroundCheckTypeDescriptor).Append("\n");
            sb.Append("  BackgroundCheckStatusDescriptor: ").Append(BackgroundCheckStatusDescriptor).Append("\n");
            sb.Append("  BackgroundCheckCompletedDate: ").Append(BackgroundCheckCompletedDate).Append("\n");
            sb.Append("  BackgroundCheckRequestedDate: ").Append(BackgroundCheckRequestedDate).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmApplicantBackgroundCheck);
        }

        /// <summary>
        /// Returns true if TpdmApplicantBackgroundCheck instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmApplicantBackgroundCheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmApplicantBackgroundCheck input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BackgroundCheckTypeDescriptor == input.BackgroundCheckTypeDescriptor ||
                    (this.BackgroundCheckTypeDescriptor != null &&
                    this.BackgroundCheckTypeDescriptor.Equals(input.BackgroundCheckTypeDescriptor))
                ) && 
                (
                    this.BackgroundCheckStatusDescriptor == input.BackgroundCheckStatusDescriptor ||
                    (this.BackgroundCheckStatusDescriptor != null &&
                    this.BackgroundCheckStatusDescriptor.Equals(input.BackgroundCheckStatusDescriptor))
                ) && 
                (
                    this.BackgroundCheckCompletedDate == input.BackgroundCheckCompletedDate ||
                    (this.BackgroundCheckCompletedDate != null &&
                    this.BackgroundCheckCompletedDate.Equals(input.BackgroundCheckCompletedDate))
                ) && 
                (
                    this.BackgroundCheckRequestedDate == input.BackgroundCheckRequestedDate ||
                    (this.BackgroundCheckRequestedDate != null &&
                    this.BackgroundCheckRequestedDate.Equals(input.BackgroundCheckRequestedDate))
                ) && 
                (
                    this.Fingerprint == input.Fingerprint ||
                    (this.Fingerprint != null &&
                    this.Fingerprint.Equals(input.Fingerprint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BackgroundCheckTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.BackgroundCheckTypeDescriptor.GetHashCode();
                if (this.BackgroundCheckStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.BackgroundCheckStatusDescriptor.GetHashCode();
                if (this.BackgroundCheckCompletedDate != null)
                    hashCode = hashCode * 59 + this.BackgroundCheckCompletedDate.GetHashCode();
                if (this.BackgroundCheckRequestedDate != null)
                    hashCode = hashCode * 59 + this.BackgroundCheckRequestedDate.GetHashCode();
                if (this.Fingerprint != null)
                    hashCode = hashCode * 59 + this.Fingerprint.GetHashCode();
                return hashCode;
            }
        }
    }

}
