/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmEmploymentEvent
    /// </summary>
    [DataContract]
    public partial class TpdmEmploymentEvent :  IEquatable<TpdmEmploymentEvent>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEmploymentEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmEmploymentEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmEmploymentEvent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="employmentEventTypeDescriptor">The type of the employment event (e.g., transfer, new hire, title change). (required).</param>
        /// <param name="openStaffPositionReference">openStaffPositionReference (required).</param>
        /// <param name="earlyHire">Indicator of whether this was an early hire..</param>
        /// <param name="hireDate">The month, day, and year on which an individual was hired for a position..</param>
        /// <param name="internalExternalHireDescriptor">Indicates whether the hire was an internal or external person..</param>
        /// <param name="mutualConsent">Indicator of whether this was a mutual consent hire..</param>
        /// <param name="restrictedChoice">Indicator of whether this was a restricted choice hire..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmEmploymentEvent(string id = default(string), string employmentEventTypeDescriptor = default(string), EdFiOpenStaffPositionReference openStaffPositionReference = default(EdFiOpenStaffPositionReference), bool? earlyHire = default(bool?), DateTime? hireDate = default(DateTime?), string internalExternalHireDescriptor = default(string), bool? mutualConsent = default(bool?), bool? restrictedChoice = default(bool?), string etag = default(string))
        {
            // to ensure "employmentEventTypeDescriptor" is required (not null)
            if (employmentEventTypeDescriptor == null)
            {
                throw new InvalidDataException("employmentEventTypeDescriptor is a required property for TpdmEmploymentEvent and cannot be null");
            }
            else
            {
                this.EmploymentEventTypeDescriptor = employmentEventTypeDescriptor;
            }
            // to ensure "openStaffPositionReference" is required (not null)
            if (openStaffPositionReference == null)
            {
                throw new InvalidDataException("openStaffPositionReference is a required property for TpdmEmploymentEvent and cannot be null");
            }
            else
            {
                this.OpenStaffPositionReference = openStaffPositionReference;
            }
            this.Id = id;
            this.EarlyHire = earlyHire;
            this.HireDate = hireDate;
            this.InternalExternalHireDescriptor = internalExternalHireDescriptor;
            this.MutualConsent = mutualConsent;
            this.RestrictedChoice = restrictedChoice;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of the employment event (e.g., transfer, new hire, title change).
        /// </summary>
        /// <value>The type of the employment event (e.g., transfer, new hire, title change).</value>
        [DataMember(Name="employmentEventTypeDescriptor", EmitDefaultValue=false)]
        public string EmploymentEventTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets OpenStaffPositionReference
        /// </summary>
        [DataMember(Name="openStaffPositionReference", EmitDefaultValue=false)]
        public EdFiOpenStaffPositionReference OpenStaffPositionReference { get; set; }

        /// <summary>
        /// Indicator of whether this was an early hire.
        /// </summary>
        /// <value>Indicator of whether this was an early hire.</value>
        [DataMember(Name="earlyHire", EmitDefaultValue=false)]
        public bool? EarlyHire { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was hired for a position.
        /// </summary>
        /// <value>The month, day, and year on which an individual was hired for a position.</value>
        [DataMember(Name="hireDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? HireDate { get; set; }

        /// <summary>
        /// Indicates whether the hire was an internal or external person.
        /// </summary>
        /// <value>Indicates whether the hire was an internal or external person.</value>
        [DataMember(Name="internalExternalHireDescriptor", EmitDefaultValue=false)]
        public string InternalExternalHireDescriptor { get; set; }

        /// <summary>
        /// Indicator of whether this was a mutual consent hire.
        /// </summary>
        /// <value>Indicator of whether this was a mutual consent hire.</value>
        [DataMember(Name="mutualConsent", EmitDefaultValue=false)]
        public bool? MutualConsent { get; set; }

        /// <summary>
        /// Indicator of whether this was a restricted choice hire.
        /// </summary>
        /// <value>Indicator of whether this was a restricted choice hire.</value>
        [DataMember(Name="restrictedChoice", EmitDefaultValue=false)]
        public bool? RestrictedChoice { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmEmploymentEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmploymentEventTypeDescriptor: ").Append(EmploymentEventTypeDescriptor).Append("\n");
            sb.Append("  OpenStaffPositionReference: ").Append(OpenStaffPositionReference).Append("\n");
            sb.Append("  EarlyHire: ").Append(EarlyHire).Append("\n");
            sb.Append("  HireDate: ").Append(HireDate).Append("\n");
            sb.Append("  InternalExternalHireDescriptor: ").Append(InternalExternalHireDescriptor).Append("\n");
            sb.Append("  MutualConsent: ").Append(MutualConsent).Append("\n");
            sb.Append("  RestrictedChoice: ").Append(RestrictedChoice).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmEmploymentEvent);
        }

        /// <summary>
        /// Returns true if TpdmEmploymentEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmEmploymentEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmEmploymentEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EmploymentEventTypeDescriptor == input.EmploymentEventTypeDescriptor ||
                    (this.EmploymentEventTypeDescriptor != null &&
                    this.EmploymentEventTypeDescriptor.Equals(input.EmploymentEventTypeDescriptor))
                ) && 
                (
                    this.OpenStaffPositionReference == input.OpenStaffPositionReference ||
                    (this.OpenStaffPositionReference != null &&
                    this.OpenStaffPositionReference.Equals(input.OpenStaffPositionReference))
                ) && 
                (
                    this.EarlyHire == input.EarlyHire ||
                    (this.EarlyHire != null &&
                    this.EarlyHire.Equals(input.EarlyHire))
                ) && 
                (
                    this.HireDate == input.HireDate ||
                    (this.HireDate != null &&
                    this.HireDate.Equals(input.HireDate))
                ) && 
                (
                    this.InternalExternalHireDescriptor == input.InternalExternalHireDescriptor ||
                    (this.InternalExternalHireDescriptor != null &&
                    this.InternalExternalHireDescriptor.Equals(input.InternalExternalHireDescriptor))
                ) && 
                (
                    this.MutualConsent == input.MutualConsent ||
                    (this.MutualConsent != null &&
                    this.MutualConsent.Equals(input.MutualConsent))
                ) && 
                (
                    this.RestrictedChoice == input.RestrictedChoice ||
                    (this.RestrictedChoice != null &&
                    this.RestrictedChoice.Equals(input.RestrictedChoice))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EmploymentEventTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.EmploymentEventTypeDescriptor.GetHashCode();
                if (this.OpenStaffPositionReference != null)
                    hashCode = hashCode * 59 + this.OpenStaffPositionReference.GetHashCode();
                if (this.EarlyHire != null)
                    hashCode = hashCode * 59 + this.EarlyHire.GetHashCode();
                if (this.HireDate != null)
                    hashCode = hashCode * 59 + this.HireDate.GetHashCode();
                if (this.InternalExternalHireDescriptor != null)
                    hashCode = hashCode * 59 + this.InternalExternalHireDescriptor.GetHashCode();
                if (this.MutualConsent != null)
                    hashCode = hashCode * 59 + this.MutualConsent.GetHashCode();
                if (this.RestrictedChoice != null)
                    hashCode = hashCode * 59 + this.RestrictedChoice.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
