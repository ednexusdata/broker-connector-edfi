/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmProspectQualifications
    /// </summary>
    [DataContract]
    public partial class TpdmProspectQualifications :  IEquatable<TpdmProspectQualifications>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmProspectQualifications" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmProspectQualifications() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmProspectQualifications" /> class.
        /// </summary>
        /// <param name="capacityToServe">An indication of whether or not a prospect mentor teacher has capacity to serve..</param>
        /// <param name="eligible">An indication of whether the prospect is eligible for the position. (required).</param>
        /// <param name="yearsOfServiceCurrentPlacement">The total number of years of service at the current school..</param>
        /// <param name="yearsOfServiceTotal">The total number of years of service as a teacher. (required).</param>
        public TpdmProspectQualifications(bool? capacityToServe = default(bool?), bool? eligible = default(bool?), double? yearsOfServiceCurrentPlacement = default(double?), double? yearsOfServiceTotal = default(double?))
        {
            // to ensure "eligible" is required (not null)
            if (eligible == null)
            {
                throw new InvalidDataException("eligible is a required property for TpdmProspectQualifications and cannot be null");
            }
            else
            {
                this.Eligible = eligible;
            }
            // to ensure "yearsOfServiceTotal" is required (not null)
            if (yearsOfServiceTotal == null)
            {
                throw new InvalidDataException("yearsOfServiceTotal is a required property for TpdmProspectQualifications and cannot be null");
            }
            else
            {
                this.YearsOfServiceTotal = yearsOfServiceTotal;
            }
            this.CapacityToServe = capacityToServe;
            this.YearsOfServiceCurrentPlacement = yearsOfServiceCurrentPlacement;
        }
        
        /// <summary>
        /// An indication of whether or not a prospect mentor teacher has capacity to serve.
        /// </summary>
        /// <value>An indication of whether or not a prospect mentor teacher has capacity to serve.</value>
        [DataMember(Name="capacityToServe", EmitDefaultValue=false)]
        public bool? CapacityToServe { get; set; }

        /// <summary>
        /// An indication of whether the prospect is eligible for the position.
        /// </summary>
        /// <value>An indication of whether the prospect is eligible for the position.</value>
        [DataMember(Name="eligible", EmitDefaultValue=false)]
        public bool? Eligible { get; set; }

        /// <summary>
        /// The total number of years of service at the current school.
        /// </summary>
        /// <value>The total number of years of service at the current school.</value>
        [DataMember(Name="yearsOfServiceCurrentPlacement", EmitDefaultValue=false)]
        public double? YearsOfServiceCurrentPlacement { get; set; }

        /// <summary>
        /// The total number of years of service as a teacher.
        /// </summary>
        /// <value>The total number of years of service as a teacher.</value>
        [DataMember(Name="yearsOfServiceTotal", EmitDefaultValue=false)]
        public double? YearsOfServiceTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmProspectQualifications {\n");
            sb.Append("  CapacityToServe: ").Append(CapacityToServe).Append("\n");
            sb.Append("  Eligible: ").Append(Eligible).Append("\n");
            sb.Append("  YearsOfServiceCurrentPlacement: ").Append(YearsOfServiceCurrentPlacement).Append("\n");
            sb.Append("  YearsOfServiceTotal: ").Append(YearsOfServiceTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmProspectQualifications);
        }

        /// <summary>
        /// Returns true if TpdmProspectQualifications instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmProspectQualifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmProspectQualifications input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CapacityToServe == input.CapacityToServe ||
                    (this.CapacityToServe != null &&
                    this.CapacityToServe.Equals(input.CapacityToServe))
                ) && 
                (
                    this.Eligible == input.Eligible ||
                    (this.Eligible != null &&
                    this.Eligible.Equals(input.Eligible))
                ) && 
                (
                    this.YearsOfServiceCurrentPlacement == input.YearsOfServiceCurrentPlacement ||
                    (this.YearsOfServiceCurrentPlacement != null &&
                    this.YearsOfServiceCurrentPlacement.Equals(input.YearsOfServiceCurrentPlacement))
                ) && 
                (
                    this.YearsOfServiceTotal == input.YearsOfServiceTotal ||
                    (this.YearsOfServiceTotal != null &&
                    this.YearsOfServiceTotal.Equals(input.YearsOfServiceTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CapacityToServe != null)
                    hashCode = hashCode * 59 + this.CapacityToServe.GetHashCode();
                if (this.Eligible != null)
                    hashCode = hashCode * 59 + this.Eligible.GetHashCode();
                if (this.YearsOfServiceCurrentPlacement != null)
                    hashCode = hashCode * 59 + this.YearsOfServiceCurrentPlacement.GetHashCode();
                if (this.YearsOfServiceTotal != null)
                    hashCode = hashCode * 59 + this.YearsOfServiceTotal.GetHashCode();
                return hashCode;
            }
        }
    }

}
