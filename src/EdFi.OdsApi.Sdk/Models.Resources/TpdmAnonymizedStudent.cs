/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmAnonymizedStudent
    /// </summary>
    [DataContract]
    public partial class TpdmAnonymizedStudent :  IEquatable<TpdmAnonymizedStudent>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmAnonymizedStudent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmAnonymizedStudent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmAnonymizedStudent" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="anonymizedStudentIdentifier">Unique identifier for anonymized student (required).</param>
        /// <param name="factsAsOfDate">The date for which the data element is relevant (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="atriskIndicator">An indicator that identifies if the student has been flagged as being at risk according to the District&#39;s definition of at risk..</param>
        /// <param name="disabilities">An unordered collection of anonymizedStudentDisabilities. A disability category that describes a child&#39;s impairment..</param>
        /// <param name="ellEnrollment">Data about the ELL enrollment of the student.</param>
        /// <param name="eslEnrollment">Data about the ESL enrollment of the student.</param>
        /// <param name="genderDescriptor">The gender with which a person associates..</param>
        /// <param name="gradeLevelDescriptor">The grade level for the student..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;.</param>
        /// <param name="languages">An unordered collection of anonymizedStudentLanguages. The language(s) the individual uses to communicate..</param>
        /// <param name="mobility">The number of times a student has moved schools during the current school year..</param>
        /// <param name="races">An unordered collection of anonymizedStudentRaces. The general racial category which most clearly reflects the individual&#39;s                     recognition of his or her community or with which the individual most                     identifies. The data model allows for multiple entries so that each individual                     can specify all appropriate races..</param>
        /// <param name="section504Enrollment">Information about the students who are enrolled in a 504 program.</param>
        /// <param name="sexDescriptor">A person&#39;s gender..</param>
        /// <param name="spedEnrollment">Data about the enrollment in SPED of the student.</param>
        /// <param name="titleIEnrollment">Data about the enrollment in Title I of the student.</param>
        /// <param name="valueTypeDescriptor">Domain entity to collect data for indiviudal students with whom the teacher candidate is associated through field work or student teaching.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmAnonymizedStudent(string id = default(string), string anonymizedStudentIdentifier = default(string), DateTime? factsAsOfDate = default(DateTime?), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), bool? atriskIndicator = default(bool?), List<TpdmAnonymizedStudentDisability> disabilities = default(List<TpdmAnonymizedStudentDisability>), bool? ellEnrollment = default(bool?), bool? eslEnrollment = default(bool?), string genderDescriptor = default(string), string gradeLevelDescriptor = default(string), bool? hispanicLatinoEthnicity = default(bool?), List<TpdmAnonymizedStudentLanguage> languages = default(List<TpdmAnonymizedStudentLanguage>), int? mobility = default(int?), List<TpdmAnonymizedStudentRace> races = default(List<TpdmAnonymizedStudentRace>), bool? section504Enrollment = default(bool?), string sexDescriptor = default(string), bool? spedEnrollment = default(bool?), bool? titleIEnrollment = default(bool?), string valueTypeDescriptor = default(string), string etag = default(string))
        {
            // to ensure "anonymizedStudentIdentifier" is required (not null)
            if (anonymizedStudentIdentifier == null)
            {
                throw new InvalidDataException("anonymizedStudentIdentifier is a required property for TpdmAnonymizedStudent and cannot be null");
            }
            else
            {
                this.AnonymizedStudentIdentifier = anonymizedStudentIdentifier;
            }
            // to ensure "factsAsOfDate" is required (not null)
            if (factsAsOfDate == null)
            {
                throw new InvalidDataException("factsAsOfDate is a required property for TpdmAnonymizedStudent and cannot be null");
            }
            else
            {
                this.FactsAsOfDate = factsAsOfDate;
            }
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new InvalidDataException("schoolYearTypeReference is a required property for TpdmAnonymizedStudent and cannot be null");
            }
            else
            {
                this.SchoolYearTypeReference = schoolYearTypeReference;
            }
            this.Id = id;
            this.AtriskIndicator = atriskIndicator;
            this.Disabilities = disabilities;
            this.EllEnrollment = ellEnrollment;
            this.EslEnrollment = eslEnrollment;
            this.GenderDescriptor = genderDescriptor;
            this.GradeLevelDescriptor = gradeLevelDescriptor;
            this.HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            this.Languages = languages;
            this.Mobility = mobility;
            this.Races = races;
            this.Section504Enrollment = section504Enrollment;
            this.SexDescriptor = sexDescriptor;
            this.SpedEnrollment = spedEnrollment;
            this.TitleIEnrollment = titleIEnrollment;
            this.ValueTypeDescriptor = valueTypeDescriptor;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier for anonymized student
        /// </summary>
        /// <value>Unique identifier for anonymized student</value>
        [DataMember(Name="anonymizedStudentIdentifier", EmitDefaultValue=false)]
        public string AnonymizedStudentIdentifier { get; set; }

        /// <summary>
        /// The date for which the data element is relevant
        /// </summary>
        /// <value>The date for which the data element is relevant</value>
        [DataMember(Name="factsAsOfDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? FactsAsOfDate { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// An indicator that identifies if the student has been flagged as being at risk according to the District&#39;s definition of at risk.
        /// </summary>
        /// <value>An indicator that identifies if the student has been flagged as being at risk according to the District&#39;s definition of at risk.</value>
        [DataMember(Name="atriskIndicator", EmitDefaultValue=false)]
        public bool? AtriskIndicator { get; set; }

        /// <summary>
        /// An unordered collection of anonymizedStudentDisabilities. A disability category that describes a child&#39;s impairment.
        /// </summary>
        /// <value>An unordered collection of anonymizedStudentDisabilities. A disability category that describes a child&#39;s impairment.</value>
        [DataMember(Name="disabilities", EmitDefaultValue=false)]
        public List<TpdmAnonymizedStudentDisability> Disabilities { get; set; }

        /// <summary>
        /// Data about the ELL enrollment of the student
        /// </summary>
        /// <value>Data about the ELL enrollment of the student</value>
        [DataMember(Name="ellEnrollment", EmitDefaultValue=false)]
        public bool? EllEnrollment { get; set; }

        /// <summary>
        /// Data about the ESL enrollment of the student
        /// </summary>
        /// <value>Data about the ESL enrollment of the student</value>
        [DataMember(Name="eslEnrollment", EmitDefaultValue=false)]
        public bool? EslEnrollment { get; set; }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        /// <value>The gender with which a person associates.</value>
        [DataMember(Name="genderDescriptor", EmitDefaultValue=false)]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// The grade level for the student.
        /// </summary>
        /// <value>The grade level for the student.</value>
        [DataMember(Name="gradeLevelDescriptor", EmitDefaultValue=false)]
        public string GradeLevelDescriptor { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</value>
        [DataMember(Name="hispanicLatinoEthnicity", EmitDefaultValue=false)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of anonymizedStudentLanguages. The language(s) the individual uses to communicate.
        /// </summary>
        /// <value>An unordered collection of anonymizedStudentLanguages. The language(s) the individual uses to communicate.</value>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<TpdmAnonymizedStudentLanguage> Languages { get; set; }

        /// <summary>
        /// The number of times a student has moved schools during the current school year.
        /// </summary>
        /// <value>The number of times a student has moved schools during the current school year.</value>
        [DataMember(Name="mobility", EmitDefaultValue=false)]
        public int? Mobility { get; set; }

        /// <summary>
        /// An unordered collection of anonymizedStudentRaces. The general racial category which most clearly reflects the individual&#39;s                     recognition of his or her community or with which the individual most                     identifies. The data model allows for multiple entries so that each individual                     can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of anonymizedStudentRaces. The general racial category which most clearly reflects the individual&#39;s                     recognition of his or her community or with which the individual most                     identifies. The data model allows for multiple entries so that each individual                     can specify all appropriate races.</value>
        [DataMember(Name="races", EmitDefaultValue=false)]
        public List<TpdmAnonymizedStudentRace> Races { get; set; }

        /// <summary>
        /// Information about the students who are enrolled in a 504 program
        /// </summary>
        /// <value>Information about the students who are enrolled in a 504 program</value>
        [DataMember(Name="section504Enrollment", EmitDefaultValue=false)]
        public bool? Section504Enrollment { get; set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [DataMember(Name="sexDescriptor", EmitDefaultValue=false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// Data about the enrollment in SPED of the student
        /// </summary>
        /// <value>Data about the enrollment in SPED of the student</value>
        [DataMember(Name="spedEnrollment", EmitDefaultValue=false)]
        public bool? SpedEnrollment { get; set; }

        /// <summary>
        /// Data about the enrollment in Title I of the student
        /// </summary>
        /// <value>Data about the enrollment in Title I of the student</value>
        [DataMember(Name="titleIEnrollment", EmitDefaultValue=false)]
        public bool? TitleIEnrollment { get; set; }

        /// <summary>
        /// Domain entity to collect data for indiviudal students with whom the teacher candidate is associated through field work or student teaching
        /// </summary>
        /// <value>Domain entity to collect data for indiviudal students with whom the teacher candidate is associated through field work or student teaching</value>
        [DataMember(Name="valueTypeDescriptor", EmitDefaultValue=false)]
        public string ValueTypeDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmAnonymizedStudent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AnonymizedStudentIdentifier: ").Append(AnonymizedStudentIdentifier).Append("\n");
            sb.Append("  FactsAsOfDate: ").Append(FactsAsOfDate).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  AtriskIndicator: ").Append(AtriskIndicator).Append("\n");
            sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            sb.Append("  EllEnrollment: ").Append(EllEnrollment).Append("\n");
            sb.Append("  EslEnrollment: ").Append(EslEnrollment).Append("\n");
            sb.Append("  GenderDescriptor: ").Append(GenderDescriptor).Append("\n");
            sb.Append("  GradeLevelDescriptor: ").Append(GradeLevelDescriptor).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Mobility: ").Append(Mobility).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  Section504Enrollment: ").Append(Section504Enrollment).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  SpedEnrollment: ").Append(SpedEnrollment).Append("\n");
            sb.Append("  TitleIEnrollment: ").Append(TitleIEnrollment).Append("\n");
            sb.Append("  ValueTypeDescriptor: ").Append(ValueTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmAnonymizedStudent);
        }

        /// <summary>
        /// Returns true if TpdmAnonymizedStudent instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmAnonymizedStudent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmAnonymizedStudent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AnonymizedStudentIdentifier == input.AnonymizedStudentIdentifier ||
                    (this.AnonymizedStudentIdentifier != null &&
                    this.AnonymizedStudentIdentifier.Equals(input.AnonymizedStudentIdentifier))
                ) && 
                (
                    this.FactsAsOfDate == input.FactsAsOfDate ||
                    (this.FactsAsOfDate != null &&
                    this.FactsAsOfDate.Equals(input.FactsAsOfDate))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.AtriskIndicator == input.AtriskIndicator ||
                    (this.AtriskIndicator != null &&
                    this.AtriskIndicator.Equals(input.AtriskIndicator))
                ) && 
                (
                    this.Disabilities == input.Disabilities ||
                    this.Disabilities != null &&
                    this.Disabilities.SequenceEqual(input.Disabilities)
                ) && 
                (
                    this.EllEnrollment == input.EllEnrollment ||
                    (this.EllEnrollment != null &&
                    this.EllEnrollment.Equals(input.EllEnrollment))
                ) && 
                (
                    this.EslEnrollment == input.EslEnrollment ||
                    (this.EslEnrollment != null &&
                    this.EslEnrollment.Equals(input.EslEnrollment))
                ) && 
                (
                    this.GenderDescriptor == input.GenderDescriptor ||
                    (this.GenderDescriptor != null &&
                    this.GenderDescriptor.Equals(input.GenderDescriptor))
                ) && 
                (
                    this.GradeLevelDescriptor == input.GradeLevelDescriptor ||
                    (this.GradeLevelDescriptor != null &&
                    this.GradeLevelDescriptor.Equals(input.GradeLevelDescriptor))
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    (this.HispanicLatinoEthnicity != null &&
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.Mobility == input.Mobility ||
                    (this.Mobility != null &&
                    this.Mobility.Equals(input.Mobility))
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.Section504Enrollment == input.Section504Enrollment ||
                    (this.Section504Enrollment != null &&
                    this.Section504Enrollment.Equals(input.Section504Enrollment))
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.SpedEnrollment == input.SpedEnrollment ||
                    (this.SpedEnrollment != null &&
                    this.SpedEnrollment.Equals(input.SpedEnrollment))
                ) && 
                (
                    this.TitleIEnrollment == input.TitleIEnrollment ||
                    (this.TitleIEnrollment != null &&
                    this.TitleIEnrollment.Equals(input.TitleIEnrollment))
                ) && 
                (
                    this.ValueTypeDescriptor == input.ValueTypeDescriptor ||
                    (this.ValueTypeDescriptor != null &&
                    this.ValueTypeDescriptor.Equals(input.ValueTypeDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AnonymizedStudentIdentifier != null)
                    hashCode = hashCode * 59 + this.AnonymizedStudentIdentifier.GetHashCode();
                if (this.FactsAsOfDate != null)
                    hashCode = hashCode * 59 + this.FactsAsOfDate.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.AtriskIndicator != null)
                    hashCode = hashCode * 59 + this.AtriskIndicator.GetHashCode();
                if (this.Disabilities != null)
                    hashCode = hashCode * 59 + this.Disabilities.GetHashCode();
                if (this.EllEnrollment != null)
                    hashCode = hashCode * 59 + this.EllEnrollment.GetHashCode();
                if (this.EslEnrollment != null)
                    hashCode = hashCode * 59 + this.EslEnrollment.GetHashCode();
                if (this.GenderDescriptor != null)
                    hashCode = hashCode * 59 + this.GenderDescriptor.GetHashCode();
                if (this.GradeLevelDescriptor != null)
                    hashCode = hashCode * 59 + this.GradeLevelDescriptor.GetHashCode();
                if (this.HispanicLatinoEthnicity != null)
                    hashCode = hashCode * 59 + this.HispanicLatinoEthnicity.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.Mobility != null)
                    hashCode = hashCode * 59 + this.Mobility.GetHashCode();
                if (this.Races != null)
                    hashCode = hashCode * 59 + this.Races.GetHashCode();
                if (this.Section504Enrollment != null)
                    hashCode = hashCode * 59 + this.Section504Enrollment.GetHashCode();
                if (this.SexDescriptor != null)
                    hashCode = hashCode * 59 + this.SexDescriptor.GetHashCode();
                if (this.SpedEnrollment != null)
                    hashCode = hashCode * 59 + this.SpedEnrollment.GetHashCode();
                if (this.TitleIEnrollment != null)
                    hashCode = hashCode * 59 + this.TitleIEnrollment.GetHashCode();
                if (this.ValueTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.ValueTypeDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
