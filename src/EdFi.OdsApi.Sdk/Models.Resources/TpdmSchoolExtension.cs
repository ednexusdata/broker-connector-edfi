/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmSchoolExtension
    /// </summary>
    [DataContract]
    public partial class TpdmSchoolExtension :  IEquatable<TpdmSchoolExtension>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmSchoolExtension" /> class.
        /// </summary>
        /// <param name="federalLocaleCodeDescriptor">The federal locale code associated with an education organization..</param>
        /// <param name="schoolStatusDescriptor">The status of school e.g. priority or focus..</param>
        /// <param name="improvingSchool">An indication of whether a school is identified as an improving school..</param>
        public TpdmSchoolExtension(string federalLocaleCodeDescriptor = default(string), string schoolStatusDescriptor = default(string), bool? improvingSchool = default(bool?))
        {
            this.FederalLocaleCodeDescriptor = federalLocaleCodeDescriptor;
            this.SchoolStatusDescriptor = schoolStatusDescriptor;
            this.ImprovingSchool = improvingSchool;
        }
        
        /// <summary>
        /// The federal locale code associated with an education organization.
        /// </summary>
        /// <value>The federal locale code associated with an education organization.</value>
        [DataMember(Name="federalLocaleCodeDescriptor", EmitDefaultValue=false)]
        public string FederalLocaleCodeDescriptor { get; set; }

        /// <summary>
        /// The status of school e.g. priority or focus.
        /// </summary>
        /// <value>The status of school e.g. priority or focus.</value>
        [DataMember(Name="schoolStatusDescriptor", EmitDefaultValue=false)]
        public string SchoolStatusDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a school is identified as an improving school.
        /// </summary>
        /// <value>An indication of whether a school is identified as an improving school.</value>
        [DataMember(Name="improvingSchool", EmitDefaultValue=false)]
        public bool? ImprovingSchool { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmSchoolExtension {\n");
            sb.Append("  FederalLocaleCodeDescriptor: ").Append(FederalLocaleCodeDescriptor).Append("\n");
            sb.Append("  SchoolStatusDescriptor: ").Append(SchoolStatusDescriptor).Append("\n");
            sb.Append("  ImprovingSchool: ").Append(ImprovingSchool).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmSchoolExtension);
        }

        /// <summary>
        /// Returns true if TpdmSchoolExtension instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmSchoolExtension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmSchoolExtension input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FederalLocaleCodeDescriptor == input.FederalLocaleCodeDescriptor ||
                    (this.FederalLocaleCodeDescriptor != null &&
                    this.FederalLocaleCodeDescriptor.Equals(input.FederalLocaleCodeDescriptor))
                ) && 
                (
                    this.SchoolStatusDescriptor == input.SchoolStatusDescriptor ||
                    (this.SchoolStatusDescriptor != null &&
                    this.SchoolStatusDescriptor.Equals(input.SchoolStatusDescriptor))
                ) && 
                (
                    this.ImprovingSchool == input.ImprovingSchool ||
                    (this.ImprovingSchool != null &&
                    this.ImprovingSchool.Equals(input.ImprovingSchool))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FederalLocaleCodeDescriptor != null)
                    hashCode = hashCode * 59 + this.FederalLocaleCodeDescriptor.GetHashCode();
                if (this.SchoolStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.SchoolStatusDescriptor.GetHashCode();
                if (this.ImprovingSchool != null)
                    hashCode = hashCode * 59 + this.ImprovingSchool.GetHashCode();
                return hashCode;
            }
        }
    }

}
