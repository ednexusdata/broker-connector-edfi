/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// SampleStudentParentAssociationExtension
    /// </summary>
    [DataContract]
    public partial class SampleStudentParentAssociationExtension :  IEquatable<SampleStudentParentAssociationExtension>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleStudentParentAssociationExtension" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SampleStudentParentAssociationExtension() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleStudentParentAssociationExtension" /> class.
        /// </summary>
        /// <param name="bedtimeReader">An indication as to whether the parent regularly reads to the student before bed. (required).</param>
        /// <param name="bedtimeReadingRate">The average number of pages the parent reads with the student each day..</param>
        /// <param name="bookBudget">The parent&#39;s estimated monthly budget dedicated to books for the student..</param>
        /// <param name="booksBorrowed">The total number of books the parent has borrowed on behalf of the student to date..</param>
        /// <param name="libraryDuration">The actual or estimated number of clock minutes for a given library visit..</param>
        /// <param name="libraryTime">The student&#39;s regularly scheduled library time during the school day..</param>
        /// <param name="libraryVisits">Total number of visits a student is allowed to the library in a single school day..</param>
        /// <param name="priorContactRestrictions">Previous restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual)..</param>
        /// <param name="readGreenEggsAndHamDate">Date on which the parent first read the student Green Eggs and Ham by Dr. Seuss..</param>
        /// <param name="readingTimeSpent">The amount of time the parent spends reading to the student each day..</param>
        /// <param name="studentRead">The year in which the student&#39;s reading habits are being recorded..</param>
        /// <param name="interventionStudyReference">interventionStudyReference.</param>
        /// <param name="disciplines">An unordered collection of studentParentAssociationDisciplines. The type of action used to discipline the student preferred by the parent..</param>
        /// <param name="favoriteBookTitles">An unordered collection of studentParentAssociationFavoriteBookTitles. The title of the student&#39;s favorite book. (required).</param>
        /// <param name="hoursPerWeeks">An unordered collection of studentParentAssociationHoursPerWeeks. Total number of hours per week a student and parent dedicates to reading..</param>
        /// <param name="pagesReads">An unordered collection of studentParentAssociationPagesReads. Total number of pages the parent has read the student..</param>
        /// <param name="staffEducationOrganizationEmploymentAssociations">An unordered collection of studentParentAssociationStaffEducationOrganizationEmploymentAssociations. A reference to the staff member and education organization assigned to help track the student&#39;s reading abilities with the parent&#39;s involvement..</param>
        /// <param name="telephone">telephone.</param>
        public SampleStudentParentAssociationExtension(bool? bedtimeReader = default(bool?), double? bedtimeReadingRate = default(double?), double? bookBudget = default(double?), int? booksBorrowed = default(int?), int? libraryDuration = default(int?), string libraryTime = default(string), int? libraryVisits = default(int?), string priorContactRestrictions = default(string), DateTime? readGreenEggsAndHamDate = default(DateTime?), string readingTimeSpent = default(string), int? studentRead = default(int?), EdFiInterventionStudyReference interventionStudyReference = default(EdFiInterventionStudyReference), List<SampleStudentParentAssociationDiscipline> disciplines = default(List<SampleStudentParentAssociationDiscipline>), List<SampleStudentParentAssociationFavoriteBookTitle> favoriteBookTitles = default(List<SampleStudentParentAssociationFavoriteBookTitle>), List<SampleStudentParentAssociationHoursPerWeek> hoursPerWeeks = default(List<SampleStudentParentAssociationHoursPerWeek>), List<SampleStudentParentAssociationPagesRead> pagesReads = default(List<SampleStudentParentAssociationPagesRead>), List<SampleStudentParentAssociationStaffEducationOrganizationEmploymentAssociation> staffEducationOrganizationEmploymentAssociations = default(List<SampleStudentParentAssociationStaffEducationOrganizationEmploymentAssociation>), SampleStudentParentAssociationTelephone telephone = default(SampleStudentParentAssociationTelephone))
        {
            // to ensure "bedtimeReader" is required (not null)
            if (bedtimeReader == null)
            {
                throw new InvalidDataException("bedtimeReader is a required property for SampleStudentParentAssociationExtension and cannot be null");
            }
            else
            {
                this.BedtimeReader = bedtimeReader;
            }
            // to ensure "favoriteBookTitles" is required (not null)
            if (favoriteBookTitles == null)
            {
                throw new InvalidDataException("favoriteBookTitles is a required property for SampleStudentParentAssociationExtension and cannot be null");
            }
            else
            {
                this.FavoriteBookTitles = favoriteBookTitles;
            }
            this.BedtimeReadingRate = bedtimeReadingRate;
            this.BookBudget = bookBudget;
            this.BooksBorrowed = booksBorrowed;
            this.LibraryDuration = libraryDuration;
            this.LibraryTime = libraryTime;
            this.LibraryVisits = libraryVisits;
            this.PriorContactRestrictions = priorContactRestrictions;
            this.ReadGreenEggsAndHamDate = readGreenEggsAndHamDate;
            this.ReadingTimeSpent = readingTimeSpent;
            this.StudentRead = studentRead;
            this.InterventionStudyReference = interventionStudyReference;
            this.Disciplines = disciplines;
            this.HoursPerWeeks = hoursPerWeeks;
            this.PagesReads = pagesReads;
            this.StaffEducationOrganizationEmploymentAssociations = staffEducationOrganizationEmploymentAssociations;
            this.Telephone = telephone;
        }
        
        /// <summary>
        /// An indication as to whether the parent regularly reads to the student before bed.
        /// </summary>
        /// <value>An indication as to whether the parent regularly reads to the student before bed.</value>
        [DataMember(Name="bedtimeReader", EmitDefaultValue=false)]
        public bool? BedtimeReader { get; set; }

        /// <summary>
        /// The average number of pages the parent reads with the student each day.
        /// </summary>
        /// <value>The average number of pages the parent reads with the student each day.</value>
        [DataMember(Name="bedtimeReadingRate", EmitDefaultValue=false)]
        public double? BedtimeReadingRate { get; set; }

        /// <summary>
        /// The parent&#39;s estimated monthly budget dedicated to books for the student.
        /// </summary>
        /// <value>The parent&#39;s estimated monthly budget dedicated to books for the student.</value>
        [DataMember(Name="bookBudget", EmitDefaultValue=false)]
        public double? BookBudget { get; set; }

        /// <summary>
        /// The total number of books the parent has borrowed on behalf of the student to date.
        /// </summary>
        /// <value>The total number of books the parent has borrowed on behalf of the student to date.</value>
        [DataMember(Name="booksBorrowed", EmitDefaultValue=false)]
        public int? BooksBorrowed { get; set; }

        /// <summary>
        /// The actual or estimated number of clock minutes for a given library visit.
        /// </summary>
        /// <value>The actual or estimated number of clock minutes for a given library visit.</value>
        [DataMember(Name="libraryDuration", EmitDefaultValue=false)]
        public int? LibraryDuration { get; set; }

        /// <summary>
        /// The student&#39;s regularly scheduled library time during the school day.
        /// </summary>
        /// <value>The student&#39;s regularly scheduled library time during the school day.</value>
        [DataMember(Name="libraryTime", EmitDefaultValue=false)]
        public string LibraryTime { get; set; }

        /// <summary>
        /// Total number of visits a student is allowed to the library in a single school day.
        /// </summary>
        /// <value>Total number of visits a student is allowed to the library in a single school day.</value>
        [DataMember(Name="libraryVisits", EmitDefaultValue=false)]
        public int? LibraryVisits { get; set; }

        /// <summary>
        /// Previous restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).
        /// </summary>
        /// <value>Previous restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).</value>
        [DataMember(Name="priorContactRestrictions", EmitDefaultValue=false)]
        public string PriorContactRestrictions { get; set; }

        /// <summary>
        /// Date on which the parent first read the student Green Eggs and Ham by Dr. Seuss.
        /// </summary>
        /// <value>Date on which the parent first read the student Green Eggs and Ham by Dr. Seuss.</value>
        [DataMember(Name="readGreenEggsAndHamDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ReadGreenEggsAndHamDate { get; set; }

        /// <summary>
        /// The amount of time the parent spends reading to the student each day.
        /// </summary>
        /// <value>The amount of time the parent spends reading to the student each day.</value>
        [DataMember(Name="readingTimeSpent", EmitDefaultValue=false)]
        public string ReadingTimeSpent { get; set; }

        /// <summary>
        /// The year in which the student&#39;s reading habits are being recorded.
        /// </summary>
        /// <value>The year in which the student&#39;s reading habits are being recorded.</value>
        [DataMember(Name="studentRead", EmitDefaultValue=false)]
        public int? StudentRead { get; set; }

        /// <summary>
        /// Gets or Sets InterventionStudyReference
        /// </summary>
        [DataMember(Name="interventionStudyReference", EmitDefaultValue=false)]
        public EdFiInterventionStudyReference InterventionStudyReference { get; set; }

        /// <summary>
        /// An unordered collection of studentParentAssociationDisciplines. The type of action used to discipline the student preferred by the parent.
        /// </summary>
        /// <value>An unordered collection of studentParentAssociationDisciplines. The type of action used to discipline the student preferred by the parent.</value>
        [DataMember(Name="disciplines", EmitDefaultValue=false)]
        public List<SampleStudentParentAssociationDiscipline> Disciplines { get; set; }

        /// <summary>
        /// An unordered collection of studentParentAssociationFavoriteBookTitles. The title of the student&#39;s favorite book.
        /// </summary>
        /// <value>An unordered collection of studentParentAssociationFavoriteBookTitles. The title of the student&#39;s favorite book.</value>
        [DataMember(Name="favoriteBookTitles", EmitDefaultValue=false)]
        public List<SampleStudentParentAssociationFavoriteBookTitle> FavoriteBookTitles { get; set; }

        /// <summary>
        /// An unordered collection of studentParentAssociationHoursPerWeeks. Total number of hours per week a student and parent dedicates to reading.
        /// </summary>
        /// <value>An unordered collection of studentParentAssociationHoursPerWeeks. Total number of hours per week a student and parent dedicates to reading.</value>
        [DataMember(Name="hoursPerWeeks", EmitDefaultValue=false)]
        public List<SampleStudentParentAssociationHoursPerWeek> HoursPerWeeks { get; set; }

        /// <summary>
        /// An unordered collection of studentParentAssociationPagesReads. Total number of pages the parent has read the student.
        /// </summary>
        /// <value>An unordered collection of studentParentAssociationPagesReads. Total number of pages the parent has read the student.</value>
        [DataMember(Name="pagesReads", EmitDefaultValue=false)]
        public List<SampleStudentParentAssociationPagesRead> PagesReads { get; set; }

        /// <summary>
        /// An unordered collection of studentParentAssociationStaffEducationOrganizationEmploymentAssociations. A reference to the staff member and education organization assigned to help track the student&#39;s reading abilities with the parent&#39;s involvement.
        /// </summary>
        /// <value>An unordered collection of studentParentAssociationStaffEducationOrganizationEmploymentAssociations. A reference to the staff member and education organization assigned to help track the student&#39;s reading abilities with the parent&#39;s involvement.</value>
        [DataMember(Name="staffEducationOrganizationEmploymentAssociations", EmitDefaultValue=false)]
        public List<SampleStudentParentAssociationStaffEducationOrganizationEmploymentAssociation> StaffEducationOrganizationEmploymentAssociations { get; set; }

        /// <summary>
        /// Gets or Sets Telephone
        /// </summary>
        [DataMember(Name="telephone", EmitDefaultValue=false)]
        public SampleStudentParentAssociationTelephone Telephone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SampleStudentParentAssociationExtension {\n");
            sb.Append("  BedtimeReader: ").Append(BedtimeReader).Append("\n");
            sb.Append("  BedtimeReadingRate: ").Append(BedtimeReadingRate).Append("\n");
            sb.Append("  BookBudget: ").Append(BookBudget).Append("\n");
            sb.Append("  BooksBorrowed: ").Append(BooksBorrowed).Append("\n");
            sb.Append("  LibraryDuration: ").Append(LibraryDuration).Append("\n");
            sb.Append("  LibraryTime: ").Append(LibraryTime).Append("\n");
            sb.Append("  LibraryVisits: ").Append(LibraryVisits).Append("\n");
            sb.Append("  PriorContactRestrictions: ").Append(PriorContactRestrictions).Append("\n");
            sb.Append("  ReadGreenEggsAndHamDate: ").Append(ReadGreenEggsAndHamDate).Append("\n");
            sb.Append("  ReadingTimeSpent: ").Append(ReadingTimeSpent).Append("\n");
            sb.Append("  StudentRead: ").Append(StudentRead).Append("\n");
            sb.Append("  InterventionStudyReference: ").Append(InterventionStudyReference).Append("\n");
            sb.Append("  Disciplines: ").Append(Disciplines).Append("\n");
            sb.Append("  FavoriteBookTitles: ").Append(FavoriteBookTitles).Append("\n");
            sb.Append("  HoursPerWeeks: ").Append(HoursPerWeeks).Append("\n");
            sb.Append("  PagesReads: ").Append(PagesReads).Append("\n");
            sb.Append("  StaffEducationOrganizationEmploymentAssociations: ").Append(StaffEducationOrganizationEmploymentAssociations).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SampleStudentParentAssociationExtension);
        }

        /// <summary>
        /// Returns true if SampleStudentParentAssociationExtension instances are equal
        /// </summary>
        /// <param name="input">Instance of SampleStudentParentAssociationExtension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SampleStudentParentAssociationExtension input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BedtimeReader == input.BedtimeReader ||
                    (this.BedtimeReader != null &&
                    this.BedtimeReader.Equals(input.BedtimeReader))
                ) && 
                (
                    this.BedtimeReadingRate == input.BedtimeReadingRate ||
                    (this.BedtimeReadingRate != null &&
                    this.BedtimeReadingRate.Equals(input.BedtimeReadingRate))
                ) && 
                (
                    this.BookBudget == input.BookBudget ||
                    (this.BookBudget != null &&
                    this.BookBudget.Equals(input.BookBudget))
                ) && 
                (
                    this.BooksBorrowed == input.BooksBorrowed ||
                    (this.BooksBorrowed != null &&
                    this.BooksBorrowed.Equals(input.BooksBorrowed))
                ) && 
                (
                    this.LibraryDuration == input.LibraryDuration ||
                    (this.LibraryDuration != null &&
                    this.LibraryDuration.Equals(input.LibraryDuration))
                ) && 
                (
                    this.LibraryTime == input.LibraryTime ||
                    (this.LibraryTime != null &&
                    this.LibraryTime.Equals(input.LibraryTime))
                ) && 
                (
                    this.LibraryVisits == input.LibraryVisits ||
                    (this.LibraryVisits != null &&
                    this.LibraryVisits.Equals(input.LibraryVisits))
                ) && 
                (
                    this.PriorContactRestrictions == input.PriorContactRestrictions ||
                    (this.PriorContactRestrictions != null &&
                    this.PriorContactRestrictions.Equals(input.PriorContactRestrictions))
                ) && 
                (
                    this.ReadGreenEggsAndHamDate == input.ReadGreenEggsAndHamDate ||
                    (this.ReadGreenEggsAndHamDate != null &&
                    this.ReadGreenEggsAndHamDate.Equals(input.ReadGreenEggsAndHamDate))
                ) && 
                (
                    this.ReadingTimeSpent == input.ReadingTimeSpent ||
                    (this.ReadingTimeSpent != null &&
                    this.ReadingTimeSpent.Equals(input.ReadingTimeSpent))
                ) && 
                (
                    this.StudentRead == input.StudentRead ||
                    (this.StudentRead != null &&
                    this.StudentRead.Equals(input.StudentRead))
                ) && 
                (
                    this.InterventionStudyReference == input.InterventionStudyReference ||
                    (this.InterventionStudyReference != null &&
                    this.InterventionStudyReference.Equals(input.InterventionStudyReference))
                ) && 
                (
                    this.Disciplines == input.Disciplines ||
                    this.Disciplines != null &&
                    this.Disciplines.SequenceEqual(input.Disciplines)
                ) && 
                (
                    this.FavoriteBookTitles == input.FavoriteBookTitles ||
                    this.FavoriteBookTitles != null &&
                    this.FavoriteBookTitles.SequenceEqual(input.FavoriteBookTitles)
                ) && 
                (
                    this.HoursPerWeeks == input.HoursPerWeeks ||
                    this.HoursPerWeeks != null &&
                    this.HoursPerWeeks.SequenceEqual(input.HoursPerWeeks)
                ) && 
                (
                    this.PagesReads == input.PagesReads ||
                    this.PagesReads != null &&
                    this.PagesReads.SequenceEqual(input.PagesReads)
                ) && 
                (
                    this.StaffEducationOrganizationEmploymentAssociations == input.StaffEducationOrganizationEmploymentAssociations ||
                    this.StaffEducationOrganizationEmploymentAssociations != null &&
                    this.StaffEducationOrganizationEmploymentAssociations.SequenceEqual(input.StaffEducationOrganizationEmploymentAssociations)
                ) && 
                (
                    this.Telephone == input.Telephone ||
                    (this.Telephone != null &&
                    this.Telephone.Equals(input.Telephone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BedtimeReader != null)
                    hashCode = hashCode * 59 + this.BedtimeReader.GetHashCode();
                if (this.BedtimeReadingRate != null)
                    hashCode = hashCode * 59 + this.BedtimeReadingRate.GetHashCode();
                if (this.BookBudget != null)
                    hashCode = hashCode * 59 + this.BookBudget.GetHashCode();
                if (this.BooksBorrowed != null)
                    hashCode = hashCode * 59 + this.BooksBorrowed.GetHashCode();
                if (this.LibraryDuration != null)
                    hashCode = hashCode * 59 + this.LibraryDuration.GetHashCode();
                if (this.LibraryTime != null)
                    hashCode = hashCode * 59 + this.LibraryTime.GetHashCode();
                if (this.LibraryVisits != null)
                    hashCode = hashCode * 59 + this.LibraryVisits.GetHashCode();
                if (this.PriorContactRestrictions != null)
                    hashCode = hashCode * 59 + this.PriorContactRestrictions.GetHashCode();
                if (this.ReadGreenEggsAndHamDate != null)
                    hashCode = hashCode * 59 + this.ReadGreenEggsAndHamDate.GetHashCode();
                if (this.ReadingTimeSpent != null)
                    hashCode = hashCode * 59 + this.ReadingTimeSpent.GetHashCode();
                if (this.StudentRead != null)
                    hashCode = hashCode * 59 + this.StudentRead.GetHashCode();
                if (this.InterventionStudyReference != null)
                    hashCode = hashCode * 59 + this.InterventionStudyReference.GetHashCode();
                if (this.Disciplines != null)
                    hashCode = hashCode * 59 + this.Disciplines.GetHashCode();
                if (this.FavoriteBookTitles != null)
                    hashCode = hashCode * 59 + this.FavoriteBookTitles.GetHashCode();
                if (this.HoursPerWeeks != null)
                    hashCode = hashCode * 59 + this.HoursPerWeeks.GetHashCode();
                if (this.PagesReads != null)
                    hashCode = hashCode * 59 + this.PagesReads.GetHashCode();
                if (this.StaffEducationOrganizationEmploymentAssociations != null)
                    hashCode = hashCode * 59 + this.StaffEducationOrganizationEmploymentAssociations.GetHashCode();
                if (this.Telephone != null)
                    hashCode = hashCode * 59 + this.Telephone.GetHashCode();
                return hashCode;
            }
        }
    }

}
