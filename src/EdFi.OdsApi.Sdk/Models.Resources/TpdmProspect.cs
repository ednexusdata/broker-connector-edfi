/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmProspect
    /// </summary>
    [DataContract]
    public partial class TpdmProspect :  IEquatable<TpdmProspect>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmProspect" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmProspect() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmProspect" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="prospectIdentifier">The identifier for the prospect. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="personReference">personReference.</param>
        /// <param name="teacherCandidateReference">teacherCandidateReference.</param>
        /// <param name="aid">aid.</param>
        /// <param name="applied">Indicator of whether the prospect applied for a position..</param>
        /// <param name="currentPosition">currentPosition.</param>
        /// <param name="disabilities">An unordered collection of prospectDisabilities. The disability condition(s) that best describes an individual&#39;s impairment..</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy..</param>
        /// <param name="electronicMailAddress">The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs. (required).</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student..</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="genderDescriptor">The gender with which a person associates..</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III)..</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;..</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="maidenName">The person&#39;s maiden name..</param>
        /// <param name="met">Indicator whether the person was met by a representative of the education organization..</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony..</param>
        /// <param name="notes">Additional notes about the prospect..</param>
        /// <param name="personalIdentificationDocuments">An unordered collection of prospectPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc..</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person..</param>
        /// <param name="preScreeningRating">The rating initially assigned to the prospect prior to an official screening..</param>
        /// <param name="prospectTypeDescriptor">Reflects the type of prospect, such as TPP Applicant, Hire, or Mentor Teacher..</param>
        /// <param name="qualifications">qualifications.</param>
        /// <param name="races">An unordered collection of prospectRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races..</param>
        /// <param name="recruitmentEvents">An unordered collection of prospectRecruitmentEvents. Reference(s) to events associated with the recruitment process..</param>
        /// <param name="referral">Indicator of whether the prospect was a referral..</param>
        /// <param name="referredBy">The person making the referral..</param>
        /// <param name="sexDescriptor">A person&#39;s gender..</param>
        /// <param name="socialMediaNetworkName">The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName..</param>
        /// <param name="socialMediaUserName">The user name of the person on social media..</param>
        /// <param name="telephones">An unordered collection of prospectTelephones. The 10-digit telephone number, including the area code, for the person..</param>
        /// <param name="touchpoints">An unordered collection of prospectTouchpoints. Content associated with different touchpoints with the prospect..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmProspect(string id = default(string), string prospectIdentifier = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiPersonReference personReference = default(EdFiPersonReference), TpdmTeacherCandidateReference teacherCandidateReference = default(TpdmTeacherCandidateReference), TpdmProspectAid aid = default(TpdmProspectAid), bool? applied = default(bool?), TpdmProspectCurrentPosition currentPosition = default(TpdmProspectCurrentPosition), List<TpdmProspectDisability> disabilities = default(List<TpdmProspectDisability>), bool? economicDisadvantaged = default(bool?), string electronicMailAddress = default(string), bool? firstGenerationStudent = default(bool?), string firstName = default(string), string genderDescriptor = default(string), string generationCodeSuffix = default(string), bool? hispanicLatinoEthnicity = default(bool?), string lastSurname = default(string), string maidenName = default(string), bool? met = default(bool?), string middleName = default(string), string notes = default(string), List<TpdmProspectPersonalIdentificationDocument> personalIdentificationDocuments = default(List<TpdmProspectPersonalIdentificationDocument>), string personalTitlePrefix = default(string), int? preScreeningRating = default(int?), string prospectTypeDescriptor = default(string), TpdmProspectQualifications qualifications = default(TpdmProspectQualifications), List<TpdmProspectRace> races = default(List<TpdmProspectRace>), List<TpdmProspectRecruitmentEvent> recruitmentEvents = default(List<TpdmProspectRecruitmentEvent>), bool? referral = default(bool?), string referredBy = default(string), string sexDescriptor = default(string), string socialMediaNetworkName = default(string), string socialMediaUserName = default(string), List<TpdmProspectTelephone> telephones = default(List<TpdmProspectTelephone>), List<TpdmProspectTouchpoint> touchpoints = default(List<TpdmProspectTouchpoint>), string etag = default(string))
        {
            // to ensure "prospectIdentifier" is required (not null)
            if (prospectIdentifier == null)
            {
                throw new InvalidDataException("prospectIdentifier is a required property for TpdmProspect and cannot be null");
            }
            else
            {
                this.ProspectIdentifier = prospectIdentifier;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for TpdmProspect and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            // to ensure "electronicMailAddress" is required (not null)
            if (electronicMailAddress == null)
            {
                throw new InvalidDataException("electronicMailAddress is a required property for TpdmProspect and cannot be null");
            }
            else
            {
                this.ElectronicMailAddress = electronicMailAddress;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for TpdmProspect and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastSurname" is required (not null)
            if (lastSurname == null)
            {
                throw new InvalidDataException("lastSurname is a required property for TpdmProspect and cannot be null");
            }
            else
            {
                this.LastSurname = lastSurname;
            }
            this.Id = id;
            this.PersonReference = personReference;
            this.TeacherCandidateReference = teacherCandidateReference;
            this.Aid = aid;
            this.Applied = applied;
            this.CurrentPosition = currentPosition;
            this.Disabilities = disabilities;
            this.EconomicDisadvantaged = economicDisadvantaged;
            this.FirstGenerationStudent = firstGenerationStudent;
            this.GenderDescriptor = genderDescriptor;
            this.GenerationCodeSuffix = generationCodeSuffix;
            this.HispanicLatinoEthnicity = hispanicLatinoEthnicity;
            this.MaidenName = maidenName;
            this.Met = met;
            this.MiddleName = middleName;
            this.Notes = notes;
            this.PersonalIdentificationDocuments = personalIdentificationDocuments;
            this.PersonalTitlePrefix = personalTitlePrefix;
            this.PreScreeningRating = preScreeningRating;
            this.ProspectTypeDescriptor = prospectTypeDescriptor;
            this.Qualifications = qualifications;
            this.Races = races;
            this.RecruitmentEvents = recruitmentEvents;
            this.Referral = referral;
            this.ReferredBy = referredBy;
            this.SexDescriptor = sexDescriptor;
            this.SocialMediaNetworkName = socialMediaNetworkName;
            this.SocialMediaUserName = socialMediaUserName;
            this.Telephones = telephones;
            this.Touchpoints = touchpoints;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The identifier for the prospect.
        /// </summary>
        /// <value>The identifier for the prospect.</value>
        [DataMember(Name="prospectIdentifier", EmitDefaultValue=false)]
        public string ProspectIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets PersonReference
        /// </summary>
        [DataMember(Name="personReference", EmitDefaultValue=false)]
        public EdFiPersonReference PersonReference { get; set; }

        /// <summary>
        /// Gets or Sets TeacherCandidateReference
        /// </summary>
        [DataMember(Name="teacherCandidateReference", EmitDefaultValue=false)]
        public TpdmTeacherCandidateReference TeacherCandidateReference { get; set; }

        /// <summary>
        /// Gets or Sets Aid
        /// </summary>
        [DataMember(Name="aid", EmitDefaultValue=false)]
        public TpdmProspectAid Aid { get; set; }

        /// <summary>
        /// Indicator of whether the prospect applied for a position.
        /// </summary>
        /// <value>Indicator of whether the prospect applied for a position.</value>
        [DataMember(Name="applied", EmitDefaultValue=false)]
        public bool? Applied { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPosition
        /// </summary>
        [DataMember(Name="currentPosition", EmitDefaultValue=false)]
        public TpdmProspectCurrentPosition CurrentPosition { get; set; }

        /// <summary>
        /// An unordered collection of prospectDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.
        /// </summary>
        /// <value>An unordered collection of prospectDisabilities. The disability condition(s) that best describes an individual&#39;s impairment.</value>
        [DataMember(Name="disabilities", EmitDefaultValue=false)]
        public List<TpdmProspectDisability> Disabilities { get; set; }

        /// <summary>
        /// An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.
        /// </summary>
        /// <value>An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.</value>
        [DataMember(Name="economicDisadvantaged", EmitDefaultValue=false)]
        public bool? EconomicDisadvantaged { get; set; }

        /// <summary>
        /// The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.
        /// </summary>
        /// <value>The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.</value>
        [DataMember(Name="electronicMailAddress", EmitDefaultValue=false)]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// Indicator of whether individual is a first generation college student.
        /// </summary>
        /// <value>Indicator of whether individual is a first generation college student.</value>
        [DataMember(Name="firstGenerationStudent", EmitDefaultValue=false)]
        public bool? FirstGenerationStudent { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The gender with which a person associates.
        /// </summary>
        /// <value>The gender with which a person associates.</value>
        [DataMember(Name="genderDescriptor", EmitDefaultValue=false)]
        public string GenderDescriptor { get; set; }

        /// <summary>
        /// An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).
        /// </summary>
        /// <value>An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III).</value>
        [DataMember(Name="generationCodeSuffix", EmitDefaultValue=false)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;.
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino\&quot;.</value>
        [DataMember(Name="hispanicLatinoEthnicity", EmitDefaultValue=false)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name="lastSurname", EmitDefaultValue=false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// The person&#39;s maiden name.
        /// </summary>
        /// <value>The person&#39;s maiden name.</value>
        [DataMember(Name="maidenName", EmitDefaultValue=false)]
        public string MaidenName { get; set; }

        /// <summary>
        /// Indicator whether the person was met by a representative of the education organization.
        /// </summary>
        /// <value>Indicator whether the person was met by a representative of the education organization.</value>
        [DataMember(Name="met", EmitDefaultValue=false)]
        public bool? Met { get; set; }

        /// <summary>
        /// A secondary name given to an individual at birth, baptism, or during another naming ceremony.
        /// </summary>
        /// <value>A secondary name given to an individual at birth, baptism, or during another naming ceremony.</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Additional notes about the prospect.
        /// </summary>
        /// <value>Additional notes about the prospect.</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// An unordered collection of prospectPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.
        /// </summary>
        /// <value>An unordered collection of prospectPersonalIdentificationDocuments. The documents presented as evident to verify one&#39;s personal identity; for example: drivers license, passport, birth certificate, etc.</value>
        [DataMember(Name="personalIdentificationDocuments", EmitDefaultValue=false)]
        public List<TpdmProspectPersonalIdentificationDocument> PersonalIdentificationDocuments { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the person.</value>
        [DataMember(Name="personalTitlePrefix", EmitDefaultValue=false)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// The rating initially assigned to the prospect prior to an official screening.
        /// </summary>
        /// <value>The rating initially assigned to the prospect prior to an official screening.</value>
        [DataMember(Name="preScreeningRating", EmitDefaultValue=false)]
        public int? PreScreeningRating { get; set; }

        /// <summary>
        /// Reflects the type of prospect, such as TPP Applicant, Hire, or Mentor Teacher.
        /// </summary>
        /// <value>Reflects the type of prospect, such as TPP Applicant, Hire, or Mentor Teacher.</value>
        [DataMember(Name="prospectTypeDescriptor", EmitDefaultValue=false)]
        public string ProspectTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets Qualifications
        /// </summary>
        [DataMember(Name="qualifications", EmitDefaultValue=false)]
        public TpdmProspectQualifications Qualifications { get; set; }

        /// <summary>
        /// An unordered collection of prospectRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.
        /// </summary>
        /// <value>An unordered collection of prospectRaces. The general racial category which most clearly reflects the individual&#39;s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.</value>
        [DataMember(Name="races", EmitDefaultValue=false)]
        public List<TpdmProspectRace> Races { get; set; }

        /// <summary>
        /// An unordered collection of prospectRecruitmentEvents. Reference(s) to events associated with the recruitment process.
        /// </summary>
        /// <value>An unordered collection of prospectRecruitmentEvents. Reference(s) to events associated with the recruitment process.</value>
        [DataMember(Name="recruitmentEvents", EmitDefaultValue=false)]
        public List<TpdmProspectRecruitmentEvent> RecruitmentEvents { get; set; }

        /// <summary>
        /// Indicator of whether the prospect was a referral.
        /// </summary>
        /// <value>Indicator of whether the prospect was a referral.</value>
        [DataMember(Name="referral", EmitDefaultValue=false)]
        public bool? Referral { get; set; }

        /// <summary>
        /// The person making the referral.
        /// </summary>
        /// <value>The person making the referral.</value>
        [DataMember(Name="referredBy", EmitDefaultValue=false)]
        public string ReferredBy { get; set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [DataMember(Name="sexDescriptor", EmitDefaultValue=false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName.
        /// </summary>
        /// <value>The social media network name (e.g., LinkedIn, Twitter, etc.) associated with the SocialMediaUserName.</value>
        [DataMember(Name="socialMediaNetworkName", EmitDefaultValue=false)]
        public string SocialMediaNetworkName { get; set; }

        /// <summary>
        /// The user name of the person on social media.
        /// </summary>
        /// <value>The user name of the person on social media.</value>
        [DataMember(Name="socialMediaUserName", EmitDefaultValue=false)]
        public string SocialMediaUserName { get; set; }

        /// <summary>
        /// An unordered collection of prospectTelephones. The 10-digit telephone number, including the area code, for the person.
        /// </summary>
        /// <value>An unordered collection of prospectTelephones. The 10-digit telephone number, including the area code, for the person.</value>
        [DataMember(Name="telephones", EmitDefaultValue=false)]
        public List<TpdmProspectTelephone> Telephones { get; set; }

        /// <summary>
        /// An unordered collection of prospectTouchpoints. Content associated with different touchpoints with the prospect.
        /// </summary>
        /// <value>An unordered collection of prospectTouchpoints. Content associated with different touchpoints with the prospect.</value>
        [DataMember(Name="touchpoints", EmitDefaultValue=false)]
        public List<TpdmProspectTouchpoint> Touchpoints { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmProspect {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProspectIdentifier: ").Append(ProspectIdentifier).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  PersonReference: ").Append(PersonReference).Append("\n");
            sb.Append("  TeacherCandidateReference: ").Append(TeacherCandidateReference).Append("\n");
            sb.Append("  Aid: ").Append(Aid).Append("\n");
            sb.Append("  Applied: ").Append(Applied).Append("\n");
            sb.Append("  CurrentPosition: ").Append(CurrentPosition).Append("\n");
            sb.Append("  Disabilities: ").Append(Disabilities).Append("\n");
            sb.Append("  EconomicDisadvantaged: ").Append(EconomicDisadvantaged).Append("\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  FirstGenerationStudent: ").Append(FirstGenerationStudent).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenderDescriptor: ").Append(GenderDescriptor).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  MaidenName: ").Append(MaidenName).Append("\n");
            sb.Append("  Met: ").Append(Met).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PersonalIdentificationDocuments: ").Append(PersonalIdentificationDocuments).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  PreScreeningRating: ").Append(PreScreeningRating).Append("\n");
            sb.Append("  ProspectTypeDescriptor: ").Append(ProspectTypeDescriptor).Append("\n");
            sb.Append("  Qualifications: ").Append(Qualifications).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  RecruitmentEvents: ").Append(RecruitmentEvents).Append("\n");
            sb.Append("  Referral: ").Append(Referral).Append("\n");
            sb.Append("  ReferredBy: ").Append(ReferredBy).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  SocialMediaNetworkName: ").Append(SocialMediaNetworkName).Append("\n");
            sb.Append("  SocialMediaUserName: ").Append(SocialMediaUserName).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  Touchpoints: ").Append(Touchpoints).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmProspect);
        }

        /// <summary>
        /// Returns true if TpdmProspect instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmProspect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmProspect input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProspectIdentifier == input.ProspectIdentifier ||
                    (this.ProspectIdentifier != null &&
                    this.ProspectIdentifier.Equals(input.ProspectIdentifier))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.PersonReference == input.PersonReference ||
                    (this.PersonReference != null &&
                    this.PersonReference.Equals(input.PersonReference))
                ) && 
                (
                    this.TeacherCandidateReference == input.TeacherCandidateReference ||
                    (this.TeacherCandidateReference != null &&
                    this.TeacherCandidateReference.Equals(input.TeacherCandidateReference))
                ) && 
                (
                    this.Aid == input.Aid ||
                    (this.Aid != null &&
                    this.Aid.Equals(input.Aid))
                ) && 
                (
                    this.Applied == input.Applied ||
                    (this.Applied != null &&
                    this.Applied.Equals(input.Applied))
                ) && 
                (
                    this.CurrentPosition == input.CurrentPosition ||
                    (this.CurrentPosition != null &&
                    this.CurrentPosition.Equals(input.CurrentPosition))
                ) && 
                (
                    this.Disabilities == input.Disabilities ||
                    this.Disabilities != null &&
                    this.Disabilities.SequenceEqual(input.Disabilities)
                ) && 
                (
                    this.EconomicDisadvantaged == input.EconomicDisadvantaged ||
                    (this.EconomicDisadvantaged != null &&
                    this.EconomicDisadvantaged.Equals(input.EconomicDisadvantaged))
                ) && 
                (
                    this.ElectronicMailAddress == input.ElectronicMailAddress ||
                    (this.ElectronicMailAddress != null &&
                    this.ElectronicMailAddress.Equals(input.ElectronicMailAddress))
                ) && 
                (
                    this.FirstGenerationStudent == input.FirstGenerationStudent ||
                    (this.FirstGenerationStudent != null &&
                    this.FirstGenerationStudent.Equals(input.FirstGenerationStudent))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GenderDescriptor == input.GenderDescriptor ||
                    (this.GenderDescriptor != null &&
                    this.GenderDescriptor.Equals(input.GenderDescriptor))
                ) && 
                (
                    this.GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (this.GenerationCodeSuffix != null &&
                    this.GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    (this.HispanicLatinoEthnicity != null &&
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity))
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.MaidenName == input.MaidenName ||
                    (this.MaidenName != null &&
                    this.MaidenName.Equals(input.MaidenName))
                ) && 
                (
                    this.Met == input.Met ||
                    (this.Met != null &&
                    this.Met.Equals(input.Met))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.PersonalIdentificationDocuments == input.PersonalIdentificationDocuments ||
                    this.PersonalIdentificationDocuments != null &&
                    this.PersonalIdentificationDocuments.SequenceEqual(input.PersonalIdentificationDocuments)
                ) && 
                (
                    this.PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (this.PersonalTitlePrefix != null &&
                    this.PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                ) && 
                (
                    this.PreScreeningRating == input.PreScreeningRating ||
                    (this.PreScreeningRating != null &&
                    this.PreScreeningRating.Equals(input.PreScreeningRating))
                ) && 
                (
                    this.ProspectTypeDescriptor == input.ProspectTypeDescriptor ||
                    (this.ProspectTypeDescriptor != null &&
                    this.ProspectTypeDescriptor.Equals(input.ProspectTypeDescriptor))
                ) && 
                (
                    this.Qualifications == input.Qualifications ||
                    (this.Qualifications != null &&
                    this.Qualifications.Equals(input.Qualifications))
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.RecruitmentEvents == input.RecruitmentEvents ||
                    this.RecruitmentEvents != null &&
                    this.RecruitmentEvents.SequenceEqual(input.RecruitmentEvents)
                ) && 
                (
                    this.Referral == input.Referral ||
                    (this.Referral != null &&
                    this.Referral.Equals(input.Referral))
                ) && 
                (
                    this.ReferredBy == input.ReferredBy ||
                    (this.ReferredBy != null &&
                    this.ReferredBy.Equals(input.ReferredBy))
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.SocialMediaNetworkName == input.SocialMediaNetworkName ||
                    (this.SocialMediaNetworkName != null &&
                    this.SocialMediaNetworkName.Equals(input.SocialMediaNetworkName))
                ) && 
                (
                    this.SocialMediaUserName == input.SocialMediaUserName ||
                    (this.SocialMediaUserName != null &&
                    this.SocialMediaUserName.Equals(input.SocialMediaUserName))
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.Touchpoints == input.Touchpoints ||
                    this.Touchpoints != null &&
                    this.Touchpoints.SequenceEqual(input.Touchpoints)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProspectIdentifier != null)
                    hashCode = hashCode * 59 + this.ProspectIdentifier.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.PersonReference != null)
                    hashCode = hashCode * 59 + this.PersonReference.GetHashCode();
                if (this.TeacherCandidateReference != null)
                    hashCode = hashCode * 59 + this.TeacherCandidateReference.GetHashCode();
                if (this.Aid != null)
                    hashCode = hashCode * 59 + this.Aid.GetHashCode();
                if (this.Applied != null)
                    hashCode = hashCode * 59 + this.Applied.GetHashCode();
                if (this.CurrentPosition != null)
                    hashCode = hashCode * 59 + this.CurrentPosition.GetHashCode();
                if (this.Disabilities != null)
                    hashCode = hashCode * 59 + this.Disabilities.GetHashCode();
                if (this.EconomicDisadvantaged != null)
                    hashCode = hashCode * 59 + this.EconomicDisadvantaged.GetHashCode();
                if (this.ElectronicMailAddress != null)
                    hashCode = hashCode * 59 + this.ElectronicMailAddress.GetHashCode();
                if (this.FirstGenerationStudent != null)
                    hashCode = hashCode * 59 + this.FirstGenerationStudent.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GenderDescriptor != null)
                    hashCode = hashCode * 59 + this.GenderDescriptor.GetHashCode();
                if (this.GenerationCodeSuffix != null)
                    hashCode = hashCode * 59 + this.GenerationCodeSuffix.GetHashCode();
                if (this.HispanicLatinoEthnicity != null)
                    hashCode = hashCode * 59 + this.HispanicLatinoEthnicity.GetHashCode();
                if (this.LastSurname != null)
                    hashCode = hashCode * 59 + this.LastSurname.GetHashCode();
                if (this.MaidenName != null)
                    hashCode = hashCode * 59 + this.MaidenName.GetHashCode();
                if (this.Met != null)
                    hashCode = hashCode * 59 + this.Met.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.PersonalIdentificationDocuments != null)
                    hashCode = hashCode * 59 + this.PersonalIdentificationDocuments.GetHashCode();
                if (this.PersonalTitlePrefix != null)
                    hashCode = hashCode * 59 + this.PersonalTitlePrefix.GetHashCode();
                if (this.PreScreeningRating != null)
                    hashCode = hashCode * 59 + this.PreScreeningRating.GetHashCode();
                if (this.ProspectTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.ProspectTypeDescriptor.GetHashCode();
                if (this.Qualifications != null)
                    hashCode = hashCode * 59 + this.Qualifications.GetHashCode();
                if (this.Races != null)
                    hashCode = hashCode * 59 + this.Races.GetHashCode();
                if (this.RecruitmentEvents != null)
                    hashCode = hashCode * 59 + this.RecruitmentEvents.GetHashCode();
                if (this.Referral != null)
                    hashCode = hashCode * 59 + this.Referral.GetHashCode();
                if (this.ReferredBy != null)
                    hashCode = hashCode * 59 + this.ReferredBy.GetHashCode();
                if (this.SexDescriptor != null)
                    hashCode = hashCode * 59 + this.SexDescriptor.GetHashCode();
                if (this.SocialMediaNetworkName != null)
                    hashCode = hashCode * 59 + this.SocialMediaNetworkName.GetHashCode();
                if (this.SocialMediaUserName != null)
                    hashCode = hashCode * 59 + this.SocialMediaUserName.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                if (this.Touchpoints != null)
                    hashCode = hashCode * 59 + this.Touchpoints.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
