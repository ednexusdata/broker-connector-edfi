/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmApplication
    /// </summary>
    [DataContract]
    public partial class TpdmApplication :  IEquatable<TpdmApplication>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmApplication() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmApplication" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="applicationIdentifier">Identifier assigned to the application for an open staff position. (required).</param>
        /// <param name="applicantReference">applicantReference (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="academicSubjectDescriptor">The academic subject for which the application is made..</param>
        /// <param name="acceptedDate">The date of job acceptance, if offered..</param>
        /// <param name="applicationDate">The month, day, and year the application was submitted. (required).</param>
        /// <param name="applicationSourceDescriptor">Specifies the source for the application (e.g., Job fair, website, referral)..</param>
        /// <param name="applicationStatusDescriptor">Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.). (required).</param>
        /// <param name="currentEmployee">Indicator as to whether the applicant is a current employee of the school district..</param>
        /// <param name="firstContactDate">Date applicant was first contacted after submitting application..</param>
        /// <param name="gradePointAverages">An unordered collection of applicationGradePointAverages. Data that provides information on a measure of average performance in a group of courses taken by an individual..</param>
        /// <param name="highestCompletedLevelOfEducationDescriptor">The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received)..</param>
        /// <param name="highlyQualifiedAcademicSubjectDescriptor">The academic subject(s) in which the staff is deemed to be \&quot;highly qualified\&quot;..</param>
        /// <param name="highlyQualifiedTeacher">An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught..</param>
        /// <param name="highNeedsAcademicSubjectDescriptor">The high need academic subject for the application, if any..</param>
        /// <param name="hireStatusDescriptor">Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired)..</param>
        /// <param name="hiringSourceDescriptor">The source for the application (e.g.,job fair, website, referral, etc.)..</param>
        /// <param name="openStaffPositions">An unordered collection of applicationOpenStaffPositions. The open staff position(s) associated with the application..</param>
        /// <param name="scoreResults">An unordered collection of applicationScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc..</param>
        /// <param name="terms">An unordered collection of applicationTerms. The intended term of enrollment for which the application is being submitted..</param>
        /// <param name="withdrawDate">The date the application was withdrawn by the applicant..</param>
        /// <param name="withdrawReasonDescriptor">Reason applicant withdrew application..</param>
        /// <param name="yearsOfPriorProfessionalExperience">The total number of years that an individual has previously held a similar professional position in one or more education institutions..</param>
        /// <param name="yearsOfPriorTeachingExperience">The total number of years that an individual has previously held a teaching position in one or more education institutions..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmApplication(string id = default(string), string applicationIdentifier = default(string), TpdmApplicantReference applicantReference = default(TpdmApplicantReference), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), string academicSubjectDescriptor = default(string), DateTime? acceptedDate = default(DateTime?), DateTime? applicationDate = default(DateTime?), string applicationSourceDescriptor = default(string), string applicationStatusDescriptor = default(string), bool? currentEmployee = default(bool?), DateTime? firstContactDate = default(DateTime?), List<TpdmApplicationGradePointAverage> gradePointAverages = default(List<TpdmApplicationGradePointAverage>), string highestCompletedLevelOfEducationDescriptor = default(string), string highlyQualifiedAcademicSubjectDescriptor = default(string), bool? highlyQualifiedTeacher = default(bool?), string highNeedsAcademicSubjectDescriptor = default(string), string hireStatusDescriptor = default(string), string hiringSourceDescriptor = default(string), List<TpdmApplicationOpenStaffPosition> openStaffPositions = default(List<TpdmApplicationOpenStaffPosition>), List<TpdmApplicationScoreResult> scoreResults = default(List<TpdmApplicationScoreResult>), List<TpdmApplicationTerm> terms = default(List<TpdmApplicationTerm>), DateTime? withdrawDate = default(DateTime?), string withdrawReasonDescriptor = default(string), double? yearsOfPriorProfessionalExperience = default(double?), double? yearsOfPriorTeachingExperience = default(double?), string etag = default(string))
        {
            // to ensure "applicationIdentifier" is required (not null)
            if (applicationIdentifier == null)
            {
                throw new InvalidDataException("applicationIdentifier is a required property for TpdmApplication and cannot be null");
            }
            else
            {
                this.ApplicationIdentifier = applicationIdentifier;
            }
            // to ensure "applicantReference" is required (not null)
            if (applicantReference == null)
            {
                throw new InvalidDataException("applicantReference is a required property for TpdmApplication and cannot be null");
            }
            else
            {
                this.ApplicantReference = applicantReference;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for TpdmApplication and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            // to ensure "applicationDate" is required (not null)
            if (applicationDate == null)
            {
                throw new InvalidDataException("applicationDate is a required property for TpdmApplication and cannot be null");
            }
            else
            {
                this.ApplicationDate = applicationDate;
            }
            // to ensure "applicationStatusDescriptor" is required (not null)
            if (applicationStatusDescriptor == null)
            {
                throw new InvalidDataException("applicationStatusDescriptor is a required property for TpdmApplication and cannot be null");
            }
            else
            {
                this.ApplicationStatusDescriptor = applicationStatusDescriptor;
            }
            this.Id = id;
            this.AcademicSubjectDescriptor = academicSubjectDescriptor;
            this.AcceptedDate = acceptedDate;
            this.ApplicationSourceDescriptor = applicationSourceDescriptor;
            this.CurrentEmployee = currentEmployee;
            this.FirstContactDate = firstContactDate;
            this.GradePointAverages = gradePointAverages;
            this.HighestCompletedLevelOfEducationDescriptor = highestCompletedLevelOfEducationDescriptor;
            this.HighlyQualifiedAcademicSubjectDescriptor = highlyQualifiedAcademicSubjectDescriptor;
            this.HighlyQualifiedTeacher = highlyQualifiedTeacher;
            this.HighNeedsAcademicSubjectDescriptor = highNeedsAcademicSubjectDescriptor;
            this.HireStatusDescriptor = hireStatusDescriptor;
            this.HiringSourceDescriptor = hiringSourceDescriptor;
            this.OpenStaffPositions = openStaffPositions;
            this.ScoreResults = scoreResults;
            this.Terms = terms;
            this.WithdrawDate = withdrawDate;
            this.WithdrawReasonDescriptor = withdrawReasonDescriptor;
            this.YearsOfPriorProfessionalExperience = yearsOfPriorProfessionalExperience;
            this.YearsOfPriorTeachingExperience = yearsOfPriorTeachingExperience;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier assigned to the application for an open staff position.
        /// </summary>
        /// <value>Identifier assigned to the application for an open staff position.</value>
        [DataMember(Name="applicationIdentifier", EmitDefaultValue=false)]
        public string ApplicationIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ApplicantReference
        /// </summary>
        [DataMember(Name="applicantReference", EmitDefaultValue=false)]
        public TpdmApplicantReference ApplicantReference { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// The academic subject for which the application is made.
        /// </summary>
        /// <value>The academic subject for which the application is made.</value>
        [DataMember(Name="academicSubjectDescriptor", EmitDefaultValue=false)]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// The date of job acceptance, if offered.
        /// </summary>
        /// <value>The date of job acceptance, if offered.</value>
        [DataMember(Name="acceptedDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? AcceptedDate { get; set; }

        /// <summary>
        /// The month, day, and year the application was submitted.
        /// </summary>
        /// <value>The month, day, and year the application was submitted.</value>
        [DataMember(Name="applicationDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ApplicationDate { get; set; }

        /// <summary>
        /// Specifies the source for the application (e.g., Job fair, website, referral).
        /// </summary>
        /// <value>Specifies the source for the application (e.g., Job fair, website, referral).</value>
        [DataMember(Name="applicationSourceDescriptor", EmitDefaultValue=false)]
        public string ApplicationSourceDescriptor { get; set; }

        /// <summary>
        /// Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.).
        /// </summary>
        /// <value>Indicates the current status of the application (e.g., received, phone screen, interview, awaiting decision, etc.).</value>
        [DataMember(Name="applicationStatusDescriptor", EmitDefaultValue=false)]
        public string ApplicationStatusDescriptor { get; set; }

        /// <summary>
        /// Indicator as to whether the applicant is a current employee of the school district.
        /// </summary>
        /// <value>Indicator as to whether the applicant is a current employee of the school district.</value>
        [DataMember(Name="currentEmployee", EmitDefaultValue=false)]
        public bool? CurrentEmployee { get; set; }

        /// <summary>
        /// Date applicant was first contacted after submitting application.
        /// </summary>
        /// <value>Date applicant was first contacted after submitting application.</value>
        [DataMember(Name="firstContactDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? FirstContactDate { get; set; }

        /// <summary>
        /// An unordered collection of applicationGradePointAverages. Data that provides information on a measure of average performance in a group of courses taken by an individual.
        /// </summary>
        /// <value>An unordered collection of applicationGradePointAverages. Data that provides information on a measure of average performance in a group of courses taken by an individual.</value>
        [DataMember(Name="gradePointAverages", EmitDefaultValue=false)]
        public List<TpdmApplicationGradePointAverage> GradePointAverages { get; set; }

        /// <summary>
        /// The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).
        /// </summary>
        /// <value>The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).</value>
        [DataMember(Name="highestCompletedLevelOfEducationDescriptor", EmitDefaultValue=false)]
        public string HighestCompletedLevelOfEducationDescriptor { get; set; }

        /// <summary>
        /// The academic subject(s) in which the staff is deemed to be \&quot;highly qualified\&quot;.
        /// </summary>
        /// <value>The academic subject(s) in which the staff is deemed to be \&quot;highly qualified\&quot;.</value>
        [DataMember(Name="highlyQualifiedAcademicSubjectDescriptor", EmitDefaultValue=false)]
        public string HighlyQualifiedAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.
        /// </summary>
        /// <value>An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.</value>
        [DataMember(Name="highlyQualifiedTeacher", EmitDefaultValue=false)]
        public bool? HighlyQualifiedTeacher { get; set; }

        /// <summary>
        /// The high need academic subject for the application, if any.
        /// </summary>
        /// <value>The high need academic subject for the application, if any.</value>
        [DataMember(Name="highNeedsAcademicSubjectDescriptor", EmitDefaultValue=false)]
        public string HighNeedsAcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired).
        /// </summary>
        /// <value>Indicates the current status of the application for hire (e.g., applied, recommended, rejected, exited, offered, hired).</value>
        [DataMember(Name="hireStatusDescriptor", EmitDefaultValue=false)]
        public string HireStatusDescriptor { get; set; }

        /// <summary>
        /// The source for the application (e.g.,job fair, website, referral, etc.).
        /// </summary>
        /// <value>The source for the application (e.g.,job fair, website, referral, etc.).</value>
        [DataMember(Name="hiringSourceDescriptor", EmitDefaultValue=false)]
        public string HiringSourceDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of applicationOpenStaffPositions. The open staff position(s) associated with the application.
        /// </summary>
        /// <value>An unordered collection of applicationOpenStaffPositions. The open staff position(s) associated with the application.</value>
        [DataMember(Name="openStaffPositions", EmitDefaultValue=false)]
        public List<TpdmApplicationOpenStaffPosition> OpenStaffPositions { get; set; }

        /// <summary>
        /// An unordered collection of applicationScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.
        /// </summary>
        /// <value>An unordered collection of applicationScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.</value>
        [DataMember(Name="scoreResults", EmitDefaultValue=false)]
        public List<TpdmApplicationScoreResult> ScoreResults { get; set; }

        /// <summary>
        /// An unordered collection of applicationTerms. The intended term of enrollment for which the application is being submitted.
        /// </summary>
        /// <value>An unordered collection of applicationTerms. The intended term of enrollment for which the application is being submitted.</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public List<TpdmApplicationTerm> Terms { get; set; }

        /// <summary>
        /// The date the application was withdrawn by the applicant.
        /// </summary>
        /// <value>The date the application was withdrawn by the applicant.</value>
        [DataMember(Name="withdrawDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? WithdrawDate { get; set; }

        /// <summary>
        /// Reason applicant withdrew application.
        /// </summary>
        /// <value>Reason applicant withdrew application.</value>
        [DataMember(Name="withdrawReasonDescriptor", EmitDefaultValue=false)]
        public string WithdrawReasonDescriptor { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a similar professional position in one or more education institutions.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a similar professional position in one or more education institutions.</value>
        [DataMember(Name="yearsOfPriorProfessionalExperience", EmitDefaultValue=false)]
        public double? YearsOfPriorProfessionalExperience { get; set; }

        /// <summary>
        /// The total number of years that an individual has previously held a teaching position in one or more education institutions.
        /// </summary>
        /// <value>The total number of years that an individual has previously held a teaching position in one or more education institutions.</value>
        [DataMember(Name="yearsOfPriorTeachingExperience", EmitDefaultValue=false)]
        public double? YearsOfPriorTeachingExperience { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmApplication {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApplicationIdentifier: ").Append(ApplicationIdentifier).Append("\n");
            sb.Append("  ApplicantReference: ").Append(ApplicantReference).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            sb.Append("  AcceptedDate: ").Append(AcceptedDate).Append("\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  ApplicationSourceDescriptor: ").Append(ApplicationSourceDescriptor).Append("\n");
            sb.Append("  ApplicationStatusDescriptor: ").Append(ApplicationStatusDescriptor).Append("\n");
            sb.Append("  CurrentEmployee: ").Append(CurrentEmployee).Append("\n");
            sb.Append("  FirstContactDate: ").Append(FirstContactDate).Append("\n");
            sb.Append("  GradePointAverages: ").Append(GradePointAverages).Append("\n");
            sb.Append("  HighestCompletedLevelOfEducationDescriptor: ").Append(HighestCompletedLevelOfEducationDescriptor).Append("\n");
            sb.Append("  HighlyQualifiedAcademicSubjectDescriptor: ").Append(HighlyQualifiedAcademicSubjectDescriptor).Append("\n");
            sb.Append("  HighlyQualifiedTeacher: ").Append(HighlyQualifiedTeacher).Append("\n");
            sb.Append("  HighNeedsAcademicSubjectDescriptor: ").Append(HighNeedsAcademicSubjectDescriptor).Append("\n");
            sb.Append("  HireStatusDescriptor: ").Append(HireStatusDescriptor).Append("\n");
            sb.Append("  HiringSourceDescriptor: ").Append(HiringSourceDescriptor).Append("\n");
            sb.Append("  OpenStaffPositions: ").Append(OpenStaffPositions).Append("\n");
            sb.Append("  ScoreResults: ").Append(ScoreResults).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  WithdrawDate: ").Append(WithdrawDate).Append("\n");
            sb.Append("  WithdrawReasonDescriptor: ").Append(WithdrawReasonDescriptor).Append("\n");
            sb.Append("  YearsOfPriorProfessionalExperience: ").Append(YearsOfPriorProfessionalExperience).Append("\n");
            sb.Append("  YearsOfPriorTeachingExperience: ").Append(YearsOfPriorTeachingExperience).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmApplication);
        }

        /// <summary>
        /// Returns true if TpdmApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmApplication input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ApplicationIdentifier == input.ApplicationIdentifier ||
                    (this.ApplicationIdentifier != null &&
                    this.ApplicationIdentifier.Equals(input.ApplicationIdentifier))
                ) && 
                (
                    this.ApplicantReference == input.ApplicantReference ||
                    (this.ApplicantReference != null &&
                    this.ApplicantReference.Equals(input.ApplicantReference))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.AcademicSubjectDescriptor == input.AcademicSubjectDescriptor ||
                    (this.AcademicSubjectDescriptor != null &&
                    this.AcademicSubjectDescriptor.Equals(input.AcademicSubjectDescriptor))
                ) && 
                (
                    this.AcceptedDate == input.AcceptedDate ||
                    (this.AcceptedDate != null &&
                    this.AcceptedDate.Equals(input.AcceptedDate))
                ) && 
                (
                    this.ApplicationDate == input.ApplicationDate ||
                    (this.ApplicationDate != null &&
                    this.ApplicationDate.Equals(input.ApplicationDate))
                ) && 
                (
                    this.ApplicationSourceDescriptor == input.ApplicationSourceDescriptor ||
                    (this.ApplicationSourceDescriptor != null &&
                    this.ApplicationSourceDescriptor.Equals(input.ApplicationSourceDescriptor))
                ) && 
                (
                    this.ApplicationStatusDescriptor == input.ApplicationStatusDescriptor ||
                    (this.ApplicationStatusDescriptor != null &&
                    this.ApplicationStatusDescriptor.Equals(input.ApplicationStatusDescriptor))
                ) && 
                (
                    this.CurrentEmployee == input.CurrentEmployee ||
                    (this.CurrentEmployee != null &&
                    this.CurrentEmployee.Equals(input.CurrentEmployee))
                ) && 
                (
                    this.FirstContactDate == input.FirstContactDate ||
                    (this.FirstContactDate != null &&
                    this.FirstContactDate.Equals(input.FirstContactDate))
                ) && 
                (
                    this.GradePointAverages == input.GradePointAverages ||
                    this.GradePointAverages != null &&
                    this.GradePointAverages.SequenceEqual(input.GradePointAverages)
                ) && 
                (
                    this.HighestCompletedLevelOfEducationDescriptor == input.HighestCompletedLevelOfEducationDescriptor ||
                    (this.HighestCompletedLevelOfEducationDescriptor != null &&
                    this.HighestCompletedLevelOfEducationDescriptor.Equals(input.HighestCompletedLevelOfEducationDescriptor))
                ) && 
                (
                    this.HighlyQualifiedAcademicSubjectDescriptor == input.HighlyQualifiedAcademicSubjectDescriptor ||
                    (this.HighlyQualifiedAcademicSubjectDescriptor != null &&
                    this.HighlyQualifiedAcademicSubjectDescriptor.Equals(input.HighlyQualifiedAcademicSubjectDescriptor))
                ) && 
                (
                    this.HighlyQualifiedTeacher == input.HighlyQualifiedTeacher ||
                    (this.HighlyQualifiedTeacher != null &&
                    this.HighlyQualifiedTeacher.Equals(input.HighlyQualifiedTeacher))
                ) && 
                (
                    this.HighNeedsAcademicSubjectDescriptor == input.HighNeedsAcademicSubjectDescriptor ||
                    (this.HighNeedsAcademicSubjectDescriptor != null &&
                    this.HighNeedsAcademicSubjectDescriptor.Equals(input.HighNeedsAcademicSubjectDescriptor))
                ) && 
                (
                    this.HireStatusDescriptor == input.HireStatusDescriptor ||
                    (this.HireStatusDescriptor != null &&
                    this.HireStatusDescriptor.Equals(input.HireStatusDescriptor))
                ) && 
                (
                    this.HiringSourceDescriptor == input.HiringSourceDescriptor ||
                    (this.HiringSourceDescriptor != null &&
                    this.HiringSourceDescriptor.Equals(input.HiringSourceDescriptor))
                ) && 
                (
                    this.OpenStaffPositions == input.OpenStaffPositions ||
                    this.OpenStaffPositions != null &&
                    this.OpenStaffPositions.SequenceEqual(input.OpenStaffPositions)
                ) && 
                (
                    this.ScoreResults == input.ScoreResults ||
                    this.ScoreResults != null &&
                    this.ScoreResults.SequenceEqual(input.ScoreResults)
                ) && 
                (
                    this.Terms == input.Terms ||
                    this.Terms != null &&
                    this.Terms.SequenceEqual(input.Terms)
                ) && 
                (
                    this.WithdrawDate == input.WithdrawDate ||
                    (this.WithdrawDate != null &&
                    this.WithdrawDate.Equals(input.WithdrawDate))
                ) && 
                (
                    this.WithdrawReasonDescriptor == input.WithdrawReasonDescriptor ||
                    (this.WithdrawReasonDescriptor != null &&
                    this.WithdrawReasonDescriptor.Equals(input.WithdrawReasonDescriptor))
                ) && 
                (
                    this.YearsOfPriorProfessionalExperience == input.YearsOfPriorProfessionalExperience ||
                    (this.YearsOfPriorProfessionalExperience != null &&
                    this.YearsOfPriorProfessionalExperience.Equals(input.YearsOfPriorProfessionalExperience))
                ) && 
                (
                    this.YearsOfPriorTeachingExperience == input.YearsOfPriorTeachingExperience ||
                    (this.YearsOfPriorTeachingExperience != null &&
                    this.YearsOfPriorTeachingExperience.Equals(input.YearsOfPriorTeachingExperience))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ApplicationIdentifier != null)
                    hashCode = hashCode * 59 + this.ApplicationIdentifier.GetHashCode();
                if (this.ApplicantReference != null)
                    hashCode = hashCode * 59 + this.ApplicantReference.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.AcademicSubjectDescriptor != null)
                    hashCode = hashCode * 59 + this.AcademicSubjectDescriptor.GetHashCode();
                if (this.AcceptedDate != null)
                    hashCode = hashCode * 59 + this.AcceptedDate.GetHashCode();
                if (this.ApplicationDate != null)
                    hashCode = hashCode * 59 + this.ApplicationDate.GetHashCode();
                if (this.ApplicationSourceDescriptor != null)
                    hashCode = hashCode * 59 + this.ApplicationSourceDescriptor.GetHashCode();
                if (this.ApplicationStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.ApplicationStatusDescriptor.GetHashCode();
                if (this.CurrentEmployee != null)
                    hashCode = hashCode * 59 + this.CurrentEmployee.GetHashCode();
                if (this.FirstContactDate != null)
                    hashCode = hashCode * 59 + this.FirstContactDate.GetHashCode();
                if (this.GradePointAverages != null)
                    hashCode = hashCode * 59 + this.GradePointAverages.GetHashCode();
                if (this.HighestCompletedLevelOfEducationDescriptor != null)
                    hashCode = hashCode * 59 + this.HighestCompletedLevelOfEducationDescriptor.GetHashCode();
                if (this.HighlyQualifiedAcademicSubjectDescriptor != null)
                    hashCode = hashCode * 59 + this.HighlyQualifiedAcademicSubjectDescriptor.GetHashCode();
                if (this.HighlyQualifiedTeacher != null)
                    hashCode = hashCode * 59 + this.HighlyQualifiedTeacher.GetHashCode();
                if (this.HighNeedsAcademicSubjectDescriptor != null)
                    hashCode = hashCode * 59 + this.HighNeedsAcademicSubjectDescriptor.GetHashCode();
                if (this.HireStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.HireStatusDescriptor.GetHashCode();
                if (this.HiringSourceDescriptor != null)
                    hashCode = hashCode * 59 + this.HiringSourceDescriptor.GetHashCode();
                if (this.OpenStaffPositions != null)
                    hashCode = hashCode * 59 + this.OpenStaffPositions.GetHashCode();
                if (this.ScoreResults != null)
                    hashCode = hashCode * 59 + this.ScoreResults.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.WithdrawDate != null)
                    hashCode = hashCode * 59 + this.WithdrawDate.GetHashCode();
                if (this.WithdrawReasonDescriptor != null)
                    hashCode = hashCode * 59 + this.WithdrawReasonDescriptor.GetHashCode();
                if (this.YearsOfPriorProfessionalExperience != null)
                    hashCode = hashCode * 59 + this.YearsOfPriorProfessionalExperience.GetHashCode();
                if (this.YearsOfPriorTeachingExperience != null)
                    hashCode = hashCode * 59 + this.YearsOfPriorTeachingExperience.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
