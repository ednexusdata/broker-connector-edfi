/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmPerformanceEvaluation
    /// </summary>
    [DataContract]
    public partial class TpdmPerformanceEvaluation :  IEquatable<TpdmPerformanceEvaluation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmPerformanceEvaluation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmPerformanceEvaluation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmPerformanceEvaluation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation (e.g., BOY, MOY, EOY, Summer). (required).</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (required).</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type (e.g., walkthrough, summative) of performance evaluation conducted. (required).</param>
        /// <param name="termDescriptor">The term for the session during the school year. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="academicSubjectDescriptor">The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of a performance evaluation..</param>
        /// <param name="gradeLevels">An unordered collection of performanceEvaluationGradeLevels. The grade levels involved with the performance evaluation..</param>
        /// <param name="programGateways">An unordered collection of performanceEvaluationProgramGateways. Identifies the program gateway that may be associated for continuation in the program..</param>
        /// <param name="ratingLevels">An unordered collection of performanceEvaluationRatingLevels. The descriptive level(s) of ratings (cut scores) for the evaluation..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmPerformanceEvaluation(string id = default(string), string evaluationPeriodDescriptor = default(string), string performanceEvaluationTitle = default(string), string performanceEvaluationTypeDescriptor = default(string), string termDescriptor = default(string), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), string academicSubjectDescriptor = default(string), List<TpdmPerformanceEvaluationGradeLevel> gradeLevels = default(List<TpdmPerformanceEvaluationGradeLevel>), List<TpdmPerformanceEvaluationProgramGateway> programGateways = default(List<TpdmPerformanceEvaluationProgramGateway>), List<TpdmPerformanceEvaluationRatingLevel> ratingLevels = default(List<TpdmPerformanceEvaluationRatingLevel>), string etag = default(string))
        {
            // to ensure "evaluationPeriodDescriptor" is required (not null)
            if (evaluationPeriodDescriptor == null)
            {
                throw new InvalidDataException("evaluationPeriodDescriptor is a required property for TpdmPerformanceEvaluation and cannot be null");
            }
            else
            {
                this.EvaluationPeriodDescriptor = evaluationPeriodDescriptor;
            }
            // to ensure "performanceEvaluationTitle" is required (not null)
            if (performanceEvaluationTitle == null)
            {
                throw new InvalidDataException("performanceEvaluationTitle is a required property for TpdmPerformanceEvaluation and cannot be null");
            }
            else
            {
                this.PerformanceEvaluationTitle = performanceEvaluationTitle;
            }
            // to ensure "performanceEvaluationTypeDescriptor" is required (not null)
            if (performanceEvaluationTypeDescriptor == null)
            {
                throw new InvalidDataException("performanceEvaluationTypeDescriptor is a required property for TpdmPerformanceEvaluation and cannot be null");
            }
            else
            {
                this.PerformanceEvaluationTypeDescriptor = performanceEvaluationTypeDescriptor;
            }
            // to ensure "termDescriptor" is required (not null)
            if (termDescriptor == null)
            {
                throw new InvalidDataException("termDescriptor is a required property for TpdmPerformanceEvaluation and cannot be null");
            }
            else
            {
                this.TermDescriptor = termDescriptor;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for TpdmPerformanceEvaluation and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new InvalidDataException("schoolYearTypeReference is a required property for TpdmPerformanceEvaluation and cannot be null");
            }
            else
            {
                this.SchoolYearTypeReference = schoolYearTypeReference;
            }
            this.Id = id;
            this.AcademicSubjectDescriptor = academicSubjectDescriptor;
            this.GradeLevels = gradeLevels;
            this.ProgramGateways = programGateways;
            this.RatingLevels = ratingLevels;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The period for the evaluation (e.g., BOY, MOY, EOY, Summer).
        /// </summary>
        /// <value>The period for the evaluation (e.g., BOY, MOY, EOY, Summer).</value>
        [DataMember(Name="evaluationPeriodDescriptor", EmitDefaultValue=false)]
        public string EvaluationPeriodDescriptor { get; set; }

        /// <summary>
        /// An assigned unique identifier for the performance evaluation.
        /// </summary>
        /// <value>An assigned unique identifier for the performance evaluation.</value>
        [DataMember(Name="performanceEvaluationTitle", EmitDefaultValue=false)]
        public string PerformanceEvaluationTitle { get; set; }

        /// <summary>
        /// The type (e.g., walkthrough, summative) of performance evaluation conducted.
        /// </summary>
        /// <value>The type (e.g., walkthrough, summative) of performance evaluation conducted.</value>
        [DataMember(Name="performanceEvaluationTypeDescriptor", EmitDefaultValue=false)]
        public string PerformanceEvaluationTypeDescriptor { get; set; }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        /// <value>The term for the session during the school year.</value>
        [DataMember(Name="termDescriptor", EmitDefaultValue=false)]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of a performance evaluation.
        /// </summary>
        /// <value>The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of a performance evaluation.</value>
        [DataMember(Name="academicSubjectDescriptor", EmitDefaultValue=false)]
        public string AcademicSubjectDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of performanceEvaluationGradeLevels. The grade levels involved with the performance evaluation.
        /// </summary>
        /// <value>An unordered collection of performanceEvaluationGradeLevels. The grade levels involved with the performance evaluation.</value>
        [DataMember(Name="gradeLevels", EmitDefaultValue=false)]
        public List<TpdmPerformanceEvaluationGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// An unordered collection of performanceEvaluationProgramGateways. Identifies the program gateway that may be associated for continuation in the program.
        /// </summary>
        /// <value>An unordered collection of performanceEvaluationProgramGateways. Identifies the program gateway that may be associated for continuation in the program.</value>
        [DataMember(Name="programGateways", EmitDefaultValue=false)]
        public List<TpdmPerformanceEvaluationProgramGateway> ProgramGateways { get; set; }

        /// <summary>
        /// An unordered collection of performanceEvaluationRatingLevels. The descriptive level(s) of ratings (cut scores) for the evaluation.
        /// </summary>
        /// <value>An unordered collection of performanceEvaluationRatingLevels. The descriptive level(s) of ratings (cut scores) for the evaluation.</value>
        [DataMember(Name="ratingLevels", EmitDefaultValue=false)]
        public List<TpdmPerformanceEvaluationRatingLevel> RatingLevels { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmPerformanceEvaluation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EvaluationPeriodDescriptor: ").Append(EvaluationPeriodDescriptor).Append("\n");
            sb.Append("  PerformanceEvaluationTitle: ").Append(PerformanceEvaluationTitle).Append("\n");
            sb.Append("  PerformanceEvaluationTypeDescriptor: ").Append(PerformanceEvaluationTypeDescriptor).Append("\n");
            sb.Append("  TermDescriptor: ").Append(TermDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  AcademicSubjectDescriptor: ").Append(AcademicSubjectDescriptor).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  ProgramGateways: ").Append(ProgramGateways).Append("\n");
            sb.Append("  RatingLevels: ").Append(RatingLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmPerformanceEvaluation);
        }

        /// <summary>
        /// Returns true if TpdmPerformanceEvaluation instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmPerformanceEvaluation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmPerformanceEvaluation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EvaluationPeriodDescriptor == input.EvaluationPeriodDescriptor ||
                    (this.EvaluationPeriodDescriptor != null &&
                    this.EvaluationPeriodDescriptor.Equals(input.EvaluationPeriodDescriptor))
                ) && 
                (
                    this.PerformanceEvaluationTitle == input.PerformanceEvaluationTitle ||
                    (this.PerformanceEvaluationTitle != null &&
                    this.PerformanceEvaluationTitle.Equals(input.PerformanceEvaluationTitle))
                ) && 
                (
                    this.PerformanceEvaluationTypeDescriptor == input.PerformanceEvaluationTypeDescriptor ||
                    (this.PerformanceEvaluationTypeDescriptor != null &&
                    this.PerformanceEvaluationTypeDescriptor.Equals(input.PerformanceEvaluationTypeDescriptor))
                ) && 
                (
                    this.TermDescriptor == input.TermDescriptor ||
                    (this.TermDescriptor != null &&
                    this.TermDescriptor.Equals(input.TermDescriptor))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.AcademicSubjectDescriptor == input.AcademicSubjectDescriptor ||
                    (this.AcademicSubjectDescriptor != null &&
                    this.AcademicSubjectDescriptor.Equals(input.AcademicSubjectDescriptor))
                ) && 
                (
                    this.GradeLevels == input.GradeLevels ||
                    this.GradeLevels != null &&
                    this.GradeLevels.SequenceEqual(input.GradeLevels)
                ) && 
                (
                    this.ProgramGateways == input.ProgramGateways ||
                    this.ProgramGateways != null &&
                    this.ProgramGateways.SequenceEqual(input.ProgramGateways)
                ) && 
                (
                    this.RatingLevels == input.RatingLevels ||
                    this.RatingLevels != null &&
                    this.RatingLevels.SequenceEqual(input.RatingLevels)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EvaluationPeriodDescriptor != null)
                    hashCode = hashCode * 59 + this.EvaluationPeriodDescriptor.GetHashCode();
                if (this.PerformanceEvaluationTitle != null)
                    hashCode = hashCode * 59 + this.PerformanceEvaluationTitle.GetHashCode();
                if (this.PerformanceEvaluationTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.PerformanceEvaluationTypeDescriptor.GetHashCode();
                if (this.TermDescriptor != null)
                    hashCode = hashCode * 59 + this.TermDescriptor.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.AcademicSubjectDescriptor != null)
                    hashCode = hashCode * 59 + this.AcademicSubjectDescriptor.GetHashCode();
                if (this.GradeLevels != null)
                    hashCode = hashCode * 59 + this.GradeLevels.GetHashCode();
                if (this.ProgramGateways != null)
                    hashCode = hashCode * 59 + this.ProgramGateways.GetHashCode();
                if (this.RatingLevels != null)
                    hashCode = hashCode * 59 + this.RatingLevels.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
