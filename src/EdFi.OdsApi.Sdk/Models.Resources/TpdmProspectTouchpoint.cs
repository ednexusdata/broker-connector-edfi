/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmProspectTouchpoint
    /// </summary>
    [DataContract]
    public partial class TpdmProspectTouchpoint :  IEquatable<TpdmProspectTouchpoint>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmProspectTouchpoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmProspectTouchpoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmProspectTouchpoint" /> class.
        /// </summary>
        /// <param name="touchpointContent">The content associated with or an artifact from the touchpoint. (required).</param>
        /// <param name="touchpointDate">The date of the touchpoint. (required).</param>
        public TpdmProspectTouchpoint(string touchpointContent = default(string), DateTime? touchpointDate = default(DateTime?))
        {
            // to ensure "touchpointContent" is required (not null)
            if (touchpointContent == null)
            {
                throw new InvalidDataException("touchpointContent is a required property for TpdmProspectTouchpoint and cannot be null");
            }
            else
            {
                this.TouchpointContent = touchpointContent;
            }
            // to ensure "touchpointDate" is required (not null)
            if (touchpointDate == null)
            {
                throw new InvalidDataException("touchpointDate is a required property for TpdmProspectTouchpoint and cannot be null");
            }
            else
            {
                this.TouchpointDate = touchpointDate;
            }
        }
        
        /// <summary>
        /// The content associated with or an artifact from the touchpoint.
        /// </summary>
        /// <value>The content associated with or an artifact from the touchpoint.</value>
        [DataMember(Name="touchpointContent", EmitDefaultValue=false)]
        public string TouchpointContent { get; set; }

        /// <summary>
        /// The date of the touchpoint.
        /// </summary>
        /// <value>The date of the touchpoint.</value>
        [DataMember(Name="touchpointDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TouchpointDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmProspectTouchpoint {\n");
            sb.Append("  TouchpointContent: ").Append(TouchpointContent).Append("\n");
            sb.Append("  TouchpointDate: ").Append(TouchpointDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmProspectTouchpoint);
        }

        /// <summary>
        /// Returns true if TpdmProspectTouchpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmProspectTouchpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmProspectTouchpoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TouchpointContent == input.TouchpointContent ||
                    (this.TouchpointContent != null &&
                    this.TouchpointContent.Equals(input.TouchpointContent))
                ) && 
                (
                    this.TouchpointDate == input.TouchpointDate ||
                    (this.TouchpointDate != null &&
                    this.TouchpointDate.Equals(input.TouchpointDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TouchpointContent != null)
                    hashCode = hashCode * 59 + this.TouchpointContent.GetHashCode();
                if (this.TouchpointDate != null)
                    hashCode = hashCode * 59 + this.TouchpointDate.GetHashCode();
                return hashCode;
            }
        }
    }

}
