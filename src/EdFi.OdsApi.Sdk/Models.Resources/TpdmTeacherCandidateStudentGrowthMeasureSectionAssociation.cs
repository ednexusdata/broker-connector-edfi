/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation
    /// </summary>
    [DataContract]
    public partial class TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation :  IEquatable<TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="sectionReference">sectionReference (required).</param>
        /// <param name="teacherCandidateStudentGrowthMeasureReference">teacherCandidateStudentGrowthMeasureReference (required).</param>
        /// <param name="beginDate">Begin date for the association.</param>
        /// <param name="endDate">The end date for the association.</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation(string id = default(string), EdFiSectionReference sectionReference = default(EdFiSectionReference), TpdmTeacherCandidateStudentGrowthMeasureReference teacherCandidateStudentGrowthMeasureReference = default(TpdmTeacherCandidateStudentGrowthMeasureReference), DateTime? beginDate = default(DateTime?), DateTime? endDate = default(DateTime?), string etag = default(string))
        {
            // to ensure "sectionReference" is required (not null)
            if (sectionReference == null)
            {
                throw new InvalidDataException("sectionReference is a required property for TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation and cannot be null");
            }
            else
            {
                this.SectionReference = sectionReference;
            }
            // to ensure "teacherCandidateStudentGrowthMeasureReference" is required (not null)
            if (teacherCandidateStudentGrowthMeasureReference == null)
            {
                throw new InvalidDataException("teacherCandidateStudentGrowthMeasureReference is a required property for TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation and cannot be null");
            }
            else
            {
                this.TeacherCandidateStudentGrowthMeasureReference = teacherCandidateStudentGrowthMeasureReference;
            }
            this.Id = id;
            this.BeginDate = beginDate;
            this.EndDate = endDate;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [DataMember(Name="sectionReference", EmitDefaultValue=false)]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// Gets or Sets TeacherCandidateStudentGrowthMeasureReference
        /// </summary>
        [DataMember(Name="teacherCandidateStudentGrowthMeasureReference", EmitDefaultValue=false)]
        public TpdmTeacherCandidateStudentGrowthMeasureReference TeacherCandidateStudentGrowthMeasureReference { get; set; }

        /// <summary>
        /// Begin date for the association
        /// </summary>
        /// <value>Begin date for the association</value>
        [DataMember(Name="beginDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The end date for the association
        /// </summary>
        /// <value>The end date for the association</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  TeacherCandidateStudentGrowthMeasureReference: ").Append(TeacherCandidateStudentGrowthMeasureReference).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation);
        }

        /// <summary>
        /// Returns true if TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmTeacherCandidateStudentGrowthMeasureSectionAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SectionReference == input.SectionReference ||
                    (this.SectionReference != null &&
                    this.SectionReference.Equals(input.SectionReference))
                ) && 
                (
                    this.TeacherCandidateStudentGrowthMeasureReference == input.TeacherCandidateStudentGrowthMeasureReference ||
                    (this.TeacherCandidateStudentGrowthMeasureReference != null &&
                    this.TeacherCandidateStudentGrowthMeasureReference.Equals(input.TeacherCandidateStudentGrowthMeasureReference))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SectionReference != null)
                    hashCode = hashCode * 59 + this.SectionReference.GetHashCode();
                if (this.TeacherCandidateStudentGrowthMeasureReference != null)
                    hashCode = hashCode * 59 + this.TeacherCandidateStudentGrowthMeasureReference.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
