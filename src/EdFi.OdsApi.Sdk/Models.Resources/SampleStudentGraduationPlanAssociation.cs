/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// SampleStudentGraduationPlanAssociation
    /// </summary>
    [DataContract]
    public partial class SampleStudentGraduationPlanAssociation :  IEquatable<SampleStudentGraduationPlanAssociation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleStudentGraduationPlanAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SampleStudentGraduationPlanAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SampleStudentGraduationPlanAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="academicSubjects">An unordered collection of studentGraduationPlanAssociationAcademicSubjects. The student&#39;s favorite academic subjects. (required).</param>
        /// <param name="designatedBies">An unordered collection of studentGraduationPlanAssociationDesignatedBies. The entity governing this graduation plan. (required).</param>
        /// <param name="yearsAttendeds">An unordered collection of studentGraduationPlanAssociationYearsAttendeds. The number of years the student will have attended high school by the time of graduation. (required).</param>
        /// <param name="graduationPlanReference">graduationPlanReference (required).</param>
        /// <param name="staffReference">staffReference.</param>
        /// <param name="studentReference">studentReference (required).</param>
        /// <param name="careerPathwayCodes">An unordered collection of studentGraduationPlanAssociationCareerPathwayCodes. The code representing the student&#39;s intended career pathway after graduation..</param>
        /// <param name="commencementTime">The time of day for the commencement ceremony..</param>
        /// <param name="cteProgram">cteProgram.</param>
        /// <param name="descriptions">An unordered collection of studentGraduationPlanAssociationDescriptions. A description of the graduation plan..</param>
        /// <param name="effectiveDate">The date the plan went into effect. (required).</param>
        /// <param name="graduationFee">Any fees the student must resolve prior to graduation, such as library fines and overdue lunch accounts..</param>
        /// <param name="highSchoolDuration">The number of years remaining prior to graduation as of when the plan became effective..</param>
        /// <param name="hoursPerWeek">The number of hours per week the student will attend to graduate. (required).</param>
        /// <param name="industryCredentials">An unordered collection of studentGraduationPlanAssociationIndustryCredentials. Industry-recognized credentials the student will have earned at graduation..</param>
        /// <param name="isActivePlan">An indication as to whether the plan is active..</param>
        /// <param name="requiredAttendance">The percentage of time the student must attend to graduate, relative to a full-time student..</param>
        /// <param name="studentParentAssociations">An unordered collection of studentGraduationPlanAssociationStudentParentAssociations. Parent responsible for graduation plan..</param>
        /// <param name="targetGPA">The GPA the student is working toward. (required).</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public SampleStudentGraduationPlanAssociation(string id = default(string), List<SampleStudentGraduationPlanAssociationAcademicSubject> academicSubjects = default(List<SampleStudentGraduationPlanAssociationAcademicSubject>), List<SampleStudentGraduationPlanAssociationDesignatedBy> designatedBies = default(List<SampleStudentGraduationPlanAssociationDesignatedBy>), List<SampleStudentGraduationPlanAssociationYearsAttended> yearsAttendeds = default(List<SampleStudentGraduationPlanAssociationYearsAttended>), EdFiGraduationPlanReference graduationPlanReference = default(EdFiGraduationPlanReference), EdFiStaffReference staffReference = default(EdFiStaffReference), EdFiStudentReference studentReference = default(EdFiStudentReference), List<SampleStudentGraduationPlanAssociationCareerPathwayCode> careerPathwayCodes = default(List<SampleStudentGraduationPlanAssociationCareerPathwayCode>), string commencementTime = default(string), SampleStudentGraduationPlanAssociationCTEProgram cteProgram = default(SampleStudentGraduationPlanAssociationCTEProgram), List<SampleStudentGraduationPlanAssociationDescription> descriptions = default(List<SampleStudentGraduationPlanAssociationDescription>), DateTime? effectiveDate = default(DateTime?), double? graduationFee = default(double?), string highSchoolDuration = default(string), double? hoursPerWeek = default(double?), List<SampleStudentGraduationPlanAssociationIndustryCredential> industryCredentials = default(List<SampleStudentGraduationPlanAssociationIndustryCredential>), bool? isActivePlan = default(bool?), double? requiredAttendance = default(double?), List<SampleStudentGraduationPlanAssociationStudentParentAssociation> studentParentAssociations = default(List<SampleStudentGraduationPlanAssociationStudentParentAssociation>), double? targetGPA = default(double?), string etag = default(string))
        {
            // to ensure "academicSubjects" is required (not null)
            if (academicSubjects == null)
            {
                throw new InvalidDataException("academicSubjects is a required property for SampleStudentGraduationPlanAssociation and cannot be null");
            }
            else
            {
                this.AcademicSubjects = academicSubjects;
            }
            // to ensure "designatedBies" is required (not null)
            if (designatedBies == null)
            {
                throw new InvalidDataException("designatedBies is a required property for SampleStudentGraduationPlanAssociation and cannot be null");
            }
            else
            {
                this.DesignatedBies = designatedBies;
            }
            // to ensure "yearsAttendeds" is required (not null)
            if (yearsAttendeds == null)
            {
                throw new InvalidDataException("yearsAttendeds is a required property for SampleStudentGraduationPlanAssociation and cannot be null");
            }
            else
            {
                this.YearsAttendeds = yearsAttendeds;
            }
            // to ensure "graduationPlanReference" is required (not null)
            if (graduationPlanReference == null)
            {
                throw new InvalidDataException("graduationPlanReference is a required property for SampleStudentGraduationPlanAssociation and cannot be null");
            }
            else
            {
                this.GraduationPlanReference = graduationPlanReference;
            }
            // to ensure "studentReference" is required (not null)
            if (studentReference == null)
            {
                throw new InvalidDataException("studentReference is a required property for SampleStudentGraduationPlanAssociation and cannot be null");
            }
            else
            {
                this.StudentReference = studentReference;
            }
            // to ensure "effectiveDate" is required (not null)
            if (effectiveDate == null)
            {
                throw new InvalidDataException("effectiveDate is a required property for SampleStudentGraduationPlanAssociation and cannot be null");
            }
            else
            {
                this.EffectiveDate = effectiveDate;
            }
            // to ensure "hoursPerWeek" is required (not null)
            if (hoursPerWeek == null)
            {
                throw new InvalidDataException("hoursPerWeek is a required property for SampleStudentGraduationPlanAssociation and cannot be null");
            }
            else
            {
                this.HoursPerWeek = hoursPerWeek;
            }
            // to ensure "targetGPA" is required (not null)
            if (targetGPA == null)
            {
                throw new InvalidDataException("targetGPA is a required property for SampleStudentGraduationPlanAssociation and cannot be null");
            }
            else
            {
                this.TargetGPA = targetGPA;
            }
            this.Id = id;
            this.StaffReference = staffReference;
            this.CareerPathwayCodes = careerPathwayCodes;
            this.CommencementTime = commencementTime;
            this.CteProgram = cteProgram;
            this.Descriptions = descriptions;
            this.GraduationFee = graduationFee;
            this.HighSchoolDuration = highSchoolDuration;
            this.IndustryCredentials = industryCredentials;
            this.IsActivePlan = isActivePlan;
            this.RequiredAttendance = requiredAttendance;
            this.StudentParentAssociations = studentParentAssociations;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// An unordered collection of studentGraduationPlanAssociationAcademicSubjects. The student&#39;s favorite academic subjects.
        /// </summary>
        /// <value>An unordered collection of studentGraduationPlanAssociationAcademicSubjects. The student&#39;s favorite academic subjects.</value>
        [DataMember(Name="academicSubjects", EmitDefaultValue=false)]
        public List<SampleStudentGraduationPlanAssociationAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// An unordered collection of studentGraduationPlanAssociationDesignatedBies. The entity governing this graduation plan.
        /// </summary>
        /// <value>An unordered collection of studentGraduationPlanAssociationDesignatedBies. The entity governing this graduation plan.</value>
        [DataMember(Name="designatedBies", EmitDefaultValue=false)]
        public List<SampleStudentGraduationPlanAssociationDesignatedBy> DesignatedBies { get; set; }

        /// <summary>
        /// An unordered collection of studentGraduationPlanAssociationYearsAttendeds. The number of years the student will have attended high school by the time of graduation.
        /// </summary>
        /// <value>An unordered collection of studentGraduationPlanAssociationYearsAttendeds. The number of years the student will have attended high school by the time of graduation.</value>
        [DataMember(Name="yearsAttendeds", EmitDefaultValue=false)]
        public List<SampleStudentGraduationPlanAssociationYearsAttended> YearsAttendeds { get; set; }

        /// <summary>
        /// Gets or Sets GraduationPlanReference
        /// </summary>
        [DataMember(Name="graduationPlanReference", EmitDefaultValue=false)]
        public EdFiGraduationPlanReference GraduationPlanReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name="staffReference", EmitDefaultValue=false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name="studentReference", EmitDefaultValue=false)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// An unordered collection of studentGraduationPlanAssociationCareerPathwayCodes. The code representing the student&#39;s intended career pathway after graduation.
        /// </summary>
        /// <value>An unordered collection of studentGraduationPlanAssociationCareerPathwayCodes. The code representing the student&#39;s intended career pathway after graduation.</value>
        [DataMember(Name="careerPathwayCodes", EmitDefaultValue=false)]
        public List<SampleStudentGraduationPlanAssociationCareerPathwayCode> CareerPathwayCodes { get; set; }

        /// <summary>
        /// The time of day for the commencement ceremony.
        /// </summary>
        /// <value>The time of day for the commencement ceremony.</value>
        [DataMember(Name="commencementTime", EmitDefaultValue=false)]
        public string CommencementTime { get; set; }

        /// <summary>
        /// Gets or Sets CteProgram
        /// </summary>
        [DataMember(Name="cteProgram", EmitDefaultValue=false)]
        public SampleStudentGraduationPlanAssociationCTEProgram CteProgram { get; set; }

        /// <summary>
        /// An unordered collection of studentGraduationPlanAssociationDescriptions. A description of the graduation plan.
        /// </summary>
        /// <value>An unordered collection of studentGraduationPlanAssociationDescriptions. A description of the graduation plan.</value>
        [DataMember(Name="descriptions", EmitDefaultValue=false)]
        public List<SampleStudentGraduationPlanAssociationDescription> Descriptions { get; set; }

        /// <summary>
        /// The date the plan went into effect.
        /// </summary>
        /// <value>The date the plan went into effect.</value>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Any fees the student must resolve prior to graduation, such as library fines and overdue lunch accounts.
        /// </summary>
        /// <value>Any fees the student must resolve prior to graduation, such as library fines and overdue lunch accounts.</value>
        [DataMember(Name="graduationFee", EmitDefaultValue=false)]
        public double? GraduationFee { get; set; }

        /// <summary>
        /// The number of years remaining prior to graduation as of when the plan became effective.
        /// </summary>
        /// <value>The number of years remaining prior to graduation as of when the plan became effective.</value>
        [DataMember(Name="highSchoolDuration", EmitDefaultValue=false)]
        public string HighSchoolDuration { get; set; }

        /// <summary>
        /// The number of hours per week the student will attend to graduate.
        /// </summary>
        /// <value>The number of hours per week the student will attend to graduate.</value>
        [DataMember(Name="hoursPerWeek", EmitDefaultValue=false)]
        public double? HoursPerWeek { get; set; }

        /// <summary>
        /// An unordered collection of studentGraduationPlanAssociationIndustryCredentials. Industry-recognized credentials the student will have earned at graduation.
        /// </summary>
        /// <value>An unordered collection of studentGraduationPlanAssociationIndustryCredentials. Industry-recognized credentials the student will have earned at graduation.</value>
        [DataMember(Name="industryCredentials", EmitDefaultValue=false)]
        public List<SampleStudentGraduationPlanAssociationIndustryCredential> IndustryCredentials { get; set; }

        /// <summary>
        /// An indication as to whether the plan is active.
        /// </summary>
        /// <value>An indication as to whether the plan is active.</value>
        [DataMember(Name="isActivePlan", EmitDefaultValue=false)]
        public bool? IsActivePlan { get; set; }

        /// <summary>
        /// The percentage of time the student must attend to graduate, relative to a full-time student.
        /// </summary>
        /// <value>The percentage of time the student must attend to graduate, relative to a full-time student.</value>
        [DataMember(Name="requiredAttendance", EmitDefaultValue=false)]
        public double? RequiredAttendance { get; set; }

        /// <summary>
        /// An unordered collection of studentGraduationPlanAssociationStudentParentAssociations. Parent responsible for graduation plan.
        /// </summary>
        /// <value>An unordered collection of studentGraduationPlanAssociationStudentParentAssociations. Parent responsible for graduation plan.</value>
        [DataMember(Name="studentParentAssociations", EmitDefaultValue=false)]
        public List<SampleStudentGraduationPlanAssociationStudentParentAssociation> StudentParentAssociations { get; set; }

        /// <summary>
        /// The GPA the student is working toward.
        /// </summary>
        /// <value>The GPA the student is working toward.</value>
        [DataMember(Name="targetGPA", EmitDefaultValue=false)]
        public double? TargetGPA { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SampleStudentGraduationPlanAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  DesignatedBies: ").Append(DesignatedBies).Append("\n");
            sb.Append("  YearsAttendeds: ").Append(YearsAttendeds).Append("\n");
            sb.Append("  GraduationPlanReference: ").Append(GraduationPlanReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  CareerPathwayCodes: ").Append(CareerPathwayCodes).Append("\n");
            sb.Append("  CommencementTime: ").Append(CommencementTime).Append("\n");
            sb.Append("  CteProgram: ").Append(CteProgram).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  GraduationFee: ").Append(GraduationFee).Append("\n");
            sb.Append("  HighSchoolDuration: ").Append(HighSchoolDuration).Append("\n");
            sb.Append("  HoursPerWeek: ").Append(HoursPerWeek).Append("\n");
            sb.Append("  IndustryCredentials: ").Append(IndustryCredentials).Append("\n");
            sb.Append("  IsActivePlan: ").Append(IsActivePlan).Append("\n");
            sb.Append("  RequiredAttendance: ").Append(RequiredAttendance).Append("\n");
            sb.Append("  StudentParentAssociations: ").Append(StudentParentAssociations).Append("\n");
            sb.Append("  TargetGPA: ").Append(TargetGPA).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SampleStudentGraduationPlanAssociation);
        }

        /// <summary>
        /// Returns true if SampleStudentGraduationPlanAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of SampleStudentGraduationPlanAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SampleStudentGraduationPlanAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AcademicSubjects == input.AcademicSubjects ||
                    this.AcademicSubjects != null &&
                    this.AcademicSubjects.SequenceEqual(input.AcademicSubjects)
                ) && 
                (
                    this.DesignatedBies == input.DesignatedBies ||
                    this.DesignatedBies != null &&
                    this.DesignatedBies.SequenceEqual(input.DesignatedBies)
                ) && 
                (
                    this.YearsAttendeds == input.YearsAttendeds ||
                    this.YearsAttendeds != null &&
                    this.YearsAttendeds.SequenceEqual(input.YearsAttendeds)
                ) && 
                (
                    this.GraduationPlanReference == input.GraduationPlanReference ||
                    (this.GraduationPlanReference != null &&
                    this.GraduationPlanReference.Equals(input.GraduationPlanReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.StudentReference == input.StudentReference ||
                    (this.StudentReference != null &&
                    this.StudentReference.Equals(input.StudentReference))
                ) && 
                (
                    this.CareerPathwayCodes == input.CareerPathwayCodes ||
                    this.CareerPathwayCodes != null &&
                    this.CareerPathwayCodes.SequenceEqual(input.CareerPathwayCodes)
                ) && 
                (
                    this.CommencementTime == input.CommencementTime ||
                    (this.CommencementTime != null &&
                    this.CommencementTime.Equals(input.CommencementTime))
                ) && 
                (
                    this.CteProgram == input.CteProgram ||
                    (this.CteProgram != null &&
                    this.CteProgram.Equals(input.CteProgram))
                ) && 
                (
                    this.Descriptions == input.Descriptions ||
                    this.Descriptions != null &&
                    this.Descriptions.SequenceEqual(input.Descriptions)
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.GraduationFee == input.GraduationFee ||
                    (this.GraduationFee != null &&
                    this.GraduationFee.Equals(input.GraduationFee))
                ) && 
                (
                    this.HighSchoolDuration == input.HighSchoolDuration ||
                    (this.HighSchoolDuration != null &&
                    this.HighSchoolDuration.Equals(input.HighSchoolDuration))
                ) && 
                (
                    this.HoursPerWeek == input.HoursPerWeek ||
                    (this.HoursPerWeek != null &&
                    this.HoursPerWeek.Equals(input.HoursPerWeek))
                ) && 
                (
                    this.IndustryCredentials == input.IndustryCredentials ||
                    this.IndustryCredentials != null &&
                    this.IndustryCredentials.SequenceEqual(input.IndustryCredentials)
                ) && 
                (
                    this.IsActivePlan == input.IsActivePlan ||
                    (this.IsActivePlan != null &&
                    this.IsActivePlan.Equals(input.IsActivePlan))
                ) && 
                (
                    this.RequiredAttendance == input.RequiredAttendance ||
                    (this.RequiredAttendance != null &&
                    this.RequiredAttendance.Equals(input.RequiredAttendance))
                ) && 
                (
                    this.StudentParentAssociations == input.StudentParentAssociations ||
                    this.StudentParentAssociations != null &&
                    this.StudentParentAssociations.SequenceEqual(input.StudentParentAssociations)
                ) && 
                (
                    this.TargetGPA == input.TargetGPA ||
                    (this.TargetGPA != null &&
                    this.TargetGPA.Equals(input.TargetGPA))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AcademicSubjects != null)
                    hashCode = hashCode * 59 + this.AcademicSubjects.GetHashCode();
                if (this.DesignatedBies != null)
                    hashCode = hashCode * 59 + this.DesignatedBies.GetHashCode();
                if (this.YearsAttendeds != null)
                    hashCode = hashCode * 59 + this.YearsAttendeds.GetHashCode();
                if (this.GraduationPlanReference != null)
                    hashCode = hashCode * 59 + this.GraduationPlanReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.StudentReference != null)
                    hashCode = hashCode * 59 + this.StudentReference.GetHashCode();
                if (this.CareerPathwayCodes != null)
                    hashCode = hashCode * 59 + this.CareerPathwayCodes.GetHashCode();
                if (this.CommencementTime != null)
                    hashCode = hashCode * 59 + this.CommencementTime.GetHashCode();
                if (this.CteProgram != null)
                    hashCode = hashCode * 59 + this.CteProgram.GetHashCode();
                if (this.Descriptions != null)
                    hashCode = hashCode * 59 + this.Descriptions.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.GraduationFee != null)
                    hashCode = hashCode * 59 + this.GraduationFee.GetHashCode();
                if (this.HighSchoolDuration != null)
                    hashCode = hashCode * 59 + this.HighSchoolDuration.GetHashCode();
                if (this.HoursPerWeek != null)
                    hashCode = hashCode * 59 + this.HoursPerWeek.GetHashCode();
                if (this.IndustryCredentials != null)
                    hashCode = hashCode * 59 + this.IndustryCredentials.GetHashCode();
                if (this.IsActivePlan != null)
                    hashCode = hashCode * 59 + this.IsActivePlan.GetHashCode();
                if (this.RequiredAttendance != null)
                    hashCode = hashCode * 59 + this.RequiredAttendance.GetHashCode();
                if (this.StudentParentAssociations != null)
                    hashCode = hashCode * 59 + this.StudentParentAssociations.GetHashCode();
                if (this.TargetGPA != null)
                    hashCode = hashCode * 59 + this.TargetGPA.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
