/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmAnonymizedStudentAcademicRecord
    /// </summary>
    [DataContract]
    public partial class TpdmAnonymizedStudentAcademicRecord :  IEquatable<TpdmAnonymizedStudentAcademicRecord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmAnonymizedStudentAcademicRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmAnonymizedStudentAcademicRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmAnonymizedStudentAcademicRecord" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="factAsOfDate">The date for which the data element is relevant (required).</param>
        /// <param name="termDescriptor">The term for the session during the school year. (required).</param>
        /// <param name="anonymizedStudentReference">anonymizedStudentReference (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="schoolYearTypeReference">schoolYearTypeReference (required).</param>
        /// <param name="cumulativeGradePointAverage">The average cumulative grade point average for a student.</param>
        /// <param name="gpaMax">The maximum grade point average that can be achieved by a student.</param>
        /// <param name="sessionGradePointAverage">The number of grade points an individual earned for this session..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmAnonymizedStudentAcademicRecord(string id = default(string), DateTime? factAsOfDate = default(DateTime?), string termDescriptor = default(string), TpdmAnonymizedStudentReference anonymizedStudentReference = default(TpdmAnonymizedStudentReference), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiSchoolYearTypeReference schoolYearTypeReference = default(EdFiSchoolYearTypeReference), double? cumulativeGradePointAverage = default(double?), double? gpaMax = default(double?), double? sessionGradePointAverage = default(double?), string etag = default(string))
        {
            // to ensure "factAsOfDate" is required (not null)
            if (factAsOfDate == null)
            {
                throw new InvalidDataException("factAsOfDate is a required property for TpdmAnonymizedStudentAcademicRecord and cannot be null");
            }
            else
            {
                this.FactAsOfDate = factAsOfDate;
            }
            // to ensure "termDescriptor" is required (not null)
            if (termDescriptor == null)
            {
                throw new InvalidDataException("termDescriptor is a required property for TpdmAnonymizedStudentAcademicRecord and cannot be null");
            }
            else
            {
                this.TermDescriptor = termDescriptor;
            }
            // to ensure "anonymizedStudentReference" is required (not null)
            if (anonymizedStudentReference == null)
            {
                throw new InvalidDataException("anonymizedStudentReference is a required property for TpdmAnonymizedStudentAcademicRecord and cannot be null");
            }
            else
            {
                this.AnonymizedStudentReference = anonymizedStudentReference;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for TpdmAnonymizedStudentAcademicRecord and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            // to ensure "schoolYearTypeReference" is required (not null)
            if (schoolYearTypeReference == null)
            {
                throw new InvalidDataException("schoolYearTypeReference is a required property for TpdmAnonymizedStudentAcademicRecord and cannot be null");
            }
            else
            {
                this.SchoolYearTypeReference = schoolYearTypeReference;
            }
            this.Id = id;
            this.CumulativeGradePointAverage = cumulativeGradePointAverage;
            this.GpaMax = gpaMax;
            this.SessionGradePointAverage = sessionGradePointAverage;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The date for which the data element is relevant
        /// </summary>
        /// <value>The date for which the data element is relevant</value>
        [DataMember(Name="factAsOfDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? FactAsOfDate { get; set; }

        /// <summary>
        /// The term for the session during the school year.
        /// </summary>
        /// <value>The term for the session during the school year.</value>
        [DataMember(Name="termDescriptor", EmitDefaultValue=false)]
        public string TermDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets AnonymizedStudentReference
        /// </summary>
        [DataMember(Name="anonymizedStudentReference", EmitDefaultValue=false)]
        public TpdmAnonymizedStudentReference AnonymizedStudentReference { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// The average cumulative grade point average for a student
        /// </summary>
        /// <value>The average cumulative grade point average for a student</value>
        [DataMember(Name="cumulativeGradePointAverage", EmitDefaultValue=false)]
        public double? CumulativeGradePointAverage { get; set; }

        /// <summary>
        /// The maximum grade point average that can be achieved by a student
        /// </summary>
        /// <value>The maximum grade point average that can be achieved by a student</value>
        [DataMember(Name="gpaMax", EmitDefaultValue=false)]
        public double? GpaMax { get; set; }

        /// <summary>
        /// The number of grade points an individual earned for this session.
        /// </summary>
        /// <value>The number of grade points an individual earned for this session.</value>
        [DataMember(Name="sessionGradePointAverage", EmitDefaultValue=false)]
        public double? SessionGradePointAverage { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmAnonymizedStudentAcademicRecord {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FactAsOfDate: ").Append(FactAsOfDate).Append("\n");
            sb.Append("  TermDescriptor: ").Append(TermDescriptor).Append("\n");
            sb.Append("  AnonymizedStudentReference: ").Append(AnonymizedStudentReference).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  CumulativeGradePointAverage: ").Append(CumulativeGradePointAverage).Append("\n");
            sb.Append("  GpaMax: ").Append(GpaMax).Append("\n");
            sb.Append("  SessionGradePointAverage: ").Append(SessionGradePointAverage).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmAnonymizedStudentAcademicRecord);
        }

        /// <summary>
        /// Returns true if TpdmAnonymizedStudentAcademicRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmAnonymizedStudentAcademicRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmAnonymizedStudentAcademicRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FactAsOfDate == input.FactAsOfDate ||
                    (this.FactAsOfDate != null &&
                    this.FactAsOfDate.Equals(input.FactAsOfDate))
                ) && 
                (
                    this.TermDescriptor == input.TermDescriptor ||
                    (this.TermDescriptor != null &&
                    this.TermDescriptor.Equals(input.TermDescriptor))
                ) && 
                (
                    this.AnonymizedStudentReference == input.AnonymizedStudentReference ||
                    (this.AnonymizedStudentReference != null &&
                    this.AnonymizedStudentReference.Equals(input.AnonymizedStudentReference))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.CumulativeGradePointAverage == input.CumulativeGradePointAverage ||
                    (this.CumulativeGradePointAverage != null &&
                    this.CumulativeGradePointAverage.Equals(input.CumulativeGradePointAverage))
                ) && 
                (
                    this.GpaMax == input.GpaMax ||
                    (this.GpaMax != null &&
                    this.GpaMax.Equals(input.GpaMax))
                ) && 
                (
                    this.SessionGradePointAverage == input.SessionGradePointAverage ||
                    (this.SessionGradePointAverage != null &&
                    this.SessionGradePointAverage.Equals(input.SessionGradePointAverage))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FactAsOfDate != null)
                    hashCode = hashCode * 59 + this.FactAsOfDate.GetHashCode();
                if (this.TermDescriptor != null)
                    hashCode = hashCode * 59 + this.TermDescriptor.GetHashCode();
                if (this.AnonymizedStudentReference != null)
                    hashCode = hashCode * 59 + this.AnonymizedStudentReference.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.CumulativeGradePointAverage != null)
                    hashCode = hashCode * 59 + this.CumulativeGradePointAverage.GetHashCode();
                if (this.GpaMax != null)
                    hashCode = hashCode * 59 + this.GpaMax.GetHashCode();
                if (this.SessionGradePointAverage != null)
                    hashCode = hashCode * 59 + this.SessionGradePointAverage.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
