/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Resources
{
    /// <summary>
    /// TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation
    /// </summary>
    [DataContract]
    public partial class TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation :  IEquatable<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="beginDate">The begin date for the association. (required).</param>
        /// <param name="educationOrganizationReference">educationOrganizationReference (required).</param>
        /// <param name="teacherCandidateReference">teacherCandidateReference (required).</param>
        /// <param name="teacherPreparationProviderProgramReference">teacherPreparationProviderProgramReference (required).</param>
        /// <param name="endDate">The end date for the association..</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association..</param>
        /// <param name="etag">A unique system-generated value that identifies the version of the resource..</param>
        public TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation(string id = default(string), DateTime? beginDate = default(DateTime?), EdFiEducationOrganizationReference educationOrganizationReference = default(EdFiEducationOrganizationReference), TpdmTeacherCandidateReference teacherCandidateReference = default(TpdmTeacherCandidateReference), TpdmTeacherPreparationProviderProgramReference teacherPreparationProviderProgramReference = default(TpdmTeacherPreparationProviderProgramReference), DateTime? endDate = default(DateTime?), string reasonExitedDescriptor = default(string), string etag = default(string))
        {
            // to ensure "beginDate" is required (not null)
            if (beginDate == null)
            {
                throw new InvalidDataException("beginDate is a required property for TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation and cannot be null");
            }
            else
            {
                this.BeginDate = beginDate;
            }
            // to ensure "educationOrganizationReference" is required (not null)
            if (educationOrganizationReference == null)
            {
                throw new InvalidDataException("educationOrganizationReference is a required property for TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = educationOrganizationReference;
            }
            // to ensure "teacherCandidateReference" is required (not null)
            if (teacherCandidateReference == null)
            {
                throw new InvalidDataException("teacherCandidateReference is a required property for TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation and cannot be null");
            }
            else
            {
                this.TeacherCandidateReference = teacherCandidateReference;
            }
            // to ensure "teacherPreparationProviderProgramReference" is required (not null)
            if (teacherPreparationProviderProgramReference == null)
            {
                throw new InvalidDataException("teacherPreparationProviderProgramReference is a required property for TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation and cannot be null");
            }
            else
            {
                this.TeacherPreparationProviderProgramReference = teacherPreparationProviderProgramReference;
            }
            this.Id = id;
            this.EndDate = endDate;
            this.ReasonExitedDescriptor = reasonExitedDescriptor;
            this.Etag = etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The begin date for the association.
        /// </summary>
        /// <value>The begin date for the association.</value>
        [DataMember(Name="beginDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets TeacherCandidateReference
        /// </summary>
        [DataMember(Name="teacherCandidateReference", EmitDefaultValue=false)]
        public TpdmTeacherCandidateReference TeacherCandidateReference { get; set; }

        /// <summary>
        /// Gets or Sets TeacherPreparationProviderProgramReference
        /// </summary>
        [DataMember(Name="teacherPreparationProviderProgramReference", EmitDefaultValue=false)]
        public TpdmTeacherPreparationProviderProgramReference TeacherPreparationProviderProgramReference { get; set; }

        /// <summary>
        /// The end date for the association.
        /// </summary>
        /// <value>The end date for the association.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Reason exited for the association.
        /// </summary>
        /// <value>Reason exited for the association.</value>
        [DataMember(Name="reasonExitedDescriptor", EmitDefaultValue=false)]
        public string ReasonExitedDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  TeacherCandidateReference: ").Append(TeacherCandidateReference).Append("\n");
            sb.Append("  TeacherPreparationProviderProgramReference: ").Append(TeacherPreparationProviderProgramReference).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ReasonExitedDescriptor: ").Append(ReasonExitedDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation);
        }

        /// <summary>
        /// Returns true if TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.TeacherCandidateReference == input.TeacherCandidateReference ||
                    (this.TeacherCandidateReference != null &&
                    this.TeacherCandidateReference.Equals(input.TeacherCandidateReference))
                ) && 
                (
                    this.TeacherPreparationProviderProgramReference == input.TeacherPreparationProviderProgramReference ||
                    (this.TeacherPreparationProviderProgramReference != null &&
                    this.TeacherPreparationProviderProgramReference.Equals(input.TeacherPreparationProviderProgramReference))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ReasonExitedDescriptor == input.ReasonExitedDescriptor ||
                    (this.ReasonExitedDescriptor != null &&
                    this.ReasonExitedDescriptor.Equals(input.ReasonExitedDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.TeacherCandidateReference != null)
                    hashCode = hashCode * 59 + this.TeacherCandidateReference.GetHashCode();
                if (this.TeacherPreparationProviderProgramReference != null)
                    hashCode = hashCode * 59 + this.TeacherPreparationProviderProgramReference.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ReasonExitedDescriptor != null)
                    hashCode = hashCode * 59 + this.ReasonExitedDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }
    }

}
