/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using EdFi.OdsApi.Sdk.Client;
using EdFi.OdsApi.Sdk.Models.Resources;

namespace EdFi.OdsApi.Sdk.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeacherCandidateTeacherPreparationProviderProgramAssociationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationById (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationByIdWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="beginDate">The begin date for the association. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="programName">The name of the Teacher Preparation Program. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association. (optional)</param>
        /// <param name="endDate">The end date for the association. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>List&lt;TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation&gt;</returns>
        List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation> GetTeacherCandidateTeacherPreparationProviderProgramAssociations (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? beginDate = null, int? educationOrganizationId = null, string teacherCandidateIdentifier = null, string programName = null, string programTypeDescriptor = null, string reasonExitedDescriptor = null, DateTime? endDate = null, string id = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="beginDate">The begin date for the association. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="programName">The name of the Teacher Preparation Program. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association. (optional)</param>
        /// <param name="endDate">The end date for the association. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation&gt;</returns>
        ApiResponse<List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? beginDate = null, int? educationOrganizationId = null, string teacherCandidateIdentifier = null, string programName = null, string programTypeDescriptor = null, string reasonExitedDescriptor = null, DateTime? endDate = null, string id = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation</returns>
        TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation GetTeacherCandidateTeacherPreparationProviderProgramAssociationsById (string id, string ifNoneMatch = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>ApiResponse of TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation</returns>
        ApiResponse<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsByIdWithHttpInfo (string id, string ifNoneMatch = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        void PostTeacherCandidateTeacherPreparationProviderProgramAssociation (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTeacherCandidateTeacherPreparationProviderProgramAssociationWithHttpInfo (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation);
        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void PutTeacherCandidateTeacherPreparationProviderProgramAssociation (string id, TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation, string ifMatch = null);

        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutTeacherCandidateTeacherPreparationProviderProgramAssociationWithHttpInfo (string id, TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation, string ifMatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationByIdAsync (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationByIdAsyncWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="beginDate">The begin date for the association. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="programName">The name of the Teacher Preparation Program. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association. (optional)</param>
        /// <param name="endDate">The end date for the association. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of List&lt;TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation&gt;</returns>
        System.Threading.Tasks.Task<List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsAsync (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? beginDate = null, int? educationOrganizationId = null, string teacherCandidateIdentifier = null, string programName = null, string programTypeDescriptor = null, string reasonExitedDescriptor = null, DateTime? endDate = null, string id = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="beginDate">The begin date for the association. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="programName">The name of the Teacher Preparation Program. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association. (optional)</param>
        /// <param name="endDate">The end date for the association. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>>> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsAsyncWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? beginDate = null, int? educationOrganizationId = null, string teacherCandidateIdentifier = null, string programName = null, string programTypeDescriptor = null, string reasonExitedDescriptor = null, DateTime? endDate = null, string id = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation</returns>
        System.Threading.Tasks.Task<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsByIdAsync (string id, string ifNoneMatch = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of ApiResponse (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation)</returns>
        System.Threading.Tasks.Task<ApiResponse<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostTeacherCandidateTeacherPreparationProviderProgramAssociationAsync (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostTeacherCandidateTeacherPreparationProviderProgramAssociationAsyncWithHttpInfo (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation);
        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutTeacherCandidateTeacherPreparationProviderProgramAssociationAsync (string id, TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation, string ifMatch = null);

        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutTeacherCandidateTeacherPreparationProviderProgramAssociationAsyncWithHttpInfo (string id, TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation, string ifMatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeacherCandidateTeacherPreparationProviderProgramAssociationsApi : ITeacherCandidateTeacherPreparationProviderProgramAssociationsApi
    {
        private EdFi.OdsApi.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeacherCandidateTeacherPreparationProviderProgramAssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeacherCandidateTeacherPreparationProviderProgramAssociationsApi(String basePath)
        {
            this.Configuration = new EdFi.OdsApi.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeacherCandidateTeacherPreparationProviderProgramAssociationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeacherCandidateTeacherPreparationProviderProgramAssociationsApi(EdFi.OdsApi.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EdFi.OdsApi.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.OdsApi.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.OdsApi.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationById (string id, string ifMatch = null)
        {
             DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationByIdWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationById");

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationByIdAsync (string id, string ifMatch = null)
        {
             await DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationByIdAsyncWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationById");

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeacherCandidateTeacherPreparationProviderProgramAssociationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="beginDate">The begin date for the association. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="programName">The name of the Teacher Preparation Program. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association. (optional)</param>
        /// <param name="endDate">The end date for the association. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>List&lt;TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation&gt;</returns>
        public List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation> GetTeacherCandidateTeacherPreparationProviderProgramAssociations (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? beginDate = null, int? educationOrganizationId = null, string teacherCandidateIdentifier = null, string programName = null, string programTypeDescriptor = null, string reasonExitedDescriptor = null, DateTime? endDate = null, string id = null)
        {
             ApiResponse<List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>> localVarResponse = GetTeacherCandidateTeacherPreparationProviderProgramAssociationsWithHttpInfo(offset, limit, totalCount, beginDate, educationOrganizationId, teacherCandidateIdentifier, programName, programTypeDescriptor, reasonExitedDescriptor, endDate, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="beginDate">The begin date for the association. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="programName">The name of the Teacher Preparation Program. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association. (optional)</param>
        /// <param name="endDate">The end date for the association. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation&gt;</returns>
        public ApiResponse< List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation> > GetTeacherCandidateTeacherPreparationProviderProgramAssociationsWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? beginDate = null, int? educationOrganizationId = null, string teacherCandidateIdentifier = null, string programName = null, string programTypeDescriptor = null, string reasonExitedDescriptor = null, DateTime? endDate = null, string id = null)
        {

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (beginDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beginDate", beginDate)); // query parameter
            if (educationOrganizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "educationOrganizationId", educationOrganizationId)); // query parameter
            if (teacherCandidateIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "teacherCandidateIdentifier", teacherCandidateIdentifier)); // query parameter
            if (programName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "programName", programName)); // query parameter
            if (programTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "programTypeDescriptor", programTypeDescriptor)); // query parameter
            if (reasonExitedDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reasonExitedDescriptor", reasonExitedDescriptor)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherCandidateTeacherPreparationProviderProgramAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="beginDate">The begin date for the association. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="programName">The name of the Teacher Preparation Program. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association. (optional)</param>
        /// <param name="endDate">The end date for the association. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of List&lt;TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation&gt;</returns>
        public async System.Threading.Tasks.Task<List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsAsync (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? beginDate = null, int? educationOrganizationId = null, string teacherCandidateIdentifier = null, string programName = null, string programTypeDescriptor = null, string reasonExitedDescriptor = null, DateTime? endDate = null, string id = null)
        {
             ApiResponse<List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>> localVarResponse = await GetTeacherCandidateTeacherPreparationProviderProgramAssociationsAsyncWithHttpInfo(offset, limit, totalCount, beginDate, educationOrganizationId, teacherCandidateIdentifier, programName, programTypeDescriptor, reasonExitedDescriptor, endDate, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="beginDate">The begin date for the association. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="programName">The name of the Teacher Preparation Program. (optional)</param>
        /// <param name="programTypeDescriptor">The type of program. (optional)</param>
        /// <param name="reasonExitedDescriptor">Reason exited for the association. (optional)</param>
        /// <param name="endDate">The end date for the association. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>>> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsAsyncWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? beginDate = null, int? educationOrganizationId = null, string teacherCandidateIdentifier = null, string programName = null, string programTypeDescriptor = null, string reasonExitedDescriptor = null, DateTime? endDate = null, string id = null)
        {

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (beginDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "beginDate", beginDate)); // query parameter
            if (educationOrganizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "educationOrganizationId", educationOrganizationId)); // query parameter
            if (teacherCandidateIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "teacherCandidateIdentifier", teacherCandidateIdentifier)); // query parameter
            if (programName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "programName", programName)); // query parameter
            if (programTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "programTypeDescriptor", programTypeDescriptor)); // query parameter
            if (reasonExitedDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reasonExitedDescriptor", reasonExitedDescriptor)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherCandidateTeacherPreparationProviderProgramAssociations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation</returns>
        public TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation GetTeacherCandidateTeacherPreparationProviderProgramAssociationsById (string id, string ifNoneMatch = null)
        {
             ApiResponse<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation> localVarResponse = GetTeacherCandidateTeacherPreparationProviderProgramAssociationsByIdWithHttpInfo(id, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>ApiResponse of TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation</returns>
        public ApiResponse< TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation > GetTeacherCandidateTeacherPreparationProviderProgramAssociationsByIdWithHttpInfo (string id, string ifNoneMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->GetTeacherCandidateTeacherPreparationProviderProgramAssociationsById");

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherCandidateTeacherPreparationProviderProgramAssociationsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation</returns>
        public async System.Threading.Tasks.Task<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsByIdAsync (string id, string ifNoneMatch = null)
        {
             ApiResponse<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation> localVarResponse = await GetTeacherCandidateTeacherPreparationProviderProgramAssociationsByIdAsyncWithHttpInfo(id, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of ApiResponse (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>> GetTeacherCandidateTeacherPreparationProviderProgramAssociationsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->GetTeacherCandidateTeacherPreparationProviderProgramAssociationsById");

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherCandidateTeacherPreparationProviderProgramAssociationsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation)));
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        public void PostTeacherCandidateTeacherPreparationProviderProgramAssociation (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation)
        {
             PostTeacherCandidateTeacherPreparationProviderProgramAssociationWithHttpInfo(teacherCandidateTeacherPreparationProviderProgramAssociation);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostTeacherCandidateTeacherPreparationProviderProgramAssociationWithHttpInfo (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation)
        {
            // verify the required parameter 'teacherCandidateTeacherPreparationProviderProgramAssociation' is set
            if (teacherCandidateTeacherPreparationProviderProgramAssociation == null)
                throw new ApiException(400, "Missing required parameter 'teacherCandidateTeacherPreparationProviderProgramAssociation' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->PostTeacherCandidateTeacherPreparationProviderProgramAssociation");

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teacherCandidateTeacherPreparationProviderProgramAssociation != null && teacherCandidateTeacherPreparationProviderProgramAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teacherCandidateTeacherPreparationProviderProgramAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teacherCandidateTeacherPreparationProviderProgramAssociation; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTeacherCandidateTeacherPreparationProviderProgramAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostTeacherCandidateTeacherPreparationProviderProgramAssociationAsync (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation)
        {
             await PostTeacherCandidateTeacherPreparationProviderProgramAssociationAsyncWithHttpInfo(teacherCandidateTeacherPreparationProviderProgramAssociation);

        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostTeacherCandidateTeacherPreparationProviderProgramAssociationAsyncWithHttpInfo (TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation)
        {
            // verify the required parameter 'teacherCandidateTeacherPreparationProviderProgramAssociation' is set
            if (teacherCandidateTeacherPreparationProviderProgramAssociation == null)
                throw new ApiException(400, "Missing required parameter 'teacherCandidateTeacherPreparationProviderProgramAssociation' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->PostTeacherCandidateTeacherPreparationProviderProgramAssociation");

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teacherCandidateTeacherPreparationProviderProgramAssociation != null && teacherCandidateTeacherPreparationProviderProgramAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teacherCandidateTeacherPreparationProviderProgramAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teacherCandidateTeacherPreparationProviderProgramAssociation; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTeacherCandidateTeacherPreparationProviderProgramAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void PutTeacherCandidateTeacherPreparationProviderProgramAssociation (string id, TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation, string ifMatch = null)
        {
             PutTeacherCandidateTeacherPreparationProviderProgramAssociationWithHttpInfo(id, teacherCandidateTeacherPreparationProviderProgramAssociation, ifMatch);
        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutTeacherCandidateTeacherPreparationProviderProgramAssociationWithHttpInfo (string id, TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->PutTeacherCandidateTeacherPreparationProviderProgramAssociation");
            // verify the required parameter 'teacherCandidateTeacherPreparationProviderProgramAssociation' is set
            if (teacherCandidateTeacherPreparationProviderProgramAssociation == null)
                throw new ApiException(400, "Missing required parameter 'teacherCandidateTeacherPreparationProviderProgramAssociation' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->PutTeacherCandidateTeacherPreparationProviderProgramAssociation");

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (teacherCandidateTeacherPreparationProviderProgramAssociation != null && teacherCandidateTeacherPreparationProviderProgramAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teacherCandidateTeacherPreparationProviderProgramAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teacherCandidateTeacherPreparationProviderProgramAssociation; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTeacherCandidateTeacherPreparationProviderProgramAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutTeacherCandidateTeacherPreparationProviderProgramAssociationAsync (string id, TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation, string ifMatch = null)
        {
             await PutTeacherCandidateTeacherPreparationProviderProgramAssociationAsyncWithHttpInfo(id, teacherCandidateTeacherPreparationProviderProgramAssociation, ifMatch);

        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidateTeacherPreparationProviderProgramAssociation">The JSON representation of the \&quot;teacherCandidateTeacherPreparationProviderProgramAssociation\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutTeacherCandidateTeacherPreparationProviderProgramAssociationAsyncWithHttpInfo (string id, TpdmTeacherCandidateTeacherPreparationProviderProgramAssociation teacherCandidateTeacherPreparationProviderProgramAssociation, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->PutTeacherCandidateTeacherPreparationProviderProgramAssociation");
            // verify the required parameter 'teacherCandidateTeacherPreparationProviderProgramAssociation' is set
            if (teacherCandidateTeacherPreparationProviderProgramAssociation == null)
                throw new ApiException(400, "Missing required parameter 'teacherCandidateTeacherPreparationProviderProgramAssociation' when calling TeacherCandidateTeacherPreparationProviderProgramAssociationsApi->PutTeacherCandidateTeacherPreparationProviderProgramAssociation");

            var localVarPath = "./tpdm/teacherCandidateTeacherPreparationProviderProgramAssociations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (teacherCandidateTeacherPreparationProviderProgramAssociation != null && teacherCandidateTeacherPreparationProviderProgramAssociation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teacherCandidateTeacherPreparationProviderProgramAssociation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teacherCandidateTeacherPreparationProviderProgramAssociation; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTeacherCandidateTeacherPreparationProviderProgramAssociation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
