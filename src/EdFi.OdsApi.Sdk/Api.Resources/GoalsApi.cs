/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using EdFi.OdsApi.Sdk.Client;
using EdFi.OdsApi.Sdk.Models.Resources;

namespace EdFi.OdsApi.Sdk.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void DeleteGoalById (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGoalByIdWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="assignmentDate">The month, day, and year on which the goal was assigned. (optional)</param>
        /// <param name="goalTitle">The name or title of the goal. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation (e.g., BOY, MOY, EOY, Summer). (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type (e.g., walkthrough, summative) of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="goalTypeDescriptor">The type of the goal (e.g., management, instruction). (optional)</param>
        /// <param name="comments">Any comments about the goal or its completion to be captured. (optional)</param>
        /// <param name="completedDate">The month, day, and year on which the goal was completed. (optional)</param>
        /// <param name="completedIndicator">Indicator that the goal was completed. (optional)</param>
        /// <param name="dueDate">The month, day, and year on which the goal is due or expected to be completed. (optional)</param>
        /// <param name="goalDescription">The description of the goal. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>List&lt;TpdmGoal&gt;</returns>
        List<TpdmGoal> GetGoals (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? assignmentDate = null, string goalTitle = null, string personId = null, string sourceSystemDescriptor = null, int? educationOrganizationId = null, string evaluationElementTitle = null, string evaluationObjectiveTitle = null, string evaluationPeriodDescriptor = null, string evaluationTitle = null, string performanceEvaluationTitle = null, string performanceEvaluationTypeDescriptor = null, int? schoolYear = null, string termDescriptor = null, string goalTypeDescriptor = null, string comments = null, DateTime? completedDate = null, bool? completedIndicator = null, DateTime? dueDate = null, string goalDescription = null, string id = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="assignmentDate">The month, day, and year on which the goal was assigned. (optional)</param>
        /// <param name="goalTitle">The name or title of the goal. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation (e.g., BOY, MOY, EOY, Summer). (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type (e.g., walkthrough, summative) of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="goalTypeDescriptor">The type of the goal (e.g., management, instruction). (optional)</param>
        /// <param name="comments">Any comments about the goal or its completion to be captured. (optional)</param>
        /// <param name="completedDate">The month, day, and year on which the goal was completed. (optional)</param>
        /// <param name="completedIndicator">Indicator that the goal was completed. (optional)</param>
        /// <param name="dueDate">The month, day, and year on which the goal is due or expected to be completed. (optional)</param>
        /// <param name="goalDescription">The description of the goal. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TpdmGoal&gt;</returns>
        ApiResponse<List<TpdmGoal>> GetGoalsWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? assignmentDate = null, string goalTitle = null, string personId = null, string sourceSystemDescriptor = null, int? educationOrganizationId = null, string evaluationElementTitle = null, string evaluationObjectiveTitle = null, string evaluationPeriodDescriptor = null, string evaluationTitle = null, string performanceEvaluationTitle = null, string performanceEvaluationTypeDescriptor = null, int? schoolYear = null, string termDescriptor = null, string goalTypeDescriptor = null, string comments = null, DateTime? completedDate = null, bool? completedIndicator = null, DateTime? dueDate = null, string goalDescription = null, string id = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>TpdmGoal</returns>
        TpdmGoal GetGoalsById (string id, string ifNoneMatch = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>ApiResponse of TpdmGoal</returns>
        ApiResponse<TpdmGoal> GetGoalsByIdWithHttpInfo (string id, string ifNoneMatch = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        void PostGoal (TpdmGoal goal);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGoalWithHttpInfo (TpdmGoal goal);
        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void PutGoal (string id, TpdmGoal goal, string ifMatch = null);

        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutGoalWithHttpInfo (string id, TpdmGoal goal, string ifMatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGoalByIdAsync (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGoalByIdAsyncWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="assignmentDate">The month, day, and year on which the goal was assigned. (optional)</param>
        /// <param name="goalTitle">The name or title of the goal. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation (e.g., BOY, MOY, EOY, Summer). (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type (e.g., walkthrough, summative) of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="goalTypeDescriptor">The type of the goal (e.g., management, instruction). (optional)</param>
        /// <param name="comments">Any comments about the goal or its completion to be captured. (optional)</param>
        /// <param name="completedDate">The month, day, and year on which the goal was completed. (optional)</param>
        /// <param name="completedIndicator">Indicator that the goal was completed. (optional)</param>
        /// <param name="dueDate">The month, day, and year on which the goal is due or expected to be completed. (optional)</param>
        /// <param name="goalDescription">The description of the goal. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of List&lt;TpdmGoal&gt;</returns>
        System.Threading.Tasks.Task<List<TpdmGoal>> GetGoalsAsync (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? assignmentDate = null, string goalTitle = null, string personId = null, string sourceSystemDescriptor = null, int? educationOrganizationId = null, string evaluationElementTitle = null, string evaluationObjectiveTitle = null, string evaluationPeriodDescriptor = null, string evaluationTitle = null, string performanceEvaluationTitle = null, string performanceEvaluationTypeDescriptor = null, int? schoolYear = null, string termDescriptor = null, string goalTypeDescriptor = null, string comments = null, DateTime? completedDate = null, bool? completedIndicator = null, DateTime? dueDate = null, string goalDescription = null, string id = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="assignmentDate">The month, day, and year on which the goal was assigned. (optional)</param>
        /// <param name="goalTitle">The name or title of the goal. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation (e.g., BOY, MOY, EOY, Summer). (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type (e.g., walkthrough, summative) of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="goalTypeDescriptor">The type of the goal (e.g., management, instruction). (optional)</param>
        /// <param name="comments">Any comments about the goal or its completion to be captured. (optional)</param>
        /// <param name="completedDate">The month, day, and year on which the goal was completed. (optional)</param>
        /// <param name="completedIndicator">Indicator that the goal was completed. (optional)</param>
        /// <param name="dueDate">The month, day, and year on which the goal is due or expected to be completed. (optional)</param>
        /// <param name="goalDescription">The description of the goal. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TpdmGoal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TpdmGoal>>> GetGoalsAsyncWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? assignmentDate = null, string goalTitle = null, string personId = null, string sourceSystemDescriptor = null, int? educationOrganizationId = null, string evaluationElementTitle = null, string evaluationObjectiveTitle = null, string evaluationPeriodDescriptor = null, string evaluationTitle = null, string performanceEvaluationTitle = null, string performanceEvaluationTypeDescriptor = null, int? schoolYear = null, string termDescriptor = null, string goalTypeDescriptor = null, string comments = null, DateTime? completedDate = null, bool? completedIndicator = null, DateTime? dueDate = null, string goalDescription = null, string id = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of TpdmGoal</returns>
        System.Threading.Tasks.Task<TpdmGoal> GetGoalsByIdAsync (string id, string ifNoneMatch = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of ApiResponse (TpdmGoal)</returns>
        System.Threading.Tasks.Task<ApiResponse<TpdmGoal>> GetGoalsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostGoalAsync (TpdmGoal goal);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostGoalAsyncWithHttpInfo (TpdmGoal goal);
        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutGoalAsync (string id, TpdmGoal goal, string ifMatch = null);

        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutGoalAsyncWithHttpInfo (string id, TpdmGoal goal, string ifMatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GoalsApi : IGoalsApi
    {
        private EdFi.OdsApi.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GoalsApi(String basePath)
        {
            this.Configuration = new EdFi.OdsApi.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GoalsApi(EdFi.OdsApi.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EdFi.OdsApi.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.OdsApi.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.OdsApi.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void DeleteGoalById (string id, string ifMatch = null)
        {
             DeleteGoalByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGoalByIdWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GoalsApi->DeleteGoalById");

            var localVarPath = "./tpdm/goals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGoalById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGoalByIdAsync (string id, string ifMatch = null)
        {
             await DeleteGoalByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGoalByIdAsyncWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GoalsApi->DeleteGoalById");

            var localVarPath = "./tpdm/goals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGoalById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="assignmentDate">The month, day, and year on which the goal was assigned. (optional)</param>
        /// <param name="goalTitle">The name or title of the goal. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation (e.g., BOY, MOY, EOY, Summer). (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type (e.g., walkthrough, summative) of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="goalTypeDescriptor">The type of the goal (e.g., management, instruction). (optional)</param>
        /// <param name="comments">Any comments about the goal or its completion to be captured. (optional)</param>
        /// <param name="completedDate">The month, day, and year on which the goal was completed. (optional)</param>
        /// <param name="completedIndicator">Indicator that the goal was completed. (optional)</param>
        /// <param name="dueDate">The month, day, and year on which the goal is due or expected to be completed. (optional)</param>
        /// <param name="goalDescription">The description of the goal. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>List&lt;TpdmGoal&gt;</returns>
        public List<TpdmGoal> GetGoals (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? assignmentDate = null, string goalTitle = null, string personId = null, string sourceSystemDescriptor = null, int? educationOrganizationId = null, string evaluationElementTitle = null, string evaluationObjectiveTitle = null, string evaluationPeriodDescriptor = null, string evaluationTitle = null, string performanceEvaluationTitle = null, string performanceEvaluationTypeDescriptor = null, int? schoolYear = null, string termDescriptor = null, string goalTypeDescriptor = null, string comments = null, DateTime? completedDate = null, bool? completedIndicator = null, DateTime? dueDate = null, string goalDescription = null, string id = null)
        {
             ApiResponse<List<TpdmGoal>> localVarResponse = GetGoalsWithHttpInfo(offset, limit, totalCount, assignmentDate, goalTitle, personId, sourceSystemDescriptor, educationOrganizationId, evaluationElementTitle, evaluationObjectiveTitle, evaluationPeriodDescriptor, evaluationTitle, performanceEvaluationTitle, performanceEvaluationTypeDescriptor, schoolYear, termDescriptor, goalTypeDescriptor, comments, completedDate, completedIndicator, dueDate, goalDescription, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="assignmentDate">The month, day, and year on which the goal was assigned. (optional)</param>
        /// <param name="goalTitle">The name or title of the goal. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation (e.g., BOY, MOY, EOY, Summer). (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type (e.g., walkthrough, summative) of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="goalTypeDescriptor">The type of the goal (e.g., management, instruction). (optional)</param>
        /// <param name="comments">Any comments about the goal or its completion to be captured. (optional)</param>
        /// <param name="completedDate">The month, day, and year on which the goal was completed. (optional)</param>
        /// <param name="completedIndicator">Indicator that the goal was completed. (optional)</param>
        /// <param name="dueDate">The month, day, and year on which the goal is due or expected to be completed. (optional)</param>
        /// <param name="goalDescription">The description of the goal. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TpdmGoal&gt;</returns>
        public ApiResponse< List<TpdmGoal> > GetGoalsWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? assignmentDate = null, string goalTitle = null, string personId = null, string sourceSystemDescriptor = null, int? educationOrganizationId = null, string evaluationElementTitle = null, string evaluationObjectiveTitle = null, string evaluationPeriodDescriptor = null, string evaluationTitle = null, string performanceEvaluationTitle = null, string performanceEvaluationTypeDescriptor = null, int? schoolYear = null, string termDescriptor = null, string goalTypeDescriptor = null, string comments = null, DateTime? completedDate = null, bool? completedIndicator = null, DateTime? dueDate = null, string goalDescription = null, string id = null)
        {

            var localVarPath = "./tpdm/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (assignmentDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignmentDate", assignmentDate)); // query parameter
            if (goalTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "goalTitle", goalTitle)); // query parameter
            if (personId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "personId", personId)); // query parameter
            if (sourceSystemDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceSystemDescriptor", sourceSystemDescriptor)); // query parameter
            if (educationOrganizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "educationOrganizationId", educationOrganizationId)); // query parameter
            if (evaluationElementTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "evaluationElementTitle", evaluationElementTitle)); // query parameter
            if (evaluationObjectiveTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "evaluationObjectiveTitle", evaluationObjectiveTitle)); // query parameter
            if (evaluationPeriodDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "evaluationPeriodDescriptor", evaluationPeriodDescriptor)); // query parameter
            if (evaluationTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "evaluationTitle", evaluationTitle)); // query parameter
            if (performanceEvaluationTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "performanceEvaluationTitle", performanceEvaluationTitle)); // query parameter
            if (performanceEvaluationTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "performanceEvaluationTypeDescriptor", performanceEvaluationTypeDescriptor)); // query parameter
            if (schoolYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schoolYear", schoolYear)); // query parameter
            if (termDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "termDescriptor", termDescriptor)); // query parameter
            if (goalTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "goalTypeDescriptor", goalTypeDescriptor)); // query parameter
            if (comments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "comments", comments)); // query parameter
            if (completedDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDate", completedDate)); // query parameter
            if (completedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedIndicator", completedIndicator)); // query parameter
            if (dueDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dueDate", dueDate)); // query parameter
            if (goalDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "goalDescription", goalDescription)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TpdmGoal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TpdmGoal>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TpdmGoal>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="assignmentDate">The month, day, and year on which the goal was assigned. (optional)</param>
        /// <param name="goalTitle">The name or title of the goal. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation (e.g., BOY, MOY, EOY, Summer). (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type (e.g., walkthrough, summative) of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="goalTypeDescriptor">The type of the goal (e.g., management, instruction). (optional)</param>
        /// <param name="comments">Any comments about the goal or its completion to be captured. (optional)</param>
        /// <param name="completedDate">The month, day, and year on which the goal was completed. (optional)</param>
        /// <param name="completedIndicator">Indicator that the goal was completed. (optional)</param>
        /// <param name="dueDate">The month, day, and year on which the goal is due or expected to be completed. (optional)</param>
        /// <param name="goalDescription">The description of the goal. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of List&lt;TpdmGoal&gt;</returns>
        public async System.Threading.Tasks.Task<List<TpdmGoal>> GetGoalsAsync (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? assignmentDate = null, string goalTitle = null, string personId = null, string sourceSystemDescriptor = null, int? educationOrganizationId = null, string evaluationElementTitle = null, string evaluationObjectiveTitle = null, string evaluationPeriodDescriptor = null, string evaluationTitle = null, string performanceEvaluationTitle = null, string performanceEvaluationTypeDescriptor = null, int? schoolYear = null, string termDescriptor = null, string goalTypeDescriptor = null, string comments = null, DateTime? completedDate = null, bool? completedIndicator = null, DateTime? dueDate = null, string goalDescription = null, string id = null)
        {
             ApiResponse<List<TpdmGoal>> localVarResponse = await GetGoalsAsyncWithHttpInfo(offset, limit, totalCount, assignmentDate, goalTitle, personId, sourceSystemDescriptor, educationOrganizationId, evaluationElementTitle, evaluationObjectiveTitle, evaluationPeriodDescriptor, evaluationTitle, performanceEvaluationTitle, performanceEvaluationTypeDescriptor, schoolYear, termDescriptor, goalTypeDescriptor, comments, completedDate, completedIndicator, dueDate, goalDescription, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="assignmentDate">The month, day, and year on which the goal was assigned. (optional)</param>
        /// <param name="goalTitle">The name or title of the goal. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="educationOrganizationId">The identifier assigned to an education organization. (optional)</param>
        /// <param name="evaluationElementTitle">The name or title of the evaluation element. (optional)</param>
        /// <param name="evaluationObjectiveTitle">The name or title of the evaluation Objective. (optional)</param>
        /// <param name="evaluationPeriodDescriptor">The period for the evaluation (e.g., BOY, MOY, EOY, Summer). (optional)</param>
        /// <param name="evaluationTitle">The name or title of the evaluation. (optional)</param>
        /// <param name="performanceEvaluationTitle">An assigned unique identifier for the performance evaluation. (optional)</param>
        /// <param name="performanceEvaluationTypeDescriptor">The type (e.g., walkthrough, summative) of performance evaluation conducted. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="termDescriptor">The term for the session during the school year. (optional)</param>
        /// <param name="goalTypeDescriptor">The type of the goal (e.g., management, instruction). (optional)</param>
        /// <param name="comments">Any comments about the goal or its completion to be captured. (optional)</param>
        /// <param name="completedDate">The month, day, and year on which the goal was completed. (optional)</param>
        /// <param name="completedIndicator">Indicator that the goal was completed. (optional)</param>
        /// <param name="dueDate">The month, day, and year on which the goal is due or expected to be completed. (optional)</param>
        /// <param name="goalDescription">The description of the goal. (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TpdmGoal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TpdmGoal>>> GetGoalsAsyncWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, DateTime? assignmentDate = null, string goalTitle = null, string personId = null, string sourceSystemDescriptor = null, int? educationOrganizationId = null, string evaluationElementTitle = null, string evaluationObjectiveTitle = null, string evaluationPeriodDescriptor = null, string evaluationTitle = null, string performanceEvaluationTitle = null, string performanceEvaluationTypeDescriptor = null, int? schoolYear = null, string termDescriptor = null, string goalTypeDescriptor = null, string comments = null, DateTime? completedDate = null, bool? completedIndicator = null, DateTime? dueDate = null, string goalDescription = null, string id = null)
        {

            var localVarPath = "./tpdm/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (assignmentDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignmentDate", assignmentDate)); // query parameter
            if (goalTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "goalTitle", goalTitle)); // query parameter
            if (personId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "personId", personId)); // query parameter
            if (sourceSystemDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceSystemDescriptor", sourceSystemDescriptor)); // query parameter
            if (educationOrganizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "educationOrganizationId", educationOrganizationId)); // query parameter
            if (evaluationElementTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "evaluationElementTitle", evaluationElementTitle)); // query parameter
            if (evaluationObjectiveTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "evaluationObjectiveTitle", evaluationObjectiveTitle)); // query parameter
            if (evaluationPeriodDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "evaluationPeriodDescriptor", evaluationPeriodDescriptor)); // query parameter
            if (evaluationTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "evaluationTitle", evaluationTitle)); // query parameter
            if (performanceEvaluationTitle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "performanceEvaluationTitle", performanceEvaluationTitle)); // query parameter
            if (performanceEvaluationTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "performanceEvaluationTypeDescriptor", performanceEvaluationTypeDescriptor)); // query parameter
            if (schoolYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schoolYear", schoolYear)); // query parameter
            if (termDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "termDescriptor", termDescriptor)); // query parameter
            if (goalTypeDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "goalTypeDescriptor", goalTypeDescriptor)); // query parameter
            if (comments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "comments", comments)); // query parameter
            if (completedDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDate", completedDate)); // query parameter
            if (completedIndicator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedIndicator", completedIndicator)); // query parameter
            if (dueDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dueDate", dueDate)); // query parameter
            if (goalDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "goalDescription", goalDescription)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TpdmGoal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TpdmGoal>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TpdmGoal>)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>TpdmGoal</returns>
        public TpdmGoal GetGoalsById (string id, string ifNoneMatch = null)
        {
             ApiResponse<TpdmGoal> localVarResponse = GetGoalsByIdWithHttpInfo(id, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>ApiResponse of TpdmGoal</returns>
        public ApiResponse< TpdmGoal > GetGoalsByIdWithHttpInfo (string id, string ifNoneMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GoalsApi->GetGoalsById");

            var localVarPath = "./tpdm/goals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TpdmGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TpdmGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TpdmGoal)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of TpdmGoal</returns>
        public async System.Threading.Tasks.Task<TpdmGoal> GetGoalsByIdAsync (string id, string ifNoneMatch = null)
        {
             ApiResponse<TpdmGoal> localVarResponse = await GetGoalsByIdAsyncWithHttpInfo(id, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of ApiResponse (TpdmGoal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TpdmGoal>> GetGoalsByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GoalsApi->GetGoalsById");

            var localVarPath = "./tpdm/goals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TpdmGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TpdmGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TpdmGoal)));
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        public void PostGoal (TpdmGoal goal)
        {
             PostGoalWithHttpInfo(goal);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostGoalWithHttpInfo (TpdmGoal goal)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->PostGoal");

            var localVarPath = "./tpdm/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostGoalAsync (TpdmGoal goal)
        {
             await PostGoalAsyncWithHttpInfo(goal);

        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostGoalAsyncWithHttpInfo (TpdmGoal goal)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->PostGoal");

            var localVarPath = "./tpdm/goals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void PutGoal (string id, TpdmGoal goal, string ifMatch = null)
        {
             PutGoalWithHttpInfo(id, goal, ifMatch);
        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutGoalWithHttpInfo (string id, TpdmGoal goal, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GoalsApi->PutGoal");
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->PutGoal");

            var localVarPath = "./tpdm/goals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutGoalAsync (string id, TpdmGoal goal, string ifMatch = null)
        {
             await PutGoalAsyncWithHttpInfo(id, goal, ifMatch);

        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="goal">The JSON representation of the \&quot;goal\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutGoalAsyncWithHttpInfo (string id, TpdmGoal goal, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GoalsApi->PutGoal");
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalsApi->PutGoal");

            var localVarPath = "./tpdm/goals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutGoal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
