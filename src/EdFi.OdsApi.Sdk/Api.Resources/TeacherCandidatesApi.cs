/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using EdFi.OdsApi.Sdk.Client;
using EdFi.OdsApi.Sdk.Models.Resources;

namespace EdFi.OdsApi.Sdk.Api.Resources
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeacherCandidatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void DeleteTeacherCandidateById (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTeacherCandidateByIdWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)</param>
        /// <param name="genderDescriptor">The gender with which a person associates. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin. (optional)</param>
        /// <param name="previousCareerDescriptor">The career previous for an individual. (optional)</param>
        /// <param name="sexDescriptor">A person&#39;s gender. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The person&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person. (optional)</param>
        /// <param name="profileThumbnail">Locator for the student photo. (optional)</param>
        /// <param name="programComplete">An indication of whether a teacher candidate has completed the teacher preparation program. (optional)</param>
        /// <param name="tuitionCost">The tuition for a person&#39;s participation in a program, service. or course. (optional)</param>
        /// <returns>List&lt;TpdmTeacherCandidate&gt;</returns>
        List<TpdmTeacherCandidate> GetTeacherCandidates (int? offset = null, int? limit = null, bool? totalCount = null, string teacherCandidateIdentifier = null, string studentUniqueId = null, string personId = null, string sourceSystemDescriptor = null, string citizenshipStatusDescriptor = null, string birthCountryDescriptor = null, string englishLanguageExamDescriptor = null, string genderDescriptor = null, string limitedEnglishProficiencyDescriptor = null, string oldEthnicityDescriptor = null, string previousCareerDescriptor = null, string sexDescriptor = null, string birthSexDescriptor = null, string birthStateAbbreviationDescriptor = null, string birthCity = null, DateTime? birthDate = null, string birthInternationalProvince = null, DateTime? dateEnteredUS = null, string displacementStatus = null, bool? economicDisadvantaged = null, bool? firstGenerationStudent = null, string firstName = null, string generationCodeSuffix = null, bool? hispanicLatinoEthnicity = null, string id = null, string lastSurname = null, string loginId = null, string maidenName = null, string middleName = null, bool? multipleBirthStatus = null, string personalTitlePrefix = null, string profileThumbnail = null, bool? programComplete = null, double? tuitionCost = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)</param>
        /// <param name="genderDescriptor">The gender with which a person associates. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin. (optional)</param>
        /// <param name="previousCareerDescriptor">The career previous for an individual. (optional)</param>
        /// <param name="sexDescriptor">A person&#39;s gender. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The person&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person. (optional)</param>
        /// <param name="profileThumbnail">Locator for the student photo. (optional)</param>
        /// <param name="programComplete">An indication of whether a teacher candidate has completed the teacher preparation program. (optional)</param>
        /// <param name="tuitionCost">The tuition for a person&#39;s participation in a program, service. or course. (optional)</param>
        /// <returns>ApiResponse of List&lt;TpdmTeacherCandidate&gt;</returns>
        ApiResponse<List<TpdmTeacherCandidate>> GetTeacherCandidatesWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, string teacherCandidateIdentifier = null, string studentUniqueId = null, string personId = null, string sourceSystemDescriptor = null, string citizenshipStatusDescriptor = null, string birthCountryDescriptor = null, string englishLanguageExamDescriptor = null, string genderDescriptor = null, string limitedEnglishProficiencyDescriptor = null, string oldEthnicityDescriptor = null, string previousCareerDescriptor = null, string sexDescriptor = null, string birthSexDescriptor = null, string birthStateAbbreviationDescriptor = null, string birthCity = null, DateTime? birthDate = null, string birthInternationalProvince = null, DateTime? dateEnteredUS = null, string displacementStatus = null, bool? economicDisadvantaged = null, bool? firstGenerationStudent = null, string firstName = null, string generationCodeSuffix = null, bool? hispanicLatinoEthnicity = null, string id = null, string lastSurname = null, string loginId = null, string maidenName = null, string middleName = null, bool? multipleBirthStatus = null, string personalTitlePrefix = null, string profileThumbnail = null, bool? programComplete = null, double? tuitionCost = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>TpdmTeacherCandidate</returns>
        TpdmTeacherCandidate GetTeacherCandidatesById (string id, string ifNoneMatch = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>ApiResponse of TpdmTeacherCandidate</returns>
        ApiResponse<TpdmTeacherCandidate> GetTeacherCandidatesByIdWithHttpInfo (string id, string ifNoneMatch = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        void PostTeacherCandidate (TpdmTeacherCandidate teacherCandidate);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTeacherCandidateWithHttpInfo (TpdmTeacherCandidate teacherCandidate);
        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        void PutTeacherCandidate (string id, TpdmTeacherCandidate teacherCandidate, string ifMatch = null);

        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutTeacherCandidateWithHttpInfo (string id, TpdmTeacherCandidate teacherCandidate, string ifMatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTeacherCandidateByIdAsync (string id, string ifMatch = null);

        /// <summary>
        /// Deletes an existing resource using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeacherCandidateByIdAsyncWithHttpInfo (string id, string ifMatch = null);
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)</param>
        /// <param name="genderDescriptor">The gender with which a person associates. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin. (optional)</param>
        /// <param name="previousCareerDescriptor">The career previous for an individual. (optional)</param>
        /// <param name="sexDescriptor">A person&#39;s gender. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The person&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person. (optional)</param>
        /// <param name="profileThumbnail">Locator for the student photo. (optional)</param>
        /// <param name="programComplete">An indication of whether a teacher candidate has completed the teacher preparation program. (optional)</param>
        /// <param name="tuitionCost">The tuition for a person&#39;s participation in a program, service. or course. (optional)</param>
        /// <returns>Task of List&lt;TpdmTeacherCandidate&gt;</returns>
        System.Threading.Tasks.Task<List<TpdmTeacherCandidate>> GetTeacherCandidatesAsync (int? offset = null, int? limit = null, bool? totalCount = null, string teacherCandidateIdentifier = null, string studentUniqueId = null, string personId = null, string sourceSystemDescriptor = null, string citizenshipStatusDescriptor = null, string birthCountryDescriptor = null, string englishLanguageExamDescriptor = null, string genderDescriptor = null, string limitedEnglishProficiencyDescriptor = null, string oldEthnicityDescriptor = null, string previousCareerDescriptor = null, string sexDescriptor = null, string birthSexDescriptor = null, string birthStateAbbreviationDescriptor = null, string birthCity = null, DateTime? birthDate = null, string birthInternationalProvince = null, DateTime? dateEnteredUS = null, string displacementStatus = null, bool? economicDisadvantaged = null, bool? firstGenerationStudent = null, string firstName = null, string generationCodeSuffix = null, bool? hispanicLatinoEthnicity = null, string id = null, string lastSurname = null, string loginId = null, string maidenName = null, string middleName = null, bool? multipleBirthStatus = null, string personalTitlePrefix = null, string profileThumbnail = null, bool? programComplete = null, double? tuitionCost = null);

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)</param>
        /// <param name="genderDescriptor">The gender with which a person associates. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin. (optional)</param>
        /// <param name="previousCareerDescriptor">The career previous for an individual. (optional)</param>
        /// <param name="sexDescriptor">A person&#39;s gender. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The person&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person. (optional)</param>
        /// <param name="profileThumbnail">Locator for the student photo. (optional)</param>
        /// <param name="programComplete">An indication of whether a teacher candidate has completed the teacher preparation program. (optional)</param>
        /// <param name="tuitionCost">The tuition for a person&#39;s participation in a program, service. or course. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TpdmTeacherCandidate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TpdmTeacherCandidate>>> GetTeacherCandidatesAsyncWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, string teacherCandidateIdentifier = null, string studentUniqueId = null, string personId = null, string sourceSystemDescriptor = null, string citizenshipStatusDescriptor = null, string birthCountryDescriptor = null, string englishLanguageExamDescriptor = null, string genderDescriptor = null, string limitedEnglishProficiencyDescriptor = null, string oldEthnicityDescriptor = null, string previousCareerDescriptor = null, string sexDescriptor = null, string birthSexDescriptor = null, string birthStateAbbreviationDescriptor = null, string birthCity = null, DateTime? birthDate = null, string birthInternationalProvince = null, DateTime? dateEnteredUS = null, string displacementStatus = null, bool? economicDisadvantaged = null, bool? firstGenerationStudent = null, string firstName = null, string generationCodeSuffix = null, bool? hispanicLatinoEthnicity = null, string id = null, string lastSurname = null, string loginId = null, string maidenName = null, string middleName = null, bool? multipleBirthStatus = null, string personalTitlePrefix = null, string profileThumbnail = null, bool? programComplete = null, double? tuitionCost = null);
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of TpdmTeacherCandidate</returns>
        System.Threading.Tasks.Task<TpdmTeacherCandidate> GetTeacherCandidatesByIdAsync (string id, string ifNoneMatch = null);

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of ApiResponse (TpdmTeacherCandidate)</returns>
        System.Threading.Tasks.Task<ApiResponse<TpdmTeacherCandidate>> GetTeacherCandidatesByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null);
        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostTeacherCandidateAsync (TpdmTeacherCandidate teacherCandidate);

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostTeacherCandidateAsyncWithHttpInfo (TpdmTeacherCandidate teacherCandidate);
        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutTeacherCandidateAsync (string id, TpdmTeacherCandidate teacherCandidate, string ifMatch = null);

        /// <summary>
        /// Updates or creates a resource based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </remarks>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutTeacherCandidateAsyncWithHttpInfo (string id, TpdmTeacherCandidate teacherCandidate, string ifMatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeacherCandidatesApi : ITeacherCandidatesApi
    {
        private EdFi.OdsApi.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeacherCandidatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeacherCandidatesApi(String basePath)
        {
            this.Configuration = new EdFi.OdsApi.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeacherCandidatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeacherCandidatesApi(EdFi.OdsApi.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EdFi.OdsApi.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EdFi.OdsApi.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.OdsApi.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.OdsApi.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void DeleteTeacherCandidateById (string id, string ifMatch = null)
        {
             DeleteTeacherCandidateByIdWithHttpInfo(id, ifMatch);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTeacherCandidateByIdWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidatesApi->DeleteTeacherCandidateById");

            var localVarPath = "./tpdm/teacherCandidates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeacherCandidateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTeacherCandidateByIdAsync (string id, string ifMatch = null)
        {
             await DeleteTeacherCandidateByIdAsyncWithHttpInfo(id, ifMatch);

        }

        /// <summary>
        /// Deletes an existing resource using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the DELETE from removing a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeacherCandidateByIdAsyncWithHttpInfo (string id, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidatesApi->DeleteTeacherCandidateById");

            var localVarPath = "./tpdm/teacherCandidates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeacherCandidateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)</param>
        /// <param name="genderDescriptor">The gender with which a person associates. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin. (optional)</param>
        /// <param name="previousCareerDescriptor">The career previous for an individual. (optional)</param>
        /// <param name="sexDescriptor">A person&#39;s gender. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The person&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person. (optional)</param>
        /// <param name="profileThumbnail">Locator for the student photo. (optional)</param>
        /// <param name="programComplete">An indication of whether a teacher candidate has completed the teacher preparation program. (optional)</param>
        /// <param name="tuitionCost">The tuition for a person&#39;s participation in a program, service. or course. (optional)</param>
        /// <returns>List&lt;TpdmTeacherCandidate&gt;</returns>
        public List<TpdmTeacherCandidate> GetTeacherCandidates (int? offset = null, int? limit = null, bool? totalCount = null, string teacherCandidateIdentifier = null, string studentUniqueId = null, string personId = null, string sourceSystemDescriptor = null, string citizenshipStatusDescriptor = null, string birthCountryDescriptor = null, string englishLanguageExamDescriptor = null, string genderDescriptor = null, string limitedEnglishProficiencyDescriptor = null, string oldEthnicityDescriptor = null, string previousCareerDescriptor = null, string sexDescriptor = null, string birthSexDescriptor = null, string birthStateAbbreviationDescriptor = null, string birthCity = null, DateTime? birthDate = null, string birthInternationalProvince = null, DateTime? dateEnteredUS = null, string displacementStatus = null, bool? economicDisadvantaged = null, bool? firstGenerationStudent = null, string firstName = null, string generationCodeSuffix = null, bool? hispanicLatinoEthnicity = null, string id = null, string lastSurname = null, string loginId = null, string maidenName = null, string middleName = null, bool? multipleBirthStatus = null, string personalTitlePrefix = null, string profileThumbnail = null, bool? programComplete = null, double? tuitionCost = null)
        {
             ApiResponse<List<TpdmTeacherCandidate>> localVarResponse = GetTeacherCandidatesWithHttpInfo(offset, limit, totalCount, teacherCandidateIdentifier, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, englishLanguageExamDescriptor, genderDescriptor, limitedEnglishProficiencyDescriptor, oldEthnicityDescriptor, previousCareerDescriptor, sexDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, displacementStatus, economicDisadvantaged, firstGenerationStudent, firstName, generationCodeSuffix, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, profileThumbnail, programComplete, tuitionCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)</param>
        /// <param name="genderDescriptor">The gender with which a person associates. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin. (optional)</param>
        /// <param name="previousCareerDescriptor">The career previous for an individual. (optional)</param>
        /// <param name="sexDescriptor">A person&#39;s gender. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The person&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person. (optional)</param>
        /// <param name="profileThumbnail">Locator for the student photo. (optional)</param>
        /// <param name="programComplete">An indication of whether a teacher candidate has completed the teacher preparation program. (optional)</param>
        /// <param name="tuitionCost">The tuition for a person&#39;s participation in a program, service. or course. (optional)</param>
        /// <returns>ApiResponse of List&lt;TpdmTeacherCandidate&gt;</returns>
        public ApiResponse< List<TpdmTeacherCandidate> > GetTeacherCandidatesWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, string teacherCandidateIdentifier = null, string studentUniqueId = null, string personId = null, string sourceSystemDescriptor = null, string citizenshipStatusDescriptor = null, string birthCountryDescriptor = null, string englishLanguageExamDescriptor = null, string genderDescriptor = null, string limitedEnglishProficiencyDescriptor = null, string oldEthnicityDescriptor = null, string previousCareerDescriptor = null, string sexDescriptor = null, string birthSexDescriptor = null, string birthStateAbbreviationDescriptor = null, string birthCity = null, DateTime? birthDate = null, string birthInternationalProvince = null, DateTime? dateEnteredUS = null, string displacementStatus = null, bool? economicDisadvantaged = null, bool? firstGenerationStudent = null, string firstName = null, string generationCodeSuffix = null, bool? hispanicLatinoEthnicity = null, string id = null, string lastSurname = null, string loginId = null, string maidenName = null, string middleName = null, bool? multipleBirthStatus = null, string personalTitlePrefix = null, string profileThumbnail = null, bool? programComplete = null, double? tuitionCost = null)
        {

            var localVarPath = "./tpdm/teacherCandidates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (teacherCandidateIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "teacherCandidateIdentifier", teacherCandidateIdentifier)); // query parameter
            if (studentUniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "studentUniqueId", studentUniqueId)); // query parameter
            if (personId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "personId", personId)); // query parameter
            if (sourceSystemDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceSystemDescriptor", sourceSystemDescriptor)); // query parameter
            if (citizenshipStatusDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "citizenshipStatusDescriptor", citizenshipStatusDescriptor)); // query parameter
            if (birthCountryDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthCountryDescriptor", birthCountryDescriptor)); // query parameter
            if (englishLanguageExamDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "englishLanguageExamDescriptor", englishLanguageExamDescriptor)); // query parameter
            if (genderDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "genderDescriptor", genderDescriptor)); // query parameter
            if (limitedEnglishProficiencyDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limitedEnglishProficiencyDescriptor", limitedEnglishProficiencyDescriptor)); // query parameter
            if (oldEthnicityDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "oldEthnicityDescriptor", oldEthnicityDescriptor)); // query parameter
            if (previousCareerDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousCareerDescriptor", previousCareerDescriptor)); // query parameter
            if (sexDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sexDescriptor", sexDescriptor)); // query parameter
            if (birthSexDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthSexDescriptor", birthSexDescriptor)); // query parameter
            if (birthStateAbbreviationDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthStateAbbreviationDescriptor", birthStateAbbreviationDescriptor)); // query parameter
            if (birthCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthCity", birthCity)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (birthInternationalProvince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthInternationalProvince", birthInternationalProvince)); // query parameter
            if (dateEnteredUS != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateEnteredUS", dateEnteredUS)); // query parameter
            if (displacementStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displacementStatus", displacementStatus)); // query parameter
            if (economicDisadvantaged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "economicDisadvantaged", economicDisadvantaged)); // query parameter
            if (firstGenerationStudent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstGenerationStudent", firstGenerationStudent)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (generationCodeSuffix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generationCodeSuffix", generationCodeSuffix)); // query parameter
            if (hispanicLatinoEthnicity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hispanicLatinoEthnicity", hispanicLatinoEthnicity)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (lastSurname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastSurname", lastSurname)); // query parameter
            if (loginId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loginId", loginId)); // query parameter
            if (maidenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maidenName", maidenName)); // query parameter
            if (middleName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "middleName", middleName)); // query parameter
            if (multipleBirthStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multipleBirthStatus", multipleBirthStatus)); // query parameter
            if (personalTitlePrefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "personalTitlePrefix", personalTitlePrefix)); // query parameter
            if (profileThumbnail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profileThumbnail", profileThumbnail)); // query parameter
            if (programComplete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "programComplete", programComplete)); // query parameter
            if (tuitionCost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tuitionCost", tuitionCost)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TpdmTeacherCandidate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TpdmTeacherCandidate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TpdmTeacherCandidate>)));
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)</param>
        /// <param name="genderDescriptor">The gender with which a person associates. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin. (optional)</param>
        /// <param name="previousCareerDescriptor">The career previous for an individual. (optional)</param>
        /// <param name="sexDescriptor">A person&#39;s gender. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The person&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person. (optional)</param>
        /// <param name="profileThumbnail">Locator for the student photo. (optional)</param>
        /// <param name="programComplete">An indication of whether a teacher candidate has completed the teacher preparation program. (optional)</param>
        /// <param name="tuitionCost">The tuition for a person&#39;s participation in a program, service. or course. (optional)</param>
        /// <returns>Task of List&lt;TpdmTeacherCandidate&gt;</returns>
        public async System.Threading.Tasks.Task<List<TpdmTeacherCandidate>> GetTeacherCandidatesAsync (int? offset = null, int? limit = null, bool? totalCount = null, string teacherCandidateIdentifier = null, string studentUniqueId = null, string personId = null, string sourceSystemDescriptor = null, string citizenshipStatusDescriptor = null, string birthCountryDescriptor = null, string englishLanguageExamDescriptor = null, string genderDescriptor = null, string limitedEnglishProficiencyDescriptor = null, string oldEthnicityDescriptor = null, string previousCareerDescriptor = null, string sexDescriptor = null, string birthSexDescriptor = null, string birthStateAbbreviationDescriptor = null, string birthCity = null, DateTime? birthDate = null, string birthInternationalProvince = null, DateTime? dateEnteredUS = null, string displacementStatus = null, bool? economicDisadvantaged = null, bool? firstGenerationStudent = null, string firstName = null, string generationCodeSuffix = null, bool? hispanicLatinoEthnicity = null, string id = null, string lastSurname = null, string loginId = null, string maidenName = null, string middleName = null, bool? multipleBirthStatus = null, string personalTitlePrefix = null, string profileThumbnail = null, bool? programComplete = null, double? tuitionCost = null)
        {
             ApiResponse<List<TpdmTeacherCandidate>> localVarResponse = await GetTeacherCandidatesAsyncWithHttpInfo(offset, limit, totalCount, teacherCandidateIdentifier, studentUniqueId, personId, sourceSystemDescriptor, citizenshipStatusDescriptor, birthCountryDescriptor, englishLanguageExamDescriptor, genderDescriptor, limitedEnglishProficiencyDescriptor, oldEthnicityDescriptor, previousCareerDescriptor, sexDescriptor, birthSexDescriptor, birthStateAbbreviationDescriptor, birthCity, birthDate, birthInternationalProvince, dateEnteredUS, displacementStatus, economicDisadvantaged, firstGenerationStudent, firstName, generationCodeSuffix, hispanicLatinoEthnicity, id, lastSurname, loginId, maidenName, middleName, multipleBirthStatus, personalTitlePrefix, profileThumbnail, programComplete, tuitionCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="totalCount">Indicates if the total number of items available should be returned in the &#39;Total-Count&#39; header of the response.  If set to false, &#39;Total-Count&#39; header will not be provided. (optional, default to false)</param>
        /// <param name="teacherCandidateIdentifier">A unique alphanumeric code assigned to a teacher candidate. (optional)</param>
        /// <param name="studentUniqueId">A unique alphanumeric code assigned to a student. (optional)</param>
        /// <param name="personId">A unique alphanumeric code assigned to a person. (optional)</param>
        /// <param name="sourceSystemDescriptor">This descriptor defines the originating record source system for the person. (optional)</param>
        /// <param name="citizenshipStatusDescriptor">An indicator of whether or not the person is a U.S. citizen. (optional)</param>
        /// <param name="birthCountryDescriptor">The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes. (optional)</param>
        /// <param name="englishLanguageExamDescriptor">Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL). (optional)</param>
        /// <param name="genderDescriptor">The gender with which a person associates. (optional)</param>
        /// <param name="limitedEnglishProficiencyDescriptor">An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. (optional)</param>
        /// <param name="oldEthnicityDescriptor">Previous definition of Ethnicity combining Hispanic/Latino and race:        1 - American Indian or Alaskan Native        2 - Asian or Pacific Islander        3 - Black, not of Hispanic origin        4 - Hispanic        5 - White, not of Hispanic origin. (optional)</param>
        /// <param name="previousCareerDescriptor">The career previous for an individual. (optional)</param>
        /// <param name="sexDescriptor">A person&#39;s gender. (optional)</param>
        /// <param name="birthSexDescriptor">A person&#39;s gender at birth. (optional)</param>
        /// <param name="birthStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born. (optional)</param>
        /// <param name="birthCity">The city the student was born in. (optional)</param>
        /// <param name="birthDate">The month, day, and year on which an individual was born. (optional)</param>
        /// <param name="birthInternationalProvince">For students born outside of the U.S., the Province or jurisdiction in which an individual is born. (optional)</param>
        /// <param name="dateEnteredUS">For students born outside of the U.S., the date the student entered the U.S. (optional)</param>
        /// <param name="displacementStatus">Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services. (optional)</param>
        /// <param name="economicDisadvantaged">An indication of inadequate financial condition of an individual&#39;s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy. (optional)</param>
        /// <param name="firstGenerationStudent">Indicator of whether individual is a first generation college student. (optional)</param>
        /// <param name="firstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (optional)</param>
        /// <param name="generationCodeSuffix">An appendage, if any, used to denote an individual&#39;s generation in his family (e.g., Jr., Sr., III). (optional)</param>
        /// <param name="hispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot; (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="lastSurname">The name borne in common by members of a family. (optional)</param>
        /// <param name="loginId">The login ID for the user; used for security access control interface. (optional)</param>
        /// <param name="maidenName">The person&#39;s maiden name. (optional)</param>
        /// <param name="middleName">A secondary name given to an individual at birth, baptism, or during another naming ceremony. (optional)</param>
        /// <param name="multipleBirthStatus">Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.) (optional)</param>
        /// <param name="personalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person. (optional)</param>
        /// <param name="profileThumbnail">Locator for the student photo. (optional)</param>
        /// <param name="programComplete">An indication of whether a teacher candidate has completed the teacher preparation program. (optional)</param>
        /// <param name="tuitionCost">The tuition for a person&#39;s participation in a program, service. or course. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TpdmTeacherCandidate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TpdmTeacherCandidate>>> GetTeacherCandidatesAsyncWithHttpInfo (int? offset = null, int? limit = null, bool? totalCount = null, string teacherCandidateIdentifier = null, string studentUniqueId = null, string personId = null, string sourceSystemDescriptor = null, string citizenshipStatusDescriptor = null, string birthCountryDescriptor = null, string englishLanguageExamDescriptor = null, string genderDescriptor = null, string limitedEnglishProficiencyDescriptor = null, string oldEthnicityDescriptor = null, string previousCareerDescriptor = null, string sexDescriptor = null, string birthSexDescriptor = null, string birthStateAbbreviationDescriptor = null, string birthCity = null, DateTime? birthDate = null, string birthInternationalProvince = null, DateTime? dateEnteredUS = null, string displacementStatus = null, bool? economicDisadvantaged = null, bool? firstGenerationStudent = null, string firstName = null, string generationCodeSuffix = null, bool? hispanicLatinoEthnicity = null, string id = null, string lastSurname = null, string loginId = null, string maidenName = null, string middleName = null, bool? multipleBirthStatus = null, string personalTitlePrefix = null, string profileThumbnail = null, bool? programComplete = null, double? tuitionCost = null)
        {

            var localVarPath = "./tpdm/teacherCandidates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (totalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalCount", totalCount)); // query parameter
            if (teacherCandidateIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "teacherCandidateIdentifier", teacherCandidateIdentifier)); // query parameter
            if (studentUniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "studentUniqueId", studentUniqueId)); // query parameter
            if (personId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "personId", personId)); // query parameter
            if (sourceSystemDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceSystemDescriptor", sourceSystemDescriptor)); // query parameter
            if (citizenshipStatusDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "citizenshipStatusDescriptor", citizenshipStatusDescriptor)); // query parameter
            if (birthCountryDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthCountryDescriptor", birthCountryDescriptor)); // query parameter
            if (englishLanguageExamDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "englishLanguageExamDescriptor", englishLanguageExamDescriptor)); // query parameter
            if (genderDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "genderDescriptor", genderDescriptor)); // query parameter
            if (limitedEnglishProficiencyDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limitedEnglishProficiencyDescriptor", limitedEnglishProficiencyDescriptor)); // query parameter
            if (oldEthnicityDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "oldEthnicityDescriptor", oldEthnicityDescriptor)); // query parameter
            if (previousCareerDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousCareerDescriptor", previousCareerDescriptor)); // query parameter
            if (sexDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sexDescriptor", sexDescriptor)); // query parameter
            if (birthSexDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthSexDescriptor", birthSexDescriptor)); // query parameter
            if (birthStateAbbreviationDescriptor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthStateAbbreviationDescriptor", birthStateAbbreviationDescriptor)); // query parameter
            if (birthCity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthCity", birthCity)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (birthInternationalProvince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birthInternationalProvince", birthInternationalProvince)); // query parameter
            if (dateEnteredUS != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateEnteredUS", dateEnteredUS)); // query parameter
            if (displacementStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displacementStatus", displacementStatus)); // query parameter
            if (economicDisadvantaged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "economicDisadvantaged", economicDisadvantaged)); // query parameter
            if (firstGenerationStudent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstGenerationStudent", firstGenerationStudent)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (generationCodeSuffix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generationCodeSuffix", generationCodeSuffix)); // query parameter
            if (hispanicLatinoEthnicity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hispanicLatinoEthnicity", hispanicLatinoEthnicity)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (lastSurname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastSurname", lastSurname)); // query parameter
            if (loginId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loginId", loginId)); // query parameter
            if (maidenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maidenName", maidenName)); // query parameter
            if (middleName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "middleName", middleName)); // query parameter
            if (multipleBirthStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "multipleBirthStatus", multipleBirthStatus)); // query parameter
            if (personalTitlePrefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "personalTitlePrefix", personalTitlePrefix)); // query parameter
            if (profileThumbnail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profileThumbnail", profileThumbnail)); // query parameter
            if (programComplete != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "programComplete", programComplete)); // query parameter
            if (tuitionCost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tuitionCost", tuitionCost)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TpdmTeacherCandidate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<TpdmTeacherCandidate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TpdmTeacherCandidate>)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>TpdmTeacherCandidate</returns>
        public TpdmTeacherCandidate GetTeacherCandidatesById (string id, string ifNoneMatch = null)
        {
             ApiResponse<TpdmTeacherCandidate> localVarResponse = GetTeacherCandidatesByIdWithHttpInfo(id, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>ApiResponse of TpdmTeacherCandidate</returns>
        public ApiResponse< TpdmTeacherCandidate > GetTeacherCandidatesByIdWithHttpInfo (string id, string ifNoneMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidatesApi->GetTeacherCandidatesById");

            var localVarPath = "./tpdm/teacherCandidates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherCandidatesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TpdmTeacherCandidate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TpdmTeacherCandidate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TpdmTeacherCandidate)));
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of TpdmTeacherCandidate</returns>
        public async System.Threading.Tasks.Task<TpdmTeacherCandidate> GetTeacherCandidatesByIdAsync (string id, string ifNoneMatch = null)
        {
             ApiResponse<TpdmTeacherCandidate> localVarResponse = await GetTeacherCandidatesByIdAsyncWithHttpInfo(id, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <returns>Task of ApiResponse (TpdmTeacherCandidate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TpdmTeacherCandidate>> GetTeacherCandidatesByIdAsyncWithHttpInfo (string id, string ifNoneMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidatesApi->GetTeacherCandidatesById");

            var localVarPath = "./tpdm/teacherCandidates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", this.Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherCandidatesById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TpdmTeacherCandidate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TpdmTeacherCandidate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TpdmTeacherCandidate)));
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <returns></returns>
        public void PostTeacherCandidate (TpdmTeacherCandidate teacherCandidate)
        {
             PostTeacherCandidateWithHttpInfo(teacherCandidate);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostTeacherCandidateWithHttpInfo (TpdmTeacherCandidate teacherCandidate)
        {
            // verify the required parameter 'teacherCandidate' is set
            if (teacherCandidate == null)
                throw new ApiException(400, "Missing required parameter 'teacherCandidate' when calling TeacherCandidatesApi->PostTeacherCandidate");

            var localVarPath = "./tpdm/teacherCandidates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teacherCandidate != null && teacherCandidate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teacherCandidate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teacherCandidate; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTeacherCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostTeacherCandidateAsync (TpdmTeacherCandidate teacherCandidate)
        {
             await PostTeacherCandidateAsyncWithHttpInfo(teacherCandidate);

        }

        /// <summary>
        /// Creates or updates resources based on the natural key values of the supplied resource. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \&quot;id\&quot;). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostTeacherCandidateAsyncWithHttpInfo (TpdmTeacherCandidate teacherCandidate)
        {
            // verify the required parameter 'teacherCandidate' is set
            if (teacherCandidate == null)
                throw new ApiException(400, "Missing required parameter 'teacherCandidate' when calling TeacherCandidatesApi->PostTeacherCandidate");

            var localVarPath = "./tpdm/teacherCandidates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teacherCandidate != null && teacherCandidate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teacherCandidate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teacherCandidate; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTeacherCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns></returns>
        public void PutTeacherCandidate (string id, TpdmTeacherCandidate teacherCandidate, string ifMatch = null)
        {
             PutTeacherCandidateWithHttpInfo(id, teacherCandidate, ifMatch);
        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutTeacherCandidateWithHttpInfo (string id, TpdmTeacherCandidate teacherCandidate, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidatesApi->PutTeacherCandidate");
            // verify the required parameter 'teacherCandidate' is set
            if (teacherCandidate == null)
                throw new ApiException(400, "Missing required parameter 'teacherCandidate' when calling TeacherCandidatesApi->PutTeacherCandidate");

            var localVarPath = "./tpdm/teacherCandidates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (teacherCandidate != null && teacherCandidate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teacherCandidate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teacherCandidate; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTeacherCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutTeacherCandidateAsync (string id, TpdmTeacherCandidate teacherCandidate, string ifMatch = null)
        {
             await PutTeacherCandidateAsyncWithHttpInfo(id, teacherCandidate, ifMatch);

        }

        /// <summary>
        /// Updates or creates a resource based on the resource identifier. The PUT operation is used to update or create a resource by identifier. If the resource doesn&#39;t exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \&quot;id\&quot; is provided in the JSON body, it will be ignored as well.
        /// </summary>
        /// <exception cref="EdFi.OdsApi.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="teacherCandidate">The JSON representation of the \&quot;teacherCandidate\&quot; resource to be created or updated.</param>
        /// <param name="ifMatch">The ETag header value used to prevent the PUT from updating a resource modified by another consumer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutTeacherCandidateAsyncWithHttpInfo (string id, TpdmTeacherCandidate teacherCandidate, string ifMatch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeacherCandidatesApi->PutTeacherCandidate");
            // verify the required parameter 'teacherCandidate' is set
            if (teacherCandidate == null)
                throw new ApiException(400, "Missing required parameter 'teacherCandidate' when calling TeacherCandidatesApi->PutTeacherCandidate");

            var localVarPath = "./tpdm/teacherCandidates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", this.Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (teacherCandidate != null && teacherCandidate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teacherCandidate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teacherCandidate; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutTeacherCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
